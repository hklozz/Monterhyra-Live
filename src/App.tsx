/*
 * Copyright ¬© 2025 Klozz Holding AB. All rights reserved.
 * MONTERHYRA‚Ñ¢ - Proprietary and Confidential
 * Unauthorized copying or distribution is strictly prohibited.
 */

import React, { useState, useMemo, useRef, useImperativeHandle, useEffect } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import emailjs from '@emailjs/browser';
import { Edges, Text, useTexture } from '@react-three/drei';
import { Canvas, useThree } from '@react-three/fiber';
import { OrbitControls, Grid } from '@react-three/drei';
import * as THREE from 'three';
import { EspressoMachine, FlowerVase, CandyBowl } from './CounterItems';
import computePacklista from './packlista';
import { WallShelf, ClothingRack, SpeakerOnStand } from './WallDecorations';
import VepaPDFGenerator from './VepaPDFGenerator';
import ForexPDFGenerator from './ForexPDFGenerator';
import StoragePDFGenerator from './StoragePDFGenerator';
import type { StorageWallDesign } from './StoragePDFGenerator';
import { OrderManager } from './OrderManager';
import type { CustomerInfo, OrderData } from './OrderManager';
import AdminPortal from './AdminPortal';

// Custom Dropdown Component for visual elements
const CustomDropdown = ({ 
  options, 
  value, 
  onChange, 
  placeholder, 
  renderOption, 
  style = {} 
}: {
  options: any[];
  value: any;
  onChange: (value: any) => void;
  placeholder: string;
  renderOption: (option: any) => React.ReactNode;
  style?: React.CSSProperties;
}) => {
  const [isOpen, setIsOpen] = useState(false);
  
  const selectedOption = options.find(opt => opt.value === value || opt.label === value || opt === value);
  
  return (
    <div style={{ position: 'relative', ...style }}>
      <div
        onClick={() => setIsOpen(!isOpen)}
        style={{
          width: '100%',
          padding: '8px 12px',
          border: '1px solid #ddd',
          borderRadius: '8px',
          background: 'white',
          cursor: 'pointer',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          minHeight: '40px'
        }}
      >
        <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
          {selectedOption ? renderOption(selectedOption) : placeholder}
        </div>
        <span style={{ color: '#666' }}>{isOpen ? '‚ñ≤' : '‚ñº'}</span>
      </div>
      
      {isOpen && (
        <div
          style={{
            position: 'absolute',
            top: '100%',
            left: 0,
            right: 0,
            background: 'white',
            border: '1px solid #ddd',
            borderTop: 'none',
            borderRadius: '0 0 8px 8px',
            maxHeight: '200px',
            overflowY: 'auto',
            zIndex: 1000,
            boxShadow: '0 4px 8px rgba(0,0,0,0.1)'
          }}
        >
          {options.map((option, index) => (
            <div
              key={index}
              onClick={() => {
                onChange(option.value || option.label || option);
                setIsOpen(false);
              }}
              style={{
                padding: '8px 12px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                borderBottom: index < options.length - 1 ? '1px solid #eee' : 'none'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#f5f5f5';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'white';
              }}
            >
              {renderOption(option)}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

// Visuell instruktionskomponent
const InstructionCard = ({ 
  icon, 
  title, 
  description, 
  type = 'info' 
}: {
  icon: string;
  title: string;
  description: string;
  type?: 'info' | 'success' | 'warning';
}) => {
  const bgColors = {
    info: '#f8f9ff',
    success: '#f0fdf4',
    warning: '#fffbeb'
  };
  
  const borderColors = {
    info: '#e0e7ff',
    success: '#dcfce7',
    warning: '#fed7aa'
  };
  
  return (
    <div style={{
      background: bgColors[type],
      border: `1px solid ${borderColors[type]}`,
      borderRadius: '8px',
      padding: '12px',
      marginTop: '8px',
      display: 'flex',
      alignItems: 'flex-start',
      gap: '8px'
    }}>
      <span style={{ fontSize: '16px', lineHeight: '20px' }}>{icon}</span>
      <div>
        <div style={{ fontWeight: 600, fontSize: '13px', marginBottom: '4px' }}>{title}</div>
        <div style={{ fontSize: '12px', color: '#666', lineHeight: '16px' }}>{description}</div>
      </div>
    </div>
  );
};

const DESK_SIZES = [
  { label: '1m', width: 1 },
  { label: '2m', width: 2 },
  { label: '3m', width: 3 }
];

const COUNTER_TYPES = [
  { label: 'Ingen disk', width: 0, depth: 0, image: '/Models/counters/none.svg' },
  { label: '1m disk', width: 1, depth: 0.5, image: '/Models/counters/1m.svg' },
  { label: '1,5m disk', width: 1.5, depth: 0.5, image: '/Models/counters/1-5m.svg' },
  { label: '2m disk', width: 2, depth: 0.5, image: '/Models/counters/2m.svg' },
  { label: '2,5m disk', width: 2.5, depth: 0.5, image: '/Models/counters/2-5m.svg' },
  { label: '3m disk', width: 3, depth: 0.5, image: '/Models/counters/3m.svg' },
  { label: '3,5m disk', width: 3.5, depth: 0.5, image: '/Models/counters/3m.svg' },
  { label: '4m disk', width: 4, depth: 0.5, image: '/Models/counters/3m.svg' },
  { label: 'L-disk (1,5m + 1m)', width: 0, depth: 0, type: 'L', image: '/Models/walls/l-shape.svg' },
  { label: 'L-disk spegelv√§nd (1,5m + 1m)', width: 0, depth: 0, type: 'L-mirrored', image: '/Models/walls/l-shape.svg' }
];

const TV_SIZES = [
  { label: 'Ingen', width: 0, height: 0, image: '/Models/tvs/none.svg' },
  { label: '32"', width: 0.71, height: 0.40, image: '/Models/tvs/32inch.svg' },
  { label: '43"', width: 0.96, height: 0.56, image: '/Models/tvs/43inch.svg' },
  { label: '55"', width: 1.22, height: 0.71, image: '/Models/tvs/55inch.svg' },
  { label: '70"', width: 1.55, height: 0.90, image: '/Models/tvs/70inch.svg' },
  { label: '75" beTV', width: 1.68, height: 0.95, image: '/Models/tvs/75inch.svg' }
];

const TRUSS_TYPES = [
  { label: 'Ingen truss', type: 'none', image: null },
  { label: 'Framkant truss (rak)', type: 'front-straight', width: 0.3, height: 0.3, image: null },
  { label: 'Rund h√§ngande truss', type: 'hanging-round', diameter: 2.0, height: 0.25, image: null },
  { label: 'Fyrkantig h√§ngande truss', type: 'hanging-square', width: 2.0, depth: 2.0, height: 0.25, image: null }
] as const;

const STORAGE_TYPES = [
  { label: 'Inget f√∂rr√•d', width: 0, depth: 0, image: null },
  { label: '1x1m f√∂rr√•d', width: 1, depth: 1, image: null },
  { label: '2x1m f√∂rr√•d', width: 2, depth: 1, image: null },
  { label: '3x1m f√∂rr√•d', width: 3, depth: 1, image: null },
  { label: '4x1m f√∂rr√•d', width: 4, depth: 1, image: null }
];

const PLANT_TYPES = [
  { label: 'Ficus', width: 0.4, depth: 0.4, height: 1.8, color: '#228B22', leafColor: '#32CD32', type: 'tree', emoji: 'üåø', image: '/Models/plants/Ficus.png' },
  { label: 'Monstera', width: 0.6, depth: 0.6, height: 1.2, color: '#2F4F2F', leafColor: '#228B22', type: 'broad', emoji: 'üçÉ', image: '/Models/plants/monstera.svg' },
  { label: 'Bambu', width: 0.3, depth: 0.3, height: 2.0, color: '#556B2F', leafColor: '#9ACD32', type: 'bamboo', emoji: 'üéã', image: '/Models/plants/bambu.svg' },
  { label: 'Palmlilja', width: 0.5, depth: 0.5, height: 1.5, color: '#8FBC8F', leafColor: '#90EE90', type: 'palm', emoji: 'üå¥', image: '/Models/plants/palmlilja.svg' },
  { label: 'Olivtr√§d', width: 0.7, depth: 0.7, height: 1.6, color: '#8B7355', leafColor: '#6B8E23', type: 'tree', emoji: 'ü´í', image: '/Models/plants/Olivtr√§d.png' },
  { label: 'Sansevieria', width: 0.3, depth: 0.3, height: 1.0, color: '#2F4F2F', leafColor: '#228B22', type: 'spiky', emoji: 'üå±', image: '/Models/plants/sansevieria.svg' },
  { label: 'Kaktus', width: 0.2, depth: 0.2, height: 0.8, color: '#228B22', leafColor: '#32CD32', type: 'cactus', emoji: 'üåµ', image: '/Models/plants/kaktus.svg' },
  { label: 'Rosmarin', width: 0.4, depth: 0.4, height: 0.6, color: '#556B2F', leafColor: '#9ACD32', type: 'herb', emoji: 'üåø', image: '/Models/plants/rosmarin.svg' },
  { label: 'Lavendel', width: 0.5, depth: 0.5, height: 0.7, color: '#663399', leafColor: '#DDA0DD', type: 'flower', emoji: 'üíú', image: '/Models/plants/lavendel.svg' },
  { label: 'Eucalyptus', width: 0.8, depth: 0.8, height: 2.2, color: '#8FBC8F', leafColor: '#98FB98', type: 'tree', emoji: 'üå≥', image: '/Models/plants/dracaena.png' }
];

// MONTERMALLAR F√ñR M√ÑSSHALLEN
const EXHIBITION_BOOTH_TEMPLATES = [
  {
    id: 'empty',
    name: 'Tom mont√∂r',
    emoji: '‚¨ú',
    floorSize: { width: 3, depth: 3 },
    floor: '3x3',
    wallShape: '',
    wallHeight: 2.4,
    carpet: 0,
    counters: [],
    furniture: [],
    plants: [],
    storages: [],
    wallShelves: []
  },
  {
    id: 'tech-startup',
    name: 'Tech Startup',
    emoji: 'üíª',
    floorSize: { width: 3, depth: 3 },
    floor: '3x3',
    wallShape: 'l',
    wallHeight: 2.4,
    carpet: 1, // F√∂rsta f√§rgmattan
    counters: [
      { id: 1, type: '2m disk', position: { x: 0.8, z: -0.8 }, rotation: 0 }
    ],
    furniture: [
      { id: 1, type: 'barbord', position: { x: -0.5, z: 0.5 }, rotation: 0 }
    ],
    plants: [
      { id: 1, type: 'Monstera', position: { x: 1.0, z: 1.0 } }
    ],
    storages: [],
    wallShelves: []
  },
  {
    id: 'fashion-brand',
    name: 'Fashion Brand',
    emoji: 'üëó',
    floorSize: { width: 4, depth: 4 },
    floor: '4x4',
    wallShape: 'u',
    wallHeight: 2.4,
    carpet: 3, // EXPO f√§rg
    counters: [
      { id: 1, type: '1,5m disk', position: { x: 1.2, z: -1.2 }, rotation: 45 }
    ],
    furniture: [
      { id: 1, type: 'soffa', position: { x: -1.0, z: 0 }, rotation: 90 },
      { id: 2, type: 'fatolj', position: { x: 0, z: 1.0 }, rotation: 180 }
    ],
    plants: [
      { id: 1, type: 'Ficus', position: { x: 1.5, z: 1.5 } }
    ],
    storages: [],
    wallShelves: []
  },
  {
    id: 'food-company',
    name: 'Food Company',
    emoji: 'üçï',
    floorSize: { width: 6, depth: 3 },
    floor: '3x1-5',
    wallShape: 'straight',
    wallHeight: 2.4,
    carpet: 2, // Annan f√§rgmatta
    counters: [
      { id: 1, type: '3m disk', position: { x: 0, z: -1.0 }, rotation: 0 },
      { id: 2, type: '2m disk', position: { x: 2.0, z: 0 }, rotation: 90 }
    ],
    furniture: [
      { id: 1, type: 'barbord', position: { x: -1.5, z: 0 }, rotation: 0 },
      { id: 2, type: 'barstol', position: { x: -1.2, z: 0.3 }, rotation: 0 },
      { id: 3, type: 'barstol', position: { x: -1.2, z: -0.3 }, rotation: 0 }
    ],
    plants: [],
    storages: [],
    wallShelves: []
  },
  {
    id: 'wellness-spa',
    name: 'Wellness & Spa',
    emoji: 'üßò',
    floorSize: { width: 4, depth: 4 },
    floor: '4x4',
    wallShape: 'l',
    wallHeight: 2.4,
    carpet: 4, // SALSA f√§rg
    counters: [
      { id: 1, type: '1m disk', position: { x: 1.0, z: -1.0 }, rotation: 0 }
    ],
    furniture: [
      { id: 1, type: 'soffa', position: { x: 0, z: 0.5 }, rotation: 0 },
      { id: 2, type: 'sidobord', position: { x: -0.8, z: 0.8 }, rotation: 0 }
    ],
    plants: [
      { id: 1, type: 'Palmlilja', position: { x: 1.5, z: 1.5 } },
      { id: 2, type: 'Bambu', position: { x: -1.2, z: 1.2 } }
    ],
    storages: [],
    wallShelves: []
  },
  {
    id: 'minimal-design',
    name: 'Minimal Design',
    emoji: '‚ö™',
    floorSize: { width: 3, depth: 3 },
    floor: '3x3',
    wallShape: 'straight',
    wallHeight: 2.4,
    carpet: 0, // Ingen matta
    counters: [
      { id: 1, type: 'L-disk (1,5m + 1m)', position: { x: 0.5, z: -0.5 }, rotation: 0 }
    ],
    furniture: [
      { id: 1, type: 'fatolj', position: { x: -0.8, z: 0.8 }, rotation: 135 }
    ],
    plants: [
      { id: 1, type: 'Monstera', position: { x: 1.2, z: 1.2 } }
    ],
    storages: [],
    wallShelves: []
  }
];

// Exhibition booth interfaces
interface ExhibitionBoothTemplate {
  id: string;
  name: string;
  emoji?: string;
  floor: string;
  floorSize?: { width: number; depth: number };
  wallShape?: string;
  wallHeight?: number;
  walls?: {
    type: 'straight' | 'l-shape' | 'u-shape';
  };
  carpet?: string | number;
  counters?: Array<{
    id: number;
    type: '1m' | '1-5m' | '2m' | '2-5m' | '3m' | string;
    position: { x: number; z: number };
    rotation?: number;
  }>;
  furniture?: Array<{
    id: number;
    type: 'fatolj' | 'soffa' | 'barbord' | 'barstol' | 'sidobord' | 'pall' | string;
    position: { x: number; z: number };
    rotation?: number;
  }>;
  plants?: Array<{
    id: number;
    type: 'Monstera' | 'Ficus' | 'Olivtr√§d' | 'kaktus' | string;
    position: { x: number; z: number };
  }>;
  storages: any[];
  wallShelves: any[];
}

// Exhibition booth renderer function
const ExhibitionBoothRenderer: React.FC<{ 
  booth: ExhibitionBoothTemplate, 
  position: { x: number, z: number } 
}> = ({ booth, position }) => {
  if (!booth) return null;

  const floorSizeMap: { [key: string]: { width: number, length: number } } = {
    '3x3': { width: 3, length: 3 },
    '4x4': { width: 4, length: 4 },
    '3x1-5': { width: 3, length: 1.5 }
  };

  const floorSize = floorSizeMap[booth.floor] || { width: 3, length: 3 };

  return (
    <group position={[position.x, 0, position.z]}>
      {/* ENKEL BOOTH SPOTLIGHT - Lagom intensitet */}
      <spotLight
        position={[0, 6, 0]}
        target-position={[0, 0, 0]}
        intensity={50}
        angle={Math.PI / 3}
        penumbra={0.5}
        distance={12}
        color="#ffffff"
      />
      
      {/* Premiumgolv - Glossy finish */}
      <mesh position={[0, 0.01, 0]} rotation={[-Math.PI / 2, 0, 0]} receiveShadow>
        <planeGeometry args={[floorSize.width, floorSize.length]} />
        <meshPhysicalMaterial 
          color="#2a2a2a" 
          roughness={0.1}
          metalness={0.8}
          clearcoat={1.0}
          reflectivity={0.9}
        />
      </mesh>

      {/* Lyxmatta med textur */}
      {booth.carpet && (
        <mesh position={[0, 0.02, 0]} rotation={[-Math.PI / 2, 0, 0]} receiveShadow>
          <planeGeometry args={[floorSize.width * 0.8, floorSize.length * 0.8]} />
          <meshPhysicalMaterial 
            color={booth.carpet} 
            roughness={0.9}
            normalScale={[0.5, 0.5]}
          />
        </mesh>
      )}

      {/* PROFESSIONELLA V√ÑGGAR med tjocklek och hyrgrafik */}
      {booth.wallShape === 'straight' && (
        <group>
          {/* Huvudv√§gg */}
          <mesh position={[0, 1.25, -floorSize.length/2]} castShadow receiveShadow>
            <boxGeometry args={[floorSize.width, 2.5, 0.15]} />
            <meshPhysicalMaterial 
              color="#f8f9fa" 
              roughness={0.3}
              metalness={0.1}
              clearcoat={0.3}
            />
          </mesh>
          
          {/* HYRGRAFIK p√• bakv√§gg */}
          <mesh position={[0, 1.3, -floorSize.length/2 + 0.08]} rotation={[0, 0, 0]}>
            <planeGeometry args={[floorSize.width * 0.8, 1.8]} />
            <meshPhysicalMaterial 
              color="#1e40af"
              roughness={0.1}
              metalness={0.2}
            />
          </mesh>
          
          {/* Monterhyra logotype p√• grafik */}
          <mesh position={[0, 1.8, -floorSize.length/2 + 0.085]}>
            <planeGeometry args={[1.5, 0.3]} />
            <meshPhysicalMaterial 
              color="#ffffff"
              roughness={0.0}
              metalness={0.0}
            />
          </mesh>
          
          {/* Dekorativa element */}
          <mesh position={[-floorSize.width * 0.25, 0.8, -floorSize.length/2 + 0.085]}>
            <planeGeometry args={[0.6, 0.6]} />
            <meshPhysicalMaterial 
              color="#3b82f6"
              roughness={0.1}
              metalness={0.3}
            />
          </mesh>
          <mesh position={[floorSize.width * 0.25, 0.8, -floorSize.length/2 + 0.085]}>
            <planeGeometry args={[0.6, 0.6]} />
            <meshPhysicalMaterial 
              color="#3b82f6"
              roughness={0.1}
              metalness={0.3}
            />
          </mesh>
          
          {/* V√§ggkant - metallisk finish */}
          <mesh position={[0, 2.52, -floorSize.length/2]}>
            <boxGeometry args={[floorSize.width, 0.04, 0.16]} />
            <meshPhysicalMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} />
          </mesh>
        </group>
      )}

      {booth.wallShape === 'l' && (
        <group>
          {/* Bakv√§gg */}
          <mesh position={[0, 1.25, -floorSize.length/2]} castShadow receiveShadow>
            <boxGeometry args={[floorSize.width, 2.5, 0.15]} />
            <meshPhysicalMaterial color="#f8f9fa" roughness={0.3} metalness={0.1} clearcoat={0.3} />
          </mesh>
          
          {/* HYRGRAFIK p√• bakv√§gg */}
          <mesh position={[0, 1.3, -floorSize.length/2 + 0.08]}>
            <planeGeometry args={[floorSize.width * 0.7, 1.6]} />
            <meshPhysicalMaterial 
              color="#dc2626"
              roughness={0.1}
              metalness={0.2}
            />
          </mesh>
          
          {/* Monterhyra logotype */}
          <mesh position={[0, 1.7, -floorSize.length/2 + 0.085]}>
            <planeGeometry args={[1.2, 0.25]} />
            <meshPhysicalMaterial 
              color="#ffffff"
            />
          </mesh>
          
          <mesh position={[0, 2.52, -floorSize.length/2]}>
            <boxGeometry args={[floorSize.width, 0.04, 0.16]} />
            <meshPhysicalMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} />
          </mesh>
          
          {/* Sidov√§gg */}
          <mesh position={[-floorSize.width/2, 1.25, 0]} castShadow receiveShadow>
            <boxGeometry args={[0.15, 2.5, floorSize.length]} />
            <meshPhysicalMaterial color="#f8f9fa" roughness={0.3} metalness={0.1} clearcoat={0.3} />
          </mesh>
          
          {/* HYRGRAFIK p√• sidov√§gg */}
          <mesh position={[-floorSize.width/2 + 0.08, 1.2, 0]} rotation={[0, Math.PI/2, 0]}>
            <planeGeometry args={[floorSize.length * 0.6, 1.4]} />
            <meshPhysicalMaterial 
              color="#dc2626"
              roughness={0.1}
              metalness={0.2}
            />
          </mesh>
          
          <mesh position={[-floorSize.width/2, 2.52, 0]}>
            <boxGeometry args={[0.16, 0.04, floorSize.length]} />
            <meshPhysicalMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} />
          </mesh>
        </group>
      )}

      {booth.wallShape === 'u' && (
        <group>
          {/* Bakv√§gg */}
          <mesh position={[0, 1.25, -floorSize.length/2]} castShadow receiveShadow>
            <boxGeometry args={[floorSize.width, 2.5, 0.15]} />
            <meshPhysicalMaterial color="#f8f9fa" roughness={0.3} metalness={0.1} clearcoat={0.3} />
          </mesh>
          
          {/* STOR HYRGRAFIK p√• bakv√§gg */}
          <mesh position={[0, 1.4, -floorSize.length/2 + 0.08]}>
            <planeGeometry args={[floorSize.width * 0.9, 2.0]} />
            <meshPhysicalMaterial 
              color="#10b981"
              roughness={0.1}
              metalness={0.2}
            />
          </mesh>
          
          {/* Stor Monterhyra logotype */}
          <mesh position={[0, 2.0, -floorSize.length/2 + 0.085]}>
            <planeGeometry args={[2.0, 0.4]} />
            <meshPhysicalMaterial 
              color="#ffffff"
            />
          </mesh>
          
          {/* Premium dekor element */}
          <mesh position={[0, 0.8, -floorSize.length/2 + 0.085]}>
            <planeGeometry args={[1.5, 0.8]} />
            <meshPhysicalMaterial 
              color="#34d399"
              roughness={0.0}
              metalness={0.4}
            />
          </mesh>
          
          <mesh position={[0, 2.52, -floorSize.length/2]}>
            <boxGeometry args={[floorSize.width, 0.04, 0.16]} />
            <meshPhysicalMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} />
          </mesh>
          
          {/* V√§nster sidov√§gg */}
          <mesh position={[-floorSize.width/2, 1.25, 0]} castShadow receiveShadow>
            <boxGeometry args={[0.15, 2.5, floorSize.length]} />
            <meshPhysicalMaterial color="#f8f9fa" roughness={0.3} metalness={0.1} clearcoat={0.3} />
          </mesh>
          
          {/* HYRGRAFIK p√• v√§nster sidov√§gg */}
          <mesh position={[-floorSize.width/2 + 0.08, 1.3, 0]} rotation={[0, Math.PI/2, 0]}>
            <planeGeometry args={[floorSize.length * 0.8, 1.6]} />
            <meshPhysicalMaterial 
              color="#10b981"
              roughness={0.1}
              metalness={0.2}
            />
          </mesh>
          
          <mesh position={[-floorSize.width/2, 2.52, 0]}>
            <boxGeometry args={[0.16, 0.04, floorSize.length]} />
            <meshPhysicalMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} />
          </mesh>
          
          {/* H√∂ger sidov√§gg */}
          <mesh position={[floorSize.width/2, 1.25, 0]} castShadow receiveShadow>
            <boxGeometry args={[0.15, 2.5, floorSize.length]} />
            <meshPhysicalMaterial color="#f8f9fa" roughness={0.3} metalness={0.1} clearcoat={0.3} />
          </mesh>
          
          {/* HYRGRAFIK p√• h√∂ger sidov√§gg */}
          <mesh position={[floorSize.width/2 - 0.08, 1.3, 0]} rotation={[0, -Math.PI/2, 0]}>
            <planeGeometry args={[floorSize.length * 0.8, 1.6]} />
            <meshPhysicalMaterial 
              color="#10b981"
              roughness={0.1}
              metalness={0.2}
            />
          </mesh>
          
          <mesh position={[floorSize.width/2, 2.52, 0]}>
            <boxGeometry args={[0.16, 0.04, floorSize.length]} />
            <meshPhysicalMaterial color="#c0c0c0" metalness={0.9} roughness={0.1} />
          </mesh>
        </group>
      )}

      {/* PREMIUM DISKAR med realistiska material */}
      {booth.counters?.map((counter, index: number) => {
        const COUNTER_MATERIALS: Record<string, { base: string; metal: string }> = {
          '1m': { base: '#1a2332', metal: '#4a5568' },
          '1-5m': { base: '#2d3748', metal: '#718096' }, 
          '2m': { base: '#1a2332', metal: '#4a5568' },
          '2-5m': { base: '#2d3748', metal: '#718096' },
          '3m': { base: '#1a2332', metal: '#4a5568' }
        };
        
        const COUNTER_DIMENSIONS: Record<string, { width: number; length: number; height: number }> = {
          '1m': { width: 1, length: 0.6, height: 1 },
          '1-5m': { width: 1.5, length: 0.6, height: 1 },
          '2m': { width: 2, length: 0.6, height: 1 },
          '2-5m': { width: 2.5, length: 0.6, height: 1 },
          '3m': { width: 3, length: 0.6, height: 1 }
        };

        const dimensions = COUNTER_DIMENSIONS[counter.type] || { width: 1, length: 0.6, height: 1 };
        const materials = COUNTER_MATERIALS[counter.type] || { base: '#1a2332', metal: '#4a5568' };
        
        return (
          <group 
            key={index}
            position={[counter.position.x, 0, counter.position.z]}
            rotation={[0, (counter.rotation || 0) * Math.PI / 180, 0]}
          >
            {/* Disk bas */}
            <mesh position={[0, dimensions.height/2, 0]} castShadow receiveShadow>
              <boxGeometry args={[dimensions.width, dimensions.height, dimensions.length]} />
              <meshPhysicalMaterial 
                color={materials.base} 
                roughness={0.2}
                metalness={0.8}
                clearcoat={0.5}
              />
            </mesh>
            {/* Disk topp - Glossy finish */}
            <mesh position={[0, dimensions.height + 0.02, 0]}>
              <boxGeometry args={[dimensions.width, 0.04, dimensions.length]} />
              <meshPhysicalMaterial 
                color={materials.metal} 
                roughness={0.05}
                metalness={0.95}
                clearcoat={1.0}
              />
            </mesh>
          </group>
        );
      })}

      {/* REALISTISKA M√ñBLER med olika typer */}
      {booth.furniture?.map((furniture, index: number) => {
        const furnitureConfig: Record<string, { 
          color: string; 
          size: number[]; 
          metalness: number; 
          roughness: number; 
        }> = {
          'fatolj': { 
            color: '#8B4513', 
            size: [0.8, 0.7, 0.8],
            metalness: 0.1,
            roughness: 0.8
          },
          'soffa': { 
            color: '#654321', 
            size: [1.6, 0.7, 0.8],
            metalness: 0.1,
            roughness: 0.8
          },
          'barbord': { 
            color: '#2c3e50', 
            size: [0.6, 1.1, 0.6],
            metalness: 0.7,
            roughness: 0.2
          },
          'barstol': { 
            color: '#34495e', 
            size: [0.4, 1.0, 0.4],
            metalness: 0.6,
            roughness: 0.3
          },
          'sidobord': { 
            color: '#8B4513', 
            size: [0.5, 0.5, 0.5],
            metalness: 0.2,
            roughness: 0.7
          },
          'pall': { 
            color: '#A0522D', 
            size: [0.4, 0.45, 0.4],
            metalness: 0.1,
            roughness: 0.9
          }
        };

        const config = furnitureConfig[furniture.type] || furnitureConfig['fatolj'];
        
        return (
          <mesh 
            key={index}
            position={[furniture.position.x, config.size[1]/2, furniture.position.z]}
            rotation={[0, (furniture.rotation || 0) * Math.PI / 180, 0]}
            castShadow
            receiveShadow
          >
            <boxGeometry args={config.size as [number, number, number]} />
            <meshPhysicalMaterial 
              color={config.color}
              roughness={config.roughness}
              metalness={config.metalness}
            />
          </mesh>
        );
      })}

      {/* REALISTISKA V√ÑXTER med olika typer */}
      {booth.plants?.map((plant, index: number) => {
        const plantConfig: Record<string, { 
          pot: string; 
          leaves: string; 
          size: number; 
          height: number; 
        }> = {
          'Monstera': { 
            pot: '#8B4513', 
            leaves: '#228B22',
            size: 0.5,
            height: 1.2
          },
          'Ficus': { 
            pot: '#654321', 
            leaves: '#2F4F2F',
            size: 0.4,
            height: 1.0
          },
          'Olivtr√§d': { 
            pot: '#8B7355', 
            leaves: '#556B2F',
            size: 0.3,
            height: 0.8
          },
          'kaktus': { 
            pot: '#CD853F', 
            leaves: '#228B22',
            size: 0.15,
            height: 0.4
          }
        };

        const config = plantConfig[plant.type] || plantConfig['Monstera'];
        
        return (
          <group key={index} position={[plant.position.x, 0, plant.position.z]}>
            {/* Lyxkruka med textur */}
            <mesh position={[0, 0.15, 0]} castShadow receiveShadow>
              <cylinderGeometry args={[0.15, 0.2, 0.3, 12]} />
              <meshPhysicalMaterial 
                color={config.pot}
                roughness={0.6}
                metalness={0.1}
                normalScale={[0.3, 0.3]}
              />
            </mesh>
            
            {/* Realistisk v√§xt med flera former */}
            <group position={[0, 0.4, 0]}>
              {/* Huvudstam/l√∂v */}
              <mesh position={[0, config.height/2, 0]} castShadow>
                <sphereGeometry args={[config.size, 12, 8]} />
                <meshLambertMaterial color={config.leaves} />
              </mesh>
              
              {/* Extra l√∂v f√∂r st√∂rre v√§xter */}
              {config.size > 0.3 && (
                <>
                  <mesh position={[-0.2, config.height * 0.7, 0.1]} castShadow>
                    <sphereGeometry args={[config.size * 0.6, 8, 6]} />
                    <meshLambertMaterial color={config.leaves} />
                  </mesh>
                  <mesh position={[0.15, config.height * 0.8, -0.15]} castShadow>
                    <sphereGeometry args={[config.size * 0.5, 8, 6]} />
                    <meshLambertMaterial color={config.leaves} />
                  </mesh>
                </>
              )}
            </group>
          </group>
        );
      })}
    </group>
  );
};

// Helper component: exposes a captureViews() method via ref that renders three camera positions
// into an offscreen render target and returns data URLs for each view.
const CaptureHelper = React.forwardRef<any, {onHideGrid?: (hide: boolean) => void}>((props, ref) => {
  // lazy require inside component to avoid SSR issues
  const { gl, scene, camera } = useThree();
  const originalCamera = camera as any;

  useImperativeHandle(ref, () => ({
    captureViews: (width = 800, height = 533) => { // Minskad fr√•n 1200x800 till 800x533 (33% mindre)
      // D√∂lja grid tempor√§rt
      if (props.onHideGrid) props.onHideGrid(true);
      
      // create a temporary render target with antialiasing
      const target = new THREE.WebGLRenderTarget(width, height, {
        samples: 2, // Minskad antialiasing fr√•n 4 till 2
        colorSpace: THREE.SRGBColorSpace
      });
      const prevRenderTarget = gl.getRenderTarget();
      const prevAspect = originalCamera.aspect;
      const prevBackground = scene.background;
      const results: string[] = [];

      // Tempor√§rt s√§tt en ren bakgrund f√∂r PDF-bilderna
      scene.background = new THREE.Color(0xf8f9fa);

      // F√∂rb√§ttrade kamerapositioner f√∂r b√§ttre vyer av montern
      const snapshots = [
        { pos: [0, 8, 0], lookAt: [0, 0, 0], name: 'ovanifr√•n' }, // direkt ovanifr√•n
        { pos: [-4, 3, 4], lookAt: [0, 1, 0], name: 'perspektiv' }, // b√§ttre vinkel fr√•n sidan
        { pos: [6, 4, 6], lookAt: [0, 1, 0], name: 'helvy' } // fr√•n andra sidan
      ];

      const tmpCam = originalCamera.clone();
      tmpCam.aspect = width / height;

      for (const s of snapshots) {
        tmpCam.position.set(...s.pos as [number, number, number]);
        tmpCam.lookAt(new THREE.Vector3(...(s.lookAt as [number, number, number])));
        tmpCam.updateProjectionMatrix();
        
        gl.setSize(width, height);
        gl.setRenderTarget(target);
        gl.setClearColor(0xf8f9fa, 1); // ljus gr√• bakgrund
        gl.clear();
        gl.render(scene, tmpCam);
        
        const pixels = new Uint8Array(width * height * 4);
        gl.readRenderTargetPixels(target, 0, 0, width, height, pixels);
        
        // create canvas and copy pixels
        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d')!;
        const imageData = ctx.createImageData(width, height);
        imageData.data.set(pixels);
        ctx.putImageData(imageData, 0, 0);
        
        // flip Y because readRenderTargetPixels gives bottom-up
        const flippedCanvas = document.createElement('canvas');
        flippedCanvas.width = width;
        flippedCanvas.height = height;
        const flippedCtx = flippedCanvas.getContext('2d')!;
        flippedCtx.scale(1, -1);
        flippedCtx.drawImage(canvas, 0, -height);
        
        // Anv√§nd JPEG med 70% kvalitet ist√§llet f√∂r PNG f√∂r mycket mindre filstorlek
        results.push(flippedCanvas.toDataURL('image/jpeg', 0.7));
      }

      // restore original settings
      gl.setRenderTarget(prevRenderTarget);
      originalCamera.aspect = prevAspect;
      originalCamera.updateProjectionMatrix();
      scene.background = prevBackground;
      target.dispose();
      
      // Visa grid igen
      if (props.onHideGrid) props.onHideGrid(false);

      return results;
    }
  }));

  return null;
});


const FURNITURE_TYPES = [
  { label: 'Barbord', width: 0.6, depth: 0.6, height: 1.1, color: '#FFFFFF', type: 'table', emoji: 'üç∏', image: '/Models/furniture/barbord.svg' },
  { label: 'Barstol', width: 0.4, depth: 0.4, height: 1.0, color: '#FFFFFF', type: 'chair', emoji: 'ü™ë', image: '/Models/furniture/barstol.svg' },
  { label: 'Pall', width: 0.35, depth: 0.35, height: 0.45, color: '#4169E1', type: 'stool', emoji: 'üõãÔ∏è', image: '/Models/furniture/pall.svg' },
  { label: 'Soffa 2-sits', width: 1.4, depth: 0.8, height: 0.85, color: '#2F4F4F', type: 'sofa', emoji: 'üõãÔ∏è', image: '/Models/furniture/soffa.svg' },
  { label: 'Soffa 3-sits', width: 1.8, depth: 0.8, height: 0.85, color: '#2F4F4F', type: 'sofa', emoji: 'üõãÔ∏è', image: '/Models/furniture/soffa.svg' },
  { label: 'F√•t√∂lj', width: 0.8, depth: 0.8, height: 0.9, color: '#8B4513', type: 'armchair', emoji: 'ü™ë', image: '/Models/furniture/fatolj.svg' },
  { label: 'Sidobord', width: 0.5, depth: 0.5, height: 0.5, color: '#DEB887', type: 'side_table', emoji: 'ü™ë', image: '/Models/furniture/sidobord.svg' },
  { label: 'Podie (Vitlaserad furu)', width: 0.35, depth: 0.2, height: 0.9, color: '#F8F8F0', type: 'podium', emoji: 'üì¶', image: null }
];

const FLOOR_SIZES = [
  { label: '3x1,5', width: 3, depth: 1.5, image: '/Models/floors/3x1-5.svg' },
  { label: '3x2', width: 3, depth: 2, image: '/Models/floors/floor.svg' },
  { label: '3x3', width: 3, depth: 3, image: '/Models/floors/3x3.svg' },
  { label: '4x2', width: 4, depth: 2, image: '/Models/floors/floor.svg' },
  { label: '4x3', width: 4, depth: 3, image: '/Models/floors/floor.svg' },
  { label: '4x4', width: 4, depth: 4, image: '/Models/floors/4x4.svg' },
  { label: '5x2', width: 5, depth: 2, image: '/Models/floors/floor.svg' },
  { label: '5x3', width: 5, depth: 3, image: '/Models/floors/floor.svg' },
  { label: '5x5', width: 5, depth: 5, image: '/Models/floors/floor.svg' },
  { label: '6x3', width: 6, depth: 3, image: '/Models/floors/floor.svg' },
  { label: '6x4', width: 6, depth: 4, image: '/Models/floors/floor.svg' },
  { label: '6x5', width: 6, depth: 5, image: '/Models/floors/floor.svg' },
  { label: '6x6', width: 6, depth: 6, image: '/Models/floors/floor.svg' },
  { label: '7x3', width: 7, depth: 3, image: '/Models/floors/floor.svg' },
  { label: '7x4', width: 7, depth: 4, image: '/Models/floors/floor.svg' },
  { label: '7x7', width: 7, depth: 7, image: '/Models/floors/floor.svg' },
  { label: '8x3', width: 8, depth: 3, image: '/Models/floors/floor.svg' },
  { label: '8x5', width: 8, depth: 5, image: '/Models/floors/floor.svg' },
  { label: '8x6', width: 8, depth: 6, image: '/Models/floors/floor.svg' },
  { label: '10x10', width: 10, depth: 10, image: '/Models/floors/floor.svg' },
  { label: 'Anpassad storlek', width: 0, depth: 0, custom: true, image: null }
];

const CARPET_COLORS = [
  { name: 'Ingen matta', color: null },
  // EXPO f√§rger (180 kr/kvm)
  { name: 'EXPO - R√∂d', color: '#e74c3c' },
  { name: 'EXPO - Bl√•', color: '#3498db' },
  { name: 'EXPO - Gr√∂n', color: '#27ae60' },
  { name: 'EXPO - Gul', color: '#f1c40f' },
  { name: 'EXPO - Orange', color: '#e67e22' },
  { name: 'EXPO - Lila', color: '#9b59b6' },
  { name: 'EXPO - Rosa', color: '#e91e63' },
  { name: 'EXPO - Turkos', color: '#1abc9c' },
  { name: 'EXPO - Lime', color: '#8bc34a' },
  { name: 'EXPO - Magenta', color: '#e91e63' },
  // SALSA f√§rger (240 kr/kvm = 180 + 60)
  { name: 'SALSA - Djup R√∂d', color: '#8b0000' },
  { name: 'SALSA - Marinbl√•', color: '#000080' },
  { name: 'SALSA - Smaragdgr√∂n', color: '#006400' },
  { name: 'SALSA - Burgundy', color: '#800020' },
  { name: 'SALSA - Midnattsbl√•', color: '#191970' },
  { name: 'SALSA - Skogsgr√∂n', color: '#228b22' },
  { name: 'SALSA - K√∂rsb√§rsr√∂d', color: '#de3163' },
  { name: 'SALSA - Safirbl√•', color: '#0f52ba' },
  // Rutm√∂nster sist (255 kr/kvm)
  { name: 'Rutm√∂nster Svart/Vit', color: 'checkerboard-bw' },
  { name: 'Rutm√∂nster R√∂d/Svart', color: 'checkerboard-rb' },
  { name: 'Rutm√∂nster Bl√•/Vit', color: 'checkerboard-bwhite' },
  { name: 'Rutm√∂nster Gul/Svart', color: 'checkerboard-yb' }
];

const WALL_SHAPES = [
  { label: 'Inget valt', value: '', image: null },
  { label: 'Rak', value: 'straight', image: '/Models/walls/straight.svg' },
  { label: 'L-form', value: 'l', image: '/Models/walls/l-shape.svg' },
  { label: 'U-form', value: 'u', image: '/Models/walls/u-shape.svg' }
];

const WALL_HEIGHTS = [
  { label: '2,5 m', value: 2.5, image: null },
  { label: '3 m', value: 3, image: null },
  { label: '3,5 m', value: 3.5, image: null }
];

const GRAPHICS = [
  { label: 'Ej valt', value: 'none', image: null },
  { label: 'Hyr grafik', value: 'hyr', image: null },
  { label: 'Eget tryck (forex)', value: 'forex', image: null },
  { label: 'Eget tryck (vepa)', value: 'vepa', image: null }
];




function Floor({ 
  width, 
  depth, 
  onFloorClick 
}: { 
  width: number; 
  depth: number; 
  onFloorClick?: (x: number, z: number) => void;
}) {
  const tiles = [];
  const tileSize = 1; // basstorlek 1 meter

  // R√§kna antal plattor i varje riktning och hantera partialplattor i kanten
  const xCount = Math.ceil(width / tileSize);
  const zCount = Math.ceil(depth / tileSize);
  const remWidth = width - Math.floor(width);
  const remDepth = depth - Math.floor(depth);

  // Kumulativ pos f√∂r att centrera exakt totala bredden/depth
  let cumX = 0;
  for (let ix = 0; ix < xCount; ix++) {
    const thisTileWidth = (ix === xCount - 1 && remWidth > 0) ? remWidth : tileSize;
    let cumZ = 0;
    for (let iz = 0; iz < zCount; iz++) {
      const thisTileDepth = (iz === zCount - 1 && remDepth > 0) ? remDepth : tileSize;

      // Positionera plattan relativt till total width/depth s√• allt centrerar korrekt
      const posX = -width / 2 + cumX + thisTileWidth / 2;
      const posZ = -depth / 2 + cumZ + thisTileDepth / 2;

      tiles.push(
        <mesh
          key={`${ix}-${iz}`}
          position={[posX, 0, posZ]}
          receiveShadow
          onClick={(e) => {
            if (onFloorClick) {
              e.stopPropagation();
              onFloorClick(posX, posZ);
            }
          }}
        >
          <boxGeometry args={[thisTileWidth, 0.12, thisTileDepth]} />
          <meshPhysicalMaterial color={"#fff"} roughness={0.9} metalness={0.1} />
          <Edges color="#ccc" />
        </mesh>
      );

      cumZ += thisTileDepth;
    }
    cumX += thisTileWidth;
  }
  
  return <>{tiles}</>;
}

function Carpet({ width, depth, color }: { width: number, depth: number, color: string }) {
  // Mattan ligger precis ovanp√• golvet, centrerad
  
  // Hantera rutm√∂nster
  if (color.startsWith('checkerboard-')) {
    let color1, color2;
    switch (color) {
      case 'checkerboard-bw':
        color1 = '#000000'; // Svart
        color2 = '#ffffff'; // Vit
        break;
      case 'checkerboard-rb':
        color1 = '#ff0000'; // R√∂d
        color2 = '#000000'; // Svart
        break;
      case 'checkerboard-bwhite':
        color1 = '#0000ff'; // Bl√•
        color2 = '#ffffff'; // Vit
        break;
      case 'checkerboard-yb':
        color1 = '#ffff00'; // Gul
        color2 = '#000000'; // Svart
        break;
      default:
        color1 = '#000000';
        color2 = '#ffffff';
    }

    // Skapa rutm√∂nster-textur med 0.5m rutor och centrera/aligna mot halvmeter-grid
    const checkerTexture = (() => {
      const canvas = document.createElement('canvas');
      const size = 256; // Bra uppl√∂sning
      canvas.width = size;
      canvas.height = size;
      const ctx = canvas.getContext('2d')!;

      // Vi ritar en enkel 2x2-enhet som representerar 1 ruta p√• 0.5m
      const squareSizePx = size / 2;
      for (let x = 0; x < 2; x++) {
        for (let y = 0; y < 2; y++) {
          ctx.fillStyle = (x + y) % 2 === 0 ? color1 : color2;
          ctx.fillRect(x * squareSizePx, y * squareSizePx, squareSizePx, squareSizePx);
        }
      }

      const texture = new THREE.CanvasTexture(canvas);
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.RepeatWrapping;

      // Ruta i verkligheten √§r 0.5m
      const squareSizeMeters = 0.5;
      // Antal rutor i varje riktning
      const repeatX = width / squareSizeMeters;
      const repeatZ = depth / squareSizeMeters;

      texture.repeat.set(repeatX, repeatZ);

      // Offset s√• m√∂nstret centrerar mot mitten och alignar med 0.5m grid
      // Ber√§kna hur mycket av en ruta som √§r √∂verh√§ng (remainder)
      const remX = (repeatX - Math.floor(repeatX)) / 2;
      const remZ = (repeatZ - Math.floor(repeatZ)) / 2;
      texture.offset.set(remX, remZ);

      return texture;
    })();

    return (
      <mesh position={[0, 0.065, 0]}>
        <boxGeometry args={[width, 0.01, depth]} />
        <meshStandardMaterial map={checkerTexture} />
      </mesh>
    );
  }

  // Vanlig enf√§rgad matta
  return (
    <mesh position={[0, 0.065, 0]}>
      <boxGeometry args={[width, 0.01, depth]} />
      <meshStandardMaterial color={color} />
    </mesh>
  );
}

// VEPA Wall component - renderar design fr√•n VepaPDFGenerator
// Hook f√∂r att skapa VEPA texture fr√•n design
function useVepaTexture(design: any) {
  const [texture, setTexture] = useState<THREE.CanvasTexture | null>(null);

  useEffect(() => {
    if (!design) return;

    const canvas = document.createElement('canvas');
    const mmToPixels = 2;
    canvas.width = design.widthMM * mmToPixels;
    canvas.height = design.heightMM * mmToPixels;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) return;

    // Rita bakgrundsf√§rg
    ctx.fillStyle = design.backgroundColorRGB || '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    const updateTexture = () => {
      const tex = new THREE.CanvasTexture(canvas);
      tex.wrapS = THREE.ClampToEdgeWrapping;
      tex.wrapT = THREE.ClampToEdgeWrapping;
      tex.flipY = true;
      tex.needsUpdate = true;
      setTexture(tex);
    };

    // Rita bakgrundsbild om den finns
    if (design.backgroundImage) {
      const bgImg = new Image();
      bgImg.onload = () => {
        ctx.drawImage(bgImg, 0, 0, canvas.width, canvas.height);
        if (design.logo) {
          const logoImg = new Image();
          logoImg.onload = () => {
            ctx.drawImage(
              logoImg,
              design.logo.x * mmToPixels,
              design.logo.y * mmToPixels,
              design.logo.width * mmToPixels,
              design.logo.height * mmToPixels
            );
            updateTexture();
          };
          logoImg.onerror = updateTexture;
          logoImg.src = design.logo.imageData;
        } else {
          updateTexture();
        }
      };
      bgImg.onerror = () => {
        if (design.logo) {
          const logoImg = new Image();
          logoImg.onload = () => {
            ctx.drawImage(
              logoImg,
              design.logo.x * mmToPixels,
              design.logo.y * mmToPixels,
              design.logo.width * mmToPixels,
              design.logo.height * mmToPixels
            );
            updateTexture();
          };
          logoImg.onerror = updateTexture;
          logoImg.src = design.logo.imageData;
        } else {
          updateTexture();
        }
      };
      bgImg.src = design.backgroundImage;
    } else if (design.logo) {
      const logoImg = new Image();
      logoImg.onload = () => {
        ctx.drawImage(
          logoImg,
          design.logo.x * mmToPixels,
          design.logo.y * mmToPixels,
          design.logo.width * mmToPixels,
          design.logo.height * mmToPixels
        );
        updateTexture();
      };
      logoImg.onerror = updateTexture;
      logoImg.src = design.logo.imageData;
    } else {
      updateTexture();
    }
  }, [design]);

  return texture;
}

function VepaWallOverlay({ design, wallLength, wallHeight, position, rotation }: {
  design: any,
  wallLength: number,
  wallHeight: number,
  position: [number, number, number],
  rotation?: [number, number, number]
}) {
  console.log('üé® VepaWallOverlay called with design:', design);
  const [texture, setTexture] = useState<THREE.CanvasTexture | null>(null);
  
  useEffect(() => {
    console.log('üîß VepaWallOverlay useEffect running');
    
    // FAST STORLEK 512x512 som vi vet fungerar
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 512;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      console.error('‚ùå Could not get canvas context');
      return;
    }
    
    console.log('‚úÖ Canvas created: 512x512');
    
    // Rita bakgrundsf√§rg
    ctx.fillStyle = design.backgroundColorRGB || '#FF00FF';
    ctx.fillRect(0, 0, 512, 512);
    console.log('‚úÖ Background color drawn:', design.backgroundColorRGB);
    
    const updateTexture = () => {
      const tex = new THREE.CanvasTexture(canvas);
      tex.wrapS = THREE.ClampToEdgeWrapping;
      tex.wrapT = THREE.ClampToEdgeWrapping;
      tex.flipY = true;
      tex.needsUpdate = true;
      setTexture(tex);
      console.log('‚úÖ Texture updated!');
    };
    
    // Rita bakgrundsbild om den finns
    if (design.backgroundImage) {
      const bgImg = new Image();
      bgImg.onload = () => {
        ctx.drawImage(bgImg, 0, 0, 512, 512);
        console.log('‚úÖ Background image drawn');
        if (design.logo) {
          loadLogo();
        } else {
          updateTexture();
        }
      };
      bgImg.onerror = () => {
        console.error('‚ùå Failed to load background image');
        if (design.logo) {
          loadLogo();
        } else {
          updateTexture();
        }
      };
      bgImg.src = design.backgroundImage;
    } else if (design.logo) {
      loadLogo();
    } else {
      updateTexture();
    }
    
    function loadLogo() {
      if (!design.logo) return;
      console.log('üì∑ Loading logo...');
      const logoImg = new Image();
      logoImg.onload = () => {
        const scaleX = 512 / design.widthMM;
        const scaleY = 512 / design.heightMM;
        ctx.drawImage(
          logoImg,
          design.logo.x * scaleX,
          design.logo.y * scaleY,
          design.logo.width * scaleX,
          design.logo.height * scaleY
        );
        console.log('‚úÖ Logo drawn at', design.logo.x * scaleX, design.logo.y * scaleY);
        updateTexture();
      };
      logoImg.onerror = () => {
        console.error('‚ùå Failed to load logo');
        updateTexture();
      };
      logoImg.src = design.logo.imageData;
    }
  }, [design]);
  
  console.log('üñºÔ∏è VepaWallOverlay render, texture:', texture ? 'EXISTS' : 'NULL');
  console.log('üìè Wall dimensions:', wallLength, 'x', wallHeight);
  console.log('üìç Position:', position);
  
  if (!texture) return null;
  
  return (
    <mesh position={position} rotation={rotation || [0, 0, 0]}>
      <planeGeometry args={[wallLength, wallHeight]} />
      <meshBasicMaterial 
        map={texture} 
        side={THREE.DoubleSide}
      />
    </mesh>
  );
}

// Forex Wall Overlay Component (samma som VEPA men f√∂r Forex)
function ForexWallOverlay({ design, wallLength, wallHeight, position, rotation }: {
  design: any,
  wallLength: number,
  wallHeight: number,
  position: [number, number, number],
  rotation?: [number, number, number]
}) {
  console.log('üñºÔ∏è ForexWallOverlay called with design:', design);
  const [texture, setTexture] = useState<THREE.CanvasTexture | null>(null);
  
  useEffect(() => {
    console.log('üîß ForexWallOverlay useEffect running');
    
    // FAST STORLEK 512x512 som vi vet fungerar
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 512;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      console.error('‚ùå Could not get canvas context');
      return;
    }
    
    console.log('‚úÖ Canvas created: 512x512');
    
    // Rita bakgrundsf√§rg
    ctx.fillStyle = design.backgroundColorRGB || '#FF00FF';
    ctx.fillRect(0, 0, 512, 512);
    console.log('‚úÖ Background color drawn:', design.backgroundColorRGB);
    
    const updateTexture = () => {
      const tex = new THREE.CanvasTexture(canvas);
      tex.wrapS = THREE.ClampToEdgeWrapping;
      tex.wrapT = THREE.ClampToEdgeWrapping;
      tex.flipY = true;
      tex.needsUpdate = true;
      setTexture(tex);
      console.log('‚úÖ Texture updated!');
    };
    
    // Rita bakgrundsbild om den finns
    if (design.backgroundImage) {
      const bgImg = new Image();
      bgImg.onload = () => {
        ctx.drawImage(bgImg, 0, 0, 512, 512);
        console.log('‚úÖ Background image drawn');
        if (design.logo) {
          loadLogo();
        } else {
          updateTexture();
        }
      };
      bgImg.onerror = () => {
        console.error('‚ùå Failed to load background image');
        if (design.logo) {
          loadLogo();
        } else {
          updateTexture();
        }
      };
      bgImg.src = design.backgroundImage;
    } else if (design.logo) {
      loadLogo();
    } else {
      updateTexture();
    }
    
    function loadLogo() {
      if (!design.logo) return;
      console.log('üì∑ Loading logo...');
      const logoImg = new Image();
      logoImg.onload = () => {
        const scaleX = 512 / design.widthMM;
        const scaleY = 512 / design.heightMM;
        ctx.drawImage(
          logoImg,
          design.logo.x * scaleX,
          design.logo.y * scaleY,
          design.logo.width * scaleX,
          design.logo.height * scaleY
        );
        console.log('‚úÖ Logo drawn at', design.logo.x * scaleX, design.logo.y * scaleY);
        updateTexture();
      };
      logoImg.onerror = () => {
        console.error('‚ùå Failed to load logo');
        updateTexture();
      };
      logoImg.src = design.logo.imageData;
    }
  }, [design]);
  
  console.log('üñºÔ∏è ForexWallOverlay render, texture:', texture ? 'EXISTS' : 'NULL');
  console.log('üìè Wall dimensions:', wallLength, 'x', wallHeight);
  console.log('üìç Position:', position);
  
  if (!texture) return null;
  
  return (
    <mesh position={position} rotation={rotation || [0, 0, 0]}>
      <planeGeometry args={[wallLength, wallHeight]} />
      <meshBasicMaterial 
        map={texture} 
        side={THREE.DoubleSide}
      />
    </mesh>
  );
}

// Storage Wall Overlay Component - h√∂guppl√∂st canvas-baserad textur f√∂r f√∂rr√•d
function StorageWallOverlay({ imageUrl, wallWidth, wallHeight, position, rotation }: {
  imageUrl: string,
  wallWidth: number,
  wallHeight: number,
  position: [number, number, number],
  rotation?: [number, number, number]
}) {
  const [texture, setTexture] = useState<THREE.CanvasTexture | null>(null);
  
  useEffect(() => {
    // FAST STORLEK 512x512 f√∂r optimal prestanda och kvalitet
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 512;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      console.error('‚ùå StorageWallOverlay: Could not get canvas context');
      return;
    }
    
    const updateTexture = () => {
      const tex = new THREE.CanvasTexture(canvas);
      tex.wrapS = THREE.ClampToEdgeWrapping;
      tex.wrapT = THREE.ClampToEdgeWrapping;
      tex.flipY = true;
      tex.needsUpdate = true;
      setTexture(tex);
    };
    
    // Ladda och rita bilden
    const img = new Image();
    img.onload = () => {
      ctx.drawImage(img, 0, 0, 512, 512);
      updateTexture();
    };
    img.onerror = () => {
      console.error('‚ùå StorageWallOverlay: Failed to load image');
      // Rita en fallback-f√§rg
      ctx.fillStyle = '#CCCCCC';
      ctx.fillRect(0, 0, 512, 512);
      updateTexture();
    };
    img.src = imageUrl;
  }, [imageUrl]);
  
  if (!texture) return null;
  
  return (
    <mesh position={position} rotation={rotation || [0, 0, 0]}>
      <planeGeometry args={[wallWidth, wallHeight]} />
      <meshBasicMaterial 
        map={texture}
        transparent={true}
        opacity={1}
        side={THREE.DoubleSide}
      />
    </mesh>
  );
}

// Storage Wall Design Overlay - f√∂r VEPA/Forex designs fr√•n StoragePDFGenerator
function StorageWallDesignOverlay({ design, wallWidth, wallHeight, position, rotation }: {
  design: StorageWallDesign,
  wallWidth: number,
  wallHeight: number,
  position: [number, number, number],
  rotation?: [number, number, number]
}) {
  const [texture, setTexture] = useState<THREE.CanvasTexture | null>(null);
  
  useEffect(() => {
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 512;
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      console.error('‚ùå StorageWallDesignOverlay: Could not get canvas context');
      return;
    }
    
    // Rita bakgrundsf√§rg
    ctx.fillStyle = design.backgroundColorRGB || '#FFFFFF';
    ctx.fillRect(0, 0, 512, 512);
    
    const updateTexture = () => {
      const tex = new THREE.CanvasTexture(canvas);
      tex.wrapS = THREE.ClampToEdgeWrapping;
      tex.wrapT = THREE.ClampToEdgeWrapping;
      tex.flipY = true;
      tex.needsUpdate = true;
      setTexture(tex);
    };
    
    // Rita bakgrundsbild om den finns
    if (design.backgroundImage) {
      const bgImg = new Image();
      bgImg.onload = () => {
        ctx.drawImage(bgImg, 0, 0, 512, 512);
        if (design.logo) {
          loadLogo();
        } else {
          updateTexture();
        }
      };
      bgImg.onerror = () => {
        console.error('‚ùå Failed to load background image for storage design');
        if (design.logo) {
          loadLogo();
        } else {
          updateTexture();
        }
      };
      bgImg.src = design.backgroundImage;
    } else if (design.logo) {
      loadLogo();
    } else {
      updateTexture();
    }
    
    function loadLogo() {
      if (!design.logo) return;
      const logoImg = new Image();
      logoImg.onload = () => {
        const scaleX = 512 / design.widthMM;
        const scaleY = 512 / design.heightMM;
        ctx.drawImage(
          logoImg,
          design.logo!.x * scaleX,
          design.logo!.y * scaleY,
          design.logo!.width * scaleX,
          design.logo!.height * scaleY
        );
        updateTexture();
      };
      logoImg.onerror = () => {
        console.error('‚ùå Failed to load logo for storage design');
        updateTexture();
      };
      logoImg.src = design.logo.imageData;
    }
  }, [design]);
  
  if (!texture) return null;
  
  return (
    <mesh position={position} rotation={rotation || [0, 0, 0]}>
      <planeGeometry args={[wallWidth, wallHeight]} />
      <meshBasicMaterial 
        map={texture}
        transparent={true}
        opacity={1}
        side={THREE.DoubleSide}
      />
    </mesh>
  );
}

function ImageOverlay({ imageUrl, wallLength, wallHeight, position, rotation }: { 
  imageUrl: string, 
  wallLength: number, 
  wallHeight: number,
  position: [number, number, number],
  rotation?: [number, number, number]
}) {
  const texture = new THREE.TextureLoader().load(imageUrl);
  texture.wrapS = THREE.ClampToEdgeWrapping;
  texture.wrapT = THREE.ClampToEdgeWrapping;
  texture.flipY = true; // Flippa bilden r√§tt v√§g upp
  
  return (
    <mesh position={position} rotation={rotation || [0, 0, 0]}>
      <planeGeometry args={[wallLength, wallHeight]} />
      <meshStandardMaterial map={texture} side={THREE.DoubleSide} />
    </mesh>
  );
}

function ForexImageOverlay({ imageUrl, wallLength, wallHeight, position, rotation }: { 
  imageUrl: string, 
  wallLength: number, 
  wallHeight: number,
  position: [number, number, number],
  rotation?: [number, number, number]
}) {
  const texture = new THREE.TextureLoader().load(imageUrl);
  texture.wrapS = THREE.ClampToEdgeWrapping;
  texture.wrapT = THREE.ClampToEdgeWrapping;
  texture.flipY = true;
  
  const lists = [];
  const numLists = Math.floor(wallLength); // Antal lister (en mindre √§n antal meter)
  
  // Skapa silvriga lister varje meter
  for (let i = 1; i < numLists; i++) {
    const listPos = i - wallLength/2;
    
    // Justera listernas position baserat p√• v√§ggtyp
    let listPosition: [number, number, number];
    let listGeometry: [number, number, number];
    
    if (rotation && Math.abs(rotation[1]) > 0) {
      // Sidov√§gg - listerna ska vara i z-led (djup av montern)
      listPosition = [0, 0, listPos];
      listGeometry = [0.008, wallHeight, 0.02]; // Tunnare i x-led
    } else {
      // Bakv√§gg - listerna ska vara i x-led (bredd av montern)
      listPosition = [listPos, 0, 0.005];
      listGeometry = [0.02, wallHeight, 0.008]; // Tunnare i z-led
    }
    
    // Anv√§nd boxGeometry ist√§llet f√∂r planeGeometry f√∂r b√§ttre synlighet
    lists.push(
      <mesh 
        key={`list-${i}`}
        position={listPosition} 
        rotation={[0, 0, 0]}
      >
        <boxGeometry args={listGeometry} />
        <meshStandardMaterial 
          color="#d0d0d0" 
          metalness={0.8} 
          roughness={0.2} 
        />
      </mesh>
    );
  }
  
  return (
    <group position={position}>
      {/* Hela bilden som bakgrund */}
      <mesh rotation={rotation || [0, 0, 0]}>
        <planeGeometry args={[wallLength, wallHeight]} />
        <meshStandardMaterial map={texture} side={THREE.DoubleSide} />
      </mesh>
      {/* Silvriga lister ovanp√• */}
      {lists}
    </group>
  );
}

function Plant({ plantConfig, position, rotation }: { 
  plantConfig: any, 
  position: [number, number, number],
  rotation: number
}) {
  const potHeight = 0.3;
  const potRadius = plantConfig.width / 2 - 0.05;
  // Small image-based renderer for photographic plants (cutout plane)
  function PlantImage({ url, w, h }: { url: string, w: number, h: number }) {
    // useTexture handles caching
    // @ts-ignore
    const tex: any = useTexture(url);
    if (tex) {
      tex.flipY = false;
      // set encoding in a type-safe-avoiding way
      (tex as any).encoding = (THREE as any).sRGBEncoding || 3000;
    }
    return (
      <group>
        {/* Front image */}
        <mesh position={[0, h/2 + 0.02, 0]} renderOrder={1}>
          <planeGeometry args={[w, h]} />
          <meshStandardMaterial map={tex} transparent={true} alphaTest={0.4} side={THREE.DoubleSide} depthWrite={false} />
        </mesh>
        {/* Backface subtle darkening to give volume */}
        <mesh position={[0, h/2 + 0.02, -0.005]} rotation={[0, Math.PI, 0]}>
          <planeGeometry args={[w*0.98, h*0.98]} />
          <meshStandardMaterial color="#0b3a0b" opacity={0.85} transparent={true} side={THREE.DoubleSide} depthWrite={false} />
        </mesh>
      </group>
    );
  }
      {/* SUPERREALISTISKA V√ÑXTER */}
      {/* If we have a photographic asset for this label, prefer that for extra realism. Place images in public/models/plants/<name>.png */}
      {(() => {
        const lbl = (plantConfig.label || '').toLowerCase();
        const mapping: Record<string,string> = {
          'draktr√§d': '/models/plants/dracaena.png',
          'dracaena': '/models/plants/dracaena.png',
          'ficus elastica': '/models/plants/ficus_elastica.png'
        };
        for (const key of Object.keys(mapping)) {
          if (lbl.includes(key)) {
            // scale image to approximate plantConfig dimensions
            const w = Math.max(plantConfig.width * 1.0, 0.4);
            const h = Math.max(plantConfig.height * 1.0, 0.9);
            return <PlantImage url={mapping[key]} w={w} h={h} />;
          }
        }
        return null;
      })()}
  
  return (
    <group position={position} rotation={[0, rotation * Math.PI / 180, 0]}>
      {/* Kruka */}
      <mesh position={[0, potHeight/2, 0]}>
        <cylinderGeometry args={[potRadius, potRadius * 0.8, potHeight, 12]} />
        <meshStandardMaterial color="#8B4513" roughness={0.8} />
      </mesh>
      
      {/* Jord */}
      <mesh position={[0, potHeight - 0.02, 0]}>
        <cylinderGeometry args={[potRadius * 0.95, potRadius * 0.95, 0.04, 12]} />
        <meshStandardMaterial color="#654321" roughness={1.0} />
      </mesh>
      
      {/* V√§xtstam/bas */}
      {plantConfig.type === 'tree' && (
        <mesh position={[0, potHeight + plantConfig.height/3, 0]}>
          <cylinderGeometry args={[0.02, 0.04, plantConfig.height/2, 8]} />
          <meshStandardMaterial color={plantConfig.color} roughness={0.9} />
        </mesh>
      )}
      
      {/* V√§xtblad baserat p√• typ */}
      {plantConfig.type === 'tree' && (
        <>
          {/* Krona f√∂r tr√§d */}
          <mesh position={[0, potHeight + plantConfig.height * 0.75, 0]}>
            <sphereGeometry args={[plantConfig.width/3, 12, 8]} />
            <meshStandardMaterial color={plantConfig.leafColor} roughness={0.6} />
          </mesh>
          {/* Extra blad */}
          <mesh position={[plantConfig.width/4, potHeight + plantConfig.height * 0.65, plantConfig.width/4]}>
            <sphereGeometry args={[plantConfig.width/4, 8, 6]} />
            <meshStandardMaterial color={plantConfig.leafColor} roughness={0.6} />
          </mesh>
        </>
      )}
      
      {plantConfig.type === 'broad' && (
        <>
          {/* Stora breda blad f√∂r Monstera */}
          {[0, 1, 2, 3, 4].map(i => (
            <mesh 
              key={i}
              position={[
                Math.cos(i * Math.PI * 2 / 5) * plantConfig.width/3,
                potHeight + 0.2 + i * 0.15,
                Math.sin(i * Math.PI * 2 / 5) * plantConfig.width/3
              ]}
              rotation={[Math.PI/4, i * Math.PI * 2 / 5, 0]}
            >
              <planeGeometry args={[0.3, 0.4]} />
              <meshStandardMaterial color={plantConfig.leafColor} side={THREE.DoubleSide} roughness={0.5} />
            </mesh>
          ))}
        </>
      )}
      
      {plantConfig.type === 'bamboo' && (
        <>
          {/* Bambustavar */}
          {[0, 1, 2].map(i => (
            <mesh 
              key={i}
              position={[
                (i - 1) * 0.1,
                potHeight + plantConfig.height/2,
                (i - 1) * 0.05
              ]}
            >
              <cylinderGeometry args={[0.01, 0.01, plantConfig.height, 6]} />
              <meshStandardMaterial color={plantConfig.color} roughness={0.7} />
            </mesh>
          ))}
          {/* Bambublad */}
          {[0, 1, 2, 3, 4, 5].map(i => (
            <mesh 
              key={i}
              position={[
                Math.cos(i * Math.PI / 3) * 0.15,
                potHeight + plantConfig.height * 0.8 + Math.random() * 0.2,
                Math.sin(i * Math.PI / 3) * 0.15
              ]}
              rotation={[0, i * Math.PI / 3, Math.PI/6]}
            >
              <planeGeometry args={[0.15, 0.08]} />
              <meshStandardMaterial color={plantConfig.leafColor} side={THREE.DoubleSide} roughness={0.6} />
            </mesh>
          ))}
        </>
      )}
      
      {plantConfig.type === 'palm' && (
        <>
          {/* Palmstam */}
          <mesh position={[0, potHeight + plantConfig.height/2, 0]}>
            <cylinderGeometry args={[0.03, 0.05, plantConfig.height, 8]} />
            <meshStandardMaterial color={plantConfig.color} roughness={0.8} />
          </mesh>
          {/* Palmblad */}
          {[0, 1, 2, 3, 4, 5, 6, 7].map(i => (
            <mesh 
              key={i}
              position={[
                Math.cos(i * Math.PI / 4) * 0.3,
                potHeight + plantConfig.height * 0.9,
                Math.sin(i * Math.PI / 4) * 0.3
              ]}
              rotation={[Math.PI/3, i * Math.PI / 4, 0]}
            >
              <planeGeometry args={[0.4, 0.1]} />
              <meshStandardMaterial color={plantConfig.leafColor} side={THREE.DoubleSide} roughness={0.5} />
            </mesh>
          ))}
        </>
      )}
      
      {plantConfig.type === 'spiky' && (
        <>
          {/* Sansevieria blad */}
          {[0, 1, 2, 3, 4].map(i => (
            <mesh 
              key={i}
              position={[
                Math.cos(i * Math.PI * 2 / 5) * 0.08,
                potHeight + plantConfig.height/2,
                Math.sin(i * Math.PI * 2 / 5) * 0.08
              ]}
              rotation={[0, i * Math.PI * 2 / 5, 0]}
            >
              <boxGeometry args={[0.05, plantConfig.height, 0.02]} />
              <meshStandardMaterial color={plantConfig.leafColor} roughness={0.7} />
            </mesh>
          ))}
        </>
      )}
      
      {plantConfig.type === 'cactus' && (
        <>
          {/* Huvudkaktus */}
          <mesh position={[0, potHeight + plantConfig.height/2, 0]}>
            <cylinderGeometry args={[0.06, 0.08, plantConfig.height, 8]} />
            <meshStandardMaterial color={plantConfig.color} roughness={0.9} />
          </mesh>
          {/* Sm√• sidoskott */}
          <mesh position={[0.08, potHeight + plantConfig.height * 0.3, 0]}>
            <cylinderGeometry args={[0.03, 0.04, plantConfig.height * 0.4, 6]} />
            <meshStandardMaterial color={plantConfig.color} roughness={0.9} />
          </mesh>
        </>
      )}
      
      {plantConfig.type === 'herb' && (
        <>
          {/* Sm√• buskiga blad f√∂r rosmarin */}
          {Array.from({length: 20}).map((_, i) => (
            <mesh 
              key={i}
              position={[
                (Math.random() - 0.5) * plantConfig.width,
                potHeight + Math.random() * plantConfig.height,
                (Math.random() - 0.5) * plantConfig.depth
              ]}
              rotation={[Math.random() * Math.PI, Math.random() * Math.PI, Math.random() * Math.PI]}
            >
              <boxGeometry args={[0.02, 0.08, 0.01]} />
              <meshStandardMaterial color={plantConfig.leafColor} roughness={0.8} />
            </mesh>
          ))}
        </>
      )}
      
      {plantConfig.type === 'flower' && (() => {
        // Helper: create a soft petal/bud texture on an HTML canvas
        const createPetalTexture = (base: string, accent?: string) => {
          const canvas = document.createElement('canvas');
          canvas.width = 256;
          canvas.height = 256;
          const ctx = canvas.getContext('2d')!;
          // Background
          const g = ctx.createLinearGradient(0, 0, 0, 256);
          g.addColorStop(0, '#ffffff');
          g.addColorStop(0.25, base);
          g.addColorStop(1, '#222');
          ctx.fillStyle = g;
          ctx.fillRect(0, 0, 256, 256);
          // Petal vein
          ctx.strokeStyle = accent || '#ffffff';
          ctx.lineWidth = 2;
          ctx.beginPath();
          ctx.moveTo(128, 20);
          ctx.quadraticCurveTo(150, 128, 128, 236);
          ctx.stroke();
          // soft vignette
          ctx.globalCompositeOperation = 'overlay';
          const rg = ctx.createRadialGradient(128, 128, 10, 128, 128, 180);
          rg.addColorStop(0, 'rgba(255,255,255,0.15)');
          rg.addColorStop(1, 'rgba(0,0,0,0.25)');
          ctx.fillStyle = rg;
          ctx.fillRect(0, 0, 256, 256);
          const tex = new THREE.CanvasTexture(canvas);
          tex.wrapS = tex.wrapT = THREE.ClampToEdgeWrapping;
          return tex;
        };

        // Lavender (detailed spikes)
        if (plantConfig.label && plantConfig.label.toLowerCase().includes('lavendel')) {
          return (
            <>
              {Array.from({length: 12}).map((_, si) => {
                const angle = si * Math.PI * 2 / 12;
                const stemX = Math.cos(angle) * 0.09;
                const stemZ = Math.sin(angle) * 0.09;
                return (
                  <group key={si} position={[stemX, 0, stemZ]}>
                    {/* stem */}
                    <mesh position={[0, potHeight + plantConfig.height/2, 0]}>
                      <cylinderGeometry args={[0.003, 0.004, plantConfig.height * 0.9, 6]} />
                      <meshStandardMaterial color="#3E5B2F" roughness={0.9} />
                    </mesh>
                    {/* spike of buds: many small spheres on a thin cylinder */}
                    {Array.from({length: 10}).map((_, bi) => (
                      <mesh
                        key={bi}
                        position={[0, potHeight + plantConfig.height * (0.6 + bi * 0.04), 0]}
                        rotation={[Math.random()*0.1, Math.random()*0.2, Math.random()*0.1]}
                        castShadow
                        receiveShadow
                      >
                        <sphereGeometry args={[0.007, 8, 6]} />
                        <meshStandardMaterial
                          color={'#9B59B6'}
                          emissive={'#7B3FA8'}
                          emissiveIntensity={0.05}
                          roughness={0.25}
                          metalness={0}
                        />
                      </mesh>
                    ))}
                  </group>
                );
              })}
            </>
          );
        }

        // Peace Lily (Fredens Lilja)
        if (plantConfig.label && plantConfig.label.toLowerCase().includes('fredens')) {
          const petalTex = createPetalTexture('#FFFFFF', '#F0F0F0');
          return (
            <>
              {/* broad glossy leaves */}
              {Array.from({length: 8}).map((_, i) => (
                <mesh
                  key={i}
                  position={[
                    Math.cos(i * Math.PI / 4) * (plantConfig.width/3 + Math.random()*0.06),
                    potHeight + 0.1 + Math.random()*plantConfig.height*0.3,
                    Math.sin(i * Math.PI / 4) * (plantConfig.width/3 + Math.random()*0.06)
                  ]}
                  rotation={[Math.PI/6 + Math.random()*0.2, i * Math.PI / 4 + Math.random()*0.4, Math.random()*0.2]}
                  receiveShadow
                  castShadow
                >
                  <planeGeometry args={[0.22, 0.36]} />
                  <meshStandardMaterial color={'#1E7F3B'} side={THREE.DoubleSide} roughness={0.25} map={createPetalTexture('#1E7F3B')} transparent opacity={0.95} />
                </mesh>
              ))}

              {/* Spathe / white flower */}
              {Array.from({length: 2}).map((_, fi) => (
                <group key={fi} position={[Math.cos(fi*Math.PI)*0.08, potHeight + plantConfig.height*0.65, Math.sin(fi*Math.PI)*0.08]}>
                  {/* spadix */}
                  <mesh position={[0, 0.06, 0]}>
                    <cylinderGeometry args={[0.006, 0.008, 0.16, 8]} />
                    <meshStandardMaterial color={'#F5E6C8'} roughness={0.6} />
                  </mesh>
                  {/* spathe (the white hood) */}
                  <mesh rotation={[Math.PI/2, 0, Math.PI/8]}>
                    <coneGeometry args={[0.06, 0.12, 24, 1, true]} />
                    <meshStandardMaterial map={petalTex} color={'#FFFBFA'} roughness={0.12} metalness={0.02} side={THREE.DoubleSide} transparent opacity={0.98} />
                  </mesh>
                </group>
              ))}
            </>
          );
        }

        // Generic flowering plant (layered petals)
        const petalTexture = createPetalTexture(plantConfig.leafColor || '#F08080', '#FFF');
        return (
          <>
            {/* short stems */}
            {Array.from({length: 5}).map((_, si) => (
              <mesh key={si} position={[Math.cos(si*Math.PI*2/5)*0.07, potHeight + plantConfig.height*0.35, Math.sin(si*Math.PI*2/5)*0.07]}>
                <cylinderGeometry args={[0.003, 0.004, plantConfig.height*0.6, 6]} />
                <meshStandardMaterial color={'#356B2A'} roughness={0.9} />
              </mesh>
            ))}

            {/* central flower: layered petals made from planes */}
            <group position={[0, potHeight + plantConfig.height*0.85, 0]}>
              {Array.from({length: 10}).map((_, pi) => (
                <mesh
                  key={pi}
                  rotation={[Math.PI/2, (pi/10)*Math.PI*2 + (pi%2?0.08:-0.08), 0]}
                  position={[Math.cos((pi/10)*Math.PI*2)*0.02, 0, Math.sin((pi/10)*Math.PI*2)*0.02]}
                  receiveShadow castShadow
                >
                  <planeGeometry args={[0.08 - (pi*0.003), 0.18 - (pi*0.01)]} />
                  <meshStandardMaterial map={petalTexture} color={plantConfig.leafColor} side={THREE.DoubleSide} roughness={0.18} transparent opacity={0.98} />
                </mesh>
              ))}
              {/* center stigma */}
              <mesh>
                <sphereGeometry args={[0.01, 8, 6]} />
                <meshStandardMaterial color={'#FFD166'} roughness={0.2} emissive={'#FFB84D'} emissiveIntensity={0.06} />
              </mesh>
            </group>
          </>
        );
      })()}
    </group>
  );
}

function StorageWall({ position, args, color, image, wallType, selectedWalls, wallHeight, design }: { 
  position: [number, number, number], 
  args: [number, number, number],
  color: string,
  image: string | null,
  wallType: 'back' | 'left' | 'right' | 'front',
  selectedWalls: { back: boolean; left: boolean; right: boolean; front: boolean; },
  wallHeight: number,
  design?: StorageWallDesign | null
}) {
  const shouldShowImage = image && selectedWalls[wallType];
  const [width, , depth] = args;
  
  // Best√§m vilken dimension som √§r v√§ggytans bredd
  const wallWidth = width > depth ? width : depth;

  return (
    <>
      {/* Basv√§gg med f√§rg */}
      <mesh position={position}>
        <boxGeometry args={args} />
        <meshStandardMaterial 
          color={design ? '#FFFFFF' : color}
          roughness={0.7}
          metalness={0.0}
        />
      </mesh>
      
      {/* H√∂guppl√∂st design overlay fr√•n StoragePDFGenerator */}
      {design && (
        <StorageWallDesignOverlay
          design={design}
          wallWidth={wallWidth}
          wallHeight={wallHeight}
          position={[
            position[0] + (wallType === 'left' ? -0.06 : wallType === 'right' ? 0.06 : 0),
            position[1],
            position[2] + (wallType === 'back' ? -0.06 : wallType === 'front' ? 0.06 : 0)
          ]}
          rotation={
            wallType === 'left' ? [0, Math.PI / 2, 0] : 
            wallType === 'right' ? [0, -Math.PI / 2, 0] : 
            [0, 0, 0]
          }
        />
      )}
      
      {/* H√∂guppl√∂st bildoverlay om bild √§r vald (fallback f√∂r gamla systemet) */}
      {!design && shouldShowImage && (
        <StorageWallOverlay
          imageUrl={image}
          wallWidth={wallWidth}
          wallHeight={wallHeight}
          position={[
            position[0] + (wallType === 'left' ? -0.06 : wallType === 'right' ? 0.06 : 0),
            position[1],
            position[2] + (wallType === 'back' ? -0.06 : wallType === 'front' ? 0.06 : 0)
          ]}
          rotation={
            wallType === 'left' ? [0, Math.PI / 2, 0] : 
            wallType === 'right' ? [0, -Math.PI / 2, 0] : 
            [0, 0, 0]
          }
        />
      )}
    </>
  );
}

function Furniture({ furnitureConfig, position, rotation }: { 
  furnitureConfig: any, 
  position: [number, number, number],
  rotation: number
}) {
  const baseHeight = 0.065; // Samma som mattan

  return (
    <group position={position} rotation={[0, rotation * Math.PI / 180, 0]}>
      {/* Barbord */}
      {furnitureConfig.type === 'table' && (
        <>
          {/* St√•lben (slutar under bordsskivan) */}
          <mesh position={[0, baseHeight + furnitureConfig.height/2 - 0.025, 0]}>
            <cylinderGeometry args={[0.03, 0.05, furnitureConfig.height - 0.05, 8]} />
            <meshStandardMaterial color="#C0C0C0" roughness={0.2} metalness={0.8} />
          </mesh>
          {/* Bordsskiva */}
          <mesh position={[0, baseHeight + furnitureConfig.height - 0.025, 0]}>
            <cylinderGeometry args={[furnitureConfig.width/2, furnitureConfig.width/2, 0.05, 16]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.3} />
          </mesh>
          {/* Fotring */}
          <mesh position={[0, baseHeight + 0.3, 0]}>
            <torusGeometry args={[furnitureConfig.width/3, 0.02, 8, 16]} />
            <meshStandardMaterial color="#C0C0C0" roughness={0.2} metalness={0.8} />
          </mesh>
        </>
      )}

      {/* Barstol */}
      {furnitureConfig.type === 'chair' && (
        <>
          {/* St√•lben (slutar under sitsen) */}
          <mesh position={[0, baseHeight + 0.32, 0]}>
            <cylinderGeometry args={[0.025, 0.04, 0.64, 8]} />
            <meshStandardMaterial color="#C0C0C0" roughness={0.2} metalness={0.8} />
          </mesh>
          {/* Sits */}
          <mesh position={[0, baseHeight + 0.65, 0]}>
            <cylinderGeometry args={[furnitureConfig.width/2.5, furnitureConfig.width/2.5, 0.05, 16]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.7} />
          </mesh>
          {/* Ryggst√∂d */}
          <mesh position={[0, baseHeight + 0.85, furnitureConfig.width/4]} rotation={[Math.PI/12, 0, 0]}>
            <boxGeometry args={[furnitureConfig.width/2, 0.3, 0.03]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.7} />
          </mesh>
          {/* Fotring */}
          <mesh position={[0, baseHeight + 0.25, 0]}>
            <torusGeometry args={[furnitureConfig.width/3, 0.015, 8, 16]} />
            <meshStandardMaterial color="#C0C0C0" roughness={0.2} metalness={0.8} />
          </mesh>
        </>
      )}

      {/* Mysig pall */}
      {furnitureConfig.type === 'stool' && (
        <>
          {/* Mjuk √∂verdel med rundare form */}
          <mesh position={[0, baseHeight + furnitureConfig.height - 0.05, 0]}>
            <cylinderGeometry args={[furnitureConfig.width/2.2, furnitureConfig.width/2.5, 0.1, 16]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.3} />
          </mesh>
          {/* Mjuk mellandel */}
          <mesh position={[0, baseHeight + furnitureConfig.height - 0.15, 0]}>
            <cylinderGeometry args={[furnitureConfig.width/2.5, furnitureConfig.width/3, 0.1, 16]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.4} />
          </mesh>
          {/* Bas med rundade h√∂rn */}
          <mesh position={[0, baseHeight + furnitureConfig.height/2 - 0.1, 0]}>
            <cylinderGeometry args={[furnitureConfig.width/3, furnitureConfig.width/3.2, furnitureConfig.height - 0.25, 12]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.6} />
          </mesh>
        </>
      )}

      {/* Soffa */}
      {furnitureConfig.type === 'sofa' && (
        <>
          {/* Sits */}
          <mesh position={[0, baseHeight + 0.2, 0]}>
            <boxGeometry args={[furnitureConfig.width, 0.15, furnitureConfig.depth - 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
          {/* Ryggst√∂d */}
          <mesh position={[0, baseHeight + 0.45, furnitureConfig.depth/2 - 0.08]}>
            <boxGeometry args={[furnitureConfig.width, 0.5, 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
          {/* Armst√∂d */}
          <mesh position={[furnitureConfig.width/2 - 0.08, baseHeight + 0.35, 0]}>
            <boxGeometry args={[0.15, 0.3, furnitureConfig.depth - 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
          <mesh position={[-furnitureConfig.width/2 + 0.08, baseHeight + 0.35, 0]}>
            <boxGeometry args={[0.15, 0.3, furnitureConfig.depth - 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
        </>
      )}

      {/* F√•t√∂lj */}
      {furnitureConfig.type === 'armchair' && (
        <>
          {/* Sits */}
          <mesh position={[0, baseHeight + 0.25, 0]}>
            <boxGeometry args={[furnitureConfig.width - 0.15, 0.15, furnitureConfig.depth - 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
          {/* Ryggst√∂d */}
          <mesh position={[0, baseHeight + 0.5, furnitureConfig.depth/2 - 0.08]} rotation={[-Math.PI/15, 0, 0]}>
            <boxGeometry args={[furnitureConfig.width - 0.15, 0.5, 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
          {/* Armst√∂d */}
          <mesh position={[furnitureConfig.width/2 - 0.08, baseHeight + 0.4, 0]}>
            <boxGeometry args={[0.15, 0.3, furnitureConfig.depth - 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
          <mesh position={[-furnitureConfig.width/2 + 0.08, baseHeight + 0.4, 0]}>
            <boxGeometry args={[0.15, 0.3, furnitureConfig.depth - 0.15]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
          </mesh>
        </>
      )}

      {/* Sidobord */}
      {furnitureConfig.type === 'side_table' && (
        <>
          <mesh position={[0, baseHeight + furnitureConfig.height - 0.03, 0]}>
            <boxGeometry args={[furnitureConfig.width, 0.06, furnitureConfig.depth]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.3} />
          </mesh>
          {/* Ben */}
          {[-1, 1].map(x => (
            [-1, 1].map(z => (
              <mesh 
                key={`${x}-${z}`}
                position={[
                  x * (furnitureConfig.width/2 - 0.03),
                  baseHeight + furnitureConfig.height/2 - 0.03,
                  z * (furnitureConfig.depth/2 - 0.03)
                ]}
              >
                <boxGeometry args={[0.05, furnitureConfig.height - 0.06, 0.05]} />
                <meshStandardMaterial color={furnitureConfig.color} roughness={0.8} />
              </mesh>
            ))
          ))}
        </>
      )}

      {/* Podie (Vitlaserad furu) */}
      {furnitureConfig.type === 'podium' && (
        <>
          {/* Huvudkropp av podiet - en enhetlig vitlaserad furu */}
          <mesh position={[0, baseHeight + furnitureConfig.height/2, 0]}>
            <boxGeometry args={[furnitureConfig.width, furnitureConfig.height, furnitureConfig.depth]} />
            <meshStandardMaterial color={furnitureConfig.color} roughness={0.7} />
          </mesh>
        </>
      )}
    </group>
  );
}

export default function App() {
  // üõ°Ô∏è S√ÑKERHETSVARIABLER
  const [devToolsUnlocked, setDevToolsUnlocked] = useState(false);
  const DEV_ACCESS_CODE = "MONTER2025"; // Hemlig kod f√∂r utvecklarverktyg
  
  // üõ°Ô∏è REALISTISKA SKYDDSFUNKTIONER MOT MISSBRUK
  // OBS: Systemets printscreen (Cmd+Shift+4, PrtScr, etc.) KAN INTE blockeras av webbl√§sare!
  // Detta √§r en s√§kerhetsbegr√§nsning - bara OS:et kan kontrollera dessa funktioner.
  // Fokus ligger d√§rf√∂r p√• visuella avskr√§ckningsmedel och blockering av andra v√§gar.
  useEffect(() => {
    // Logga sessionstart (kan skickas till server f√∂r sp√•rning)
    const sessionId = Math.random().toString(36).substr(2, 9);
    console.log(`üîç Session started: ${sessionId} at ${new Date().toISOString()}`);
    
    // Kontrollera f√∂r suspekt beteende
    let screenshotAttempts = 0;
    let rightClickAttempts = 0;
    
    // F√∂rhindra utvecklarverktyg och vissa tangentbordsgenv√§gar
    const preventDeveloperTools = (e: KeyboardEvent) => {
      // Om utvecklarverktyg √§r uppl√•sta, till√•t allt
      if (devToolsUnlocked) {
        return true;
      }
      
      // ENKLARE UPPL√ÖSNING: Tryck "U" tre g√•nger snabbt (inom 2 sekunder)
      if (e.key === 'u' || e.key === 'U') {
        const now = Date.now();
        if (!(window as any).lastUPress || now - (window as any).lastUPress > 2000) {
          (window as any).uPressCount = 1;
        } else {
          (window as any).uPressCount = ((window as any).uPressCount || 0) + 1;
        }
        (window as any).lastUPress = now;
        
        console.log(`üî§ U pressed ${(window as any).uPressCount} times`);
        
        if ((window as any).uPressCount >= 3) {
          e.preventDefault();
          const userCode = prompt('üéØ Du hittade den hemliga kombinationen! Ange utvecklarkod:');
          if (userCode === DEV_ACCESS_CODE) {
            setDevToolsUnlocked(true);
            alert('‚úÖ Utvecklarverktyg uppl√•sta! Du kan nu anv√§nda Cmd+Option+I, h√∂gerklick, etc.');
            console.log('üîì Developer tools unlocked by authorized user (triple U method)');
            (window as any).uPressCount = 0;
          } else if (userCode !== null) {
            alert('‚ùå Felaktig kod. R√§tt kod √§r: MONTER2025');
          }
          return false;
        }
      }
      
      // Speciell kombination f√∂r Mac: Cmd+Shift+Alt+M (eller Ctrl+Shift+Alt+M p√• PC)
      if (((e.metaKey || e.ctrlKey) && e.shiftKey && e.altKey && e.key === 'M')) {
        e.preventDefault();
        console.log('üîë Unlock combination detected! Keys pressed:', {
          metaKey: e.metaKey,
          ctrlKey: e.ctrlKey, 
          shiftKey: e.shiftKey,
          altKey: e.altKey,
          key: e.key
        });
        const userCode = prompt('üîë Ange utvecklarkod f√∂r att l√•sa upp utvecklarverktyg:');
        console.log('User entered code:', userCode, 'Expected:', DEV_ACCESS_CODE);
        if (userCode === DEV_ACCESS_CODE) {
          setDevToolsUnlocked(true);
          alert('‚úÖ Utvecklarverktyg uppl√•sta! Du kan nu anv√§nda Cmd+Option+I, h√∂gerklick, etc.');
          console.log('üîì Developer tools unlocked by authorized user');
        } else if (userCode !== null) {
          alert('‚ùå Felaktig kod. R√§tt kod √§r: MONTER2025');
        }
        return false;
      }
      
      // Blockera Mac utvecklarverktyg (Cmd+Option+I, Cmd+Option+J, Cmd+Option+C)
      if (e.metaKey && e.altKey && (e.key === 'I' || e.key === 'i' || e.key === 'J' || e.key === 'j' || e.key === 'C' || e.key === 'c')) {
        e.preventDefault();
        screenshotAttempts++;
        console.warn(`üö® Mac Developer tools attempt #${screenshotAttempts} from session ${sessionId}`);
        
        if (screenshotAttempts > 2) {
          alert('üö´ F√∂r m√•nga f√∂rs√∂k att √∂ppna utvecklarverktyg har uppt√§ckts.\nSessionen loggas f√∂r s√§kerhets√§ndam√•l.\n\nüí° Tips: Auktoriserad personal kan l√•sa upp med Cmd+Shift+Alt+M');
        } else {
          alert('üö´ Utvecklarverktyg √§r inte till√•tna.\nKontakta Monterhyra f√∂r licensiering.\n\nüí° Tips: Auktoriserad personal kan l√•sa upp med Cmd+Shift+Alt+M');
        }
        return false;
      }
      
      // Blockera PC utvecklarverktyg (Ctrl+Shift+I, Ctrl+Shift+J, Ctrl+Shift+C) 
      if ((e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'J' || e.key === 'C')) || 
          e.key === 'F12' || // Dev tools
          (e.ctrlKey && e.key === 'u') || // PC View source
          (e.metaKey && e.key === 'u')) { // Mac View source
        e.preventDefault();
        screenshotAttempts++;
        console.warn(`üö® Developer tools attempt #${screenshotAttempts} from session ${sessionId}`);
        
        if (screenshotAttempts > 2) {
          alert('üö´ F√∂r m√•nga f√∂rs√∂k att √∂ppna utvecklarverktyg har uppt√§ckts.\nSessionen loggas f√∂r s√§kerhets√§ndam√•l.\n\nüí° Tips: Auktoriserad personal kan l√•sa upp med Cmd+Shift+Alt+M (Mac) eller Ctrl+Shift+Alt+M (PC)');
        } else {
          alert('üö´ Utvecklarverktyg √§r inte till√•tna.\nKontakta Monterhyra f√∂r licensiering.\n\nüí° Tips: Auktoriserad personal kan l√•sa upp med Cmd+Shift+Alt+M (Mac) eller Ctrl+Shift+Alt+M (PC)');
        }
        return false;
      }
      
      // OBS: PrintScreen (PrtScr, Cmd+Shift+4, etc.) KAN INTE blockeras av webbl√§saren
      // Dessa hanteras av operativsystemet och √§r utanf√∂r webbl√§sarens kontroll
    };

    // F√∂rhindra h√∂gerklick ENDAST p√• skyddade element (inte p√• 3D-objekt)
    const preventRightClick = (e: MouseEvent) => {
      // Om utvecklarverktyg √§r uppl√•sta, till√•t h√∂gerklick √∂verallt
      if (devToolsUnlocked) {
        return true;
      }
      
      const target = e.target as HTMLElement;
      
      // Till√•t h√∂gerklick p√• Canvas och 3D-element f√∂r att ta bort objekt
      if (target.tagName === 'CANVAS' || 
          target.closest('canvas') || 
          target.closest('[data-testid="canvas-container"]')) {
        return true; // Till√•t h√∂gerklick p√• 3D-vyn
      }
      
      // Blockera h√∂gerklick p√• bilder, menyer och andra UI-element
      if (target.tagName === 'IMG' || 
          target.closest('img') ||
          target.closest('.sidebar') ||
          target.closest('[style*="position: absolute"]')) {
        e.preventDefault();
        rightClickAttempts++;
        console.warn(`üö® Right-click blocked on protected element #${rightClickAttempts} from session ${sessionId}`);
        
        if (rightClickAttempts <= 2) {
          alert('üö´ H√∂gerklick √§r inaktiverat p√• skyddade element.');
        }
        return false;
      }
      
      return true; // Till√•t h√∂gerklick p√• allt annat
    };

    // F√∂rhindra drag & drop av bilder
    const preventDragDrop = (e: DragEvent) => {
      if (devToolsUnlocked) return true; // Till√•t om uppl√•st
      e.preventDefault();
      return false;
    };

    // F√∂rhindra textmarkering
    const preventSelection = (e: Event) => {
      if (devToolsUnlocked) return true; // Till√•t om uppl√•st
      e.preventDefault();
      return false;
    };

    // L√§gg till event listeners
    document.addEventListener('keydown', preventDeveloperTools);
    document.addEventListener('contextmenu', preventRightClick);
    document.addEventListener('dragstart', preventDragDrop);
    document.addEventListener('selectstart', preventSelection);

    // F√∂rhindra zoom-in f√∂r att d√∂lja vattenst√§mpel
    const preventZoom = (e: WheelEvent) => {
      if (devToolsUnlocked) return true; // Till√•t om uppl√•st
      // Blockera b√•de Ctrl (PC) och Cmd (Mac) zoom
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault();
      }
    };
    document.addEventListener('wheel', preventZoom, { passive: false });

    // Cleanup
    return () => {
      document.removeEventListener('keydown', preventDeveloperTools);
      document.removeEventListener('contextmenu', preventRightClick);
      document.removeEventListener('dragstart', preventDragDrop);
      document.removeEventListener('selectstart', preventSelection);
      document.removeEventListener('wheel', preventZoom);
    };
  }, [devToolsUnlocked]); // L√§gg till devToolsUnlocked som dependency

  const captureRef = useRef<any>(null);
  const [counterSize, setCounterSize] = useState(DESK_SIZES[0].width);
  const [tvMarkersVisible, setTvMarkersVisible] = useState(false);
  const [tvs, setTvs] = useState<Array<{id: number, size: number, wall: string, position: number, heightIndex: number, orientation: 'landscape'|'portrait'}>>([]);
  const [nextTvId, setNextTvId] = useState(1);
  const [selectedTvMarker, setSelectedTvMarker] = useState<{wall: string, position: number, heightIndex: number} | null>(null);
  const [storages, setStorages] = useState<Array<{id: number, type: number, position: {x: number, z: number}, rotation: number}>>([]);
  const [storageMarkersVisible, setStorageMarkersVisible] = useState(false);
  const [nextStorageId, setNextStorageId] = useState(1);
  const [selectedStorageMarker, setSelectedStorageMarker] = useState<{x: number, z: number} | null>(null);
  const [floorIndex, setFloorIndex] = useState<number|null>(null);
  const [customFloorWidth, setCustomFloorWidth] = useState(3);
  const [customFloorDepth, setCustomFloorDepth] = useState(1.5);
  const [carpetIndex, setCarpetIndex] = useState(0);
  const [wallShape, setWallShape] = useState('');
  const [wallHeight, setWallHeight] = useState(WALL_HEIGHTS[0].value);
  const [graphic, setGraphic] = useState('none');
  const [showLights, setShowLights] = useState(false);
  const [uploadedImage, setUploadedImage] = useState<string | null>(null);
  const [uploadedImageLeft, setUploadedImageLeft] = useState<string | null>(null);
  const [uploadedImageRight, setUploadedImageRight] = useState<string | null>(null);
  const [forexImageBack, setForexImageBack] = useState<string | null>(null);
  const [forexImageLeft, setForexImageLeft] = useState<string | null>(null);
  const [forexImageRight, setForexImageRight] = useState<string | null>(null);
  const [counters, setCounters] = useState<Array<{id: number, type: number, position: {x: number, z: number}, rotation: number}>>([]);
  const [counterMarkersVisible, setCounterMarkersVisible] = useState(false);
  const [nextCounterId, setNextCounterId] = useState(1);
  const [selectedMarkerPosition, setSelectedMarkerPosition] = useState<{x: number, z: number} | null>(null);
  const [selectedCounterType, setSelectedCounterType] = useState(1); // Vald disktyp
  const [selectedTvSize, setSelectedTvSize] = useState(0); // Vald TV-storlek (0 = Ingen)
  const [selectedTrussType, setSelectedTrussType] = useState(0); // Vald truss-typ
  
  // Diskobjekt inst√§llningar
  const [showEspressoMachine, setShowEspressoMachine] = useState(false);
  const [showFlowerVase, setShowFlowerVase] = useState(false);
  const [showCandyBowl, setShowCandyBowl] = useState(false);
  const [selectedStorageType, setSelectedStorageType] = useState(1); // Vald f√∂rr√•d-storlek
  
  // Nya placerbara funktioner
  const [showExtraPower, setShowExtraPower] = useState(false); // Endast f√∂r pris
  const [wallShelves, setWallShelves] = useState<Array<{id: number, wall: string, position: {x: number, y: number}}>>([]);
  const [shelfMarkersVisible, setShelfMarkersVisible] = useState(false);
  const [nextShelfId, setNextShelfId] = useState(1);
  const [showClothingRacks, setShowClothingRacks] = useState(false);
  const [speakers, setSpeakers] = useState<Array<{id: number, position: {x: number, z: number}, rotation: number}>>([]);
  const [speakerMarkersVisible, setSpeakerMarkersVisible] = useState(false);
  const [nextSpeakerId, setNextSpeakerId] = useState(1);
  const [speakerSize, setSpeakerSize] = useState<'small' | 'medium' | 'large'>('medium');
  
  // VEPA PDF Generator state
  const [showVepaPDFGenerator, setShowVepaPDFGenerator] = useState(false);
  const [showForexPDFGenerator, setShowForexPDFGenerator] = useState(false);
  const [showStoragePDFGenerator, setShowStoragePDFGenerator] = useState(false);
  const [selectedStorageForDesign, setSelectedStorageForDesign] = useState<number | null>(null);
  const [vepaWallDesigns, setVepaWallDesigns] = useState<any[]>([]);
  const [forexWallDesigns, setForexWallDesigns] = useState<any[]>([]);
  const [storageDesigns, setStorageDesigns] = useState<Map<number, { designs: StorageWallDesign[], printType: 'vepa' | 'forex' }>>(new Map());
  
  // Admin Portal state
  const [showAdminPortal, setShowAdminPortal] = useState(false);
  
  // Collapsed state for live packlists - standardm√§ssigt minimerade
  const [floatingPacklistCollapsed, setFloatingPacklistCollapsed] = useState(true);
  // const [compactPacklistCollapsed, setCompactPacklistCollapsed] = useState(true); // Unused - commented out
  // Collapsed state for price section - standardm√§ssigt minimerad
  const [priceSectionCollapsed, setPriceSectionCollapsed] = useState(true);
  // Collapsed state for floating price box
  const [floatingPriceCollapsed, setFloatingPriceCollapsed] = useState(false);
  
  // M√§ssmilj√∂ toggle
  const [showExhibitionHall, setShowExhibitionHall] = useState(false);
  
  // M√§sshalls-montrar state  
  const [exhibitionBooths] = useState<Record<string, string>>({
    // Rad 1 - V√§nster sida
    'booth-1': 'tech-startup',
    'booth-2': 'fashion-brand', 
    'booth-3': 'food-company',
    'booth-4': 'wellness-spa',
    'booth-5': 'minimal-design',
    
    // Rad 2 - Mitt-v√§nster  
    'booth-6': 'tech-startup',
    'booth-7': 'fashion-brand',
    'booth-8': 'food-company',
    
    // Rad 4 - Mitt-h√∂ger
    'booth-9': 'wellness-spa',
    'booth-10': 'minimal-design',
    'booth-11': 'tech-startup', 
    'booth-12': 'fashion-brand',
    
    // Rad 5 - H√∂ger sida
    'booth-13': 'food-company',
    'booth-14': 'wellness-spa',
    'booth-15': 'minimal-design',
    'booth-16': 'tech-startup',
    'booth-17': 'fashion-brand'
  });
  
  // D√∂lja grid under PDF-generering
  const [hideGridForCapture, setHideGridForCapture] = useState(false);
  
  const [plants, setPlants] = useState<Array<{id: number, type: number, position: {x: number, z: number}, rotation: number}>>([]);
  const [plantMarkersVisible, setPlantMarkersVisible] = useState(false);
  const [nextPlantId, setNextPlantId] = useState(1);
  const [selectedPlantType, setSelectedPlantType] = useState(0); // Vald v√§xttyp
  const [furniture, setFurniture] = useState<Array<{id: number, type: number, position: {x: number, z: number}, rotation: number}>>([]);
  const [furnitureMarkersVisible, setFurnitureMarkersVisible] = useState(false);
  const [nextFurnitureId, setNextFurnitureId] = useState(1);
  const [selectedFurnitureType, setSelectedFurnitureType] = useState(0); // Vald m√∂beltyp
  const [storageColor, setStorageColor] = useState('#BFBFBF'); // F√∂rr√•dens f√§rg
  const [storageGraphic, setStorageGraphic] = useState('none'); // F√∂rr√•dens grafik
  const [storageUploadedImage, setStorageUploadedImage] = useState<string | null>(null);
  const [storageWallSelections, setStorageWallSelections] = useState({
    back: false,
    left: false,
    right: false,
    front: false
  }); // Vilka v√§ggar som ska ha trycket
  
  // Diskars f√§rginst√§llningar
  const [counterPanelColor, setCounterPanelColor] = useState('#ffffff'); // F√§rg p√• diskpaneler (framsida + sidor)
  const [counterFrontImage, setCounterFrontImage] = useState<string | null>(null); // Eget tryck p√• framsidan
  
  // Registrerings-modal state
  const [showRegistrationModal, setShowRegistrationModal] = useState(false);
  const [isRegistered, setIsRegistered] = useState(false);
  const [registrationData, setRegistrationData] = useState({
    name: '',
    company: '',
    email: '',
    phone: '',
    orgNumber: '',
    eventName: '',
    eventCity: '',
    buildDate: '',
    teardownDate: '',
    eventDate: ''
  });
  const [registrationTimer, setRegistrationTimer] = useState<number | null>(null);
  
  // State f√∂r att tvinga re-render av texturer
  const [textureKey, setTextureKey] = useState(0);

  // Optimerad textur-cache f√∂r att undvika fladdring
  const counterTexture = useMemo(() => {
    if (!counterFrontImage) return null;
    const loader = new THREE.TextureLoader();
    const texture = loader.load(counterFrontImage, () => {
      // Callback n√§r texturen √§r laddad
      texture.needsUpdate = true;
      // Tvinga re-render genom att uppdatera key
      setTextureKey(prev => prev + 1);
    });
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.flipY = false; // Fixa orienteringen s√• bilden visas r√§tt h√•ll
    texture.needsUpdate = true; // S√§kerst√§ll att texturen uppdateras
    return texture;
  }, [counterFrontImage]);

  // S√§kerst√§ll att alla counters re-renderas n√§r texturen √§ndras
  useEffect(() => {
    if (counterFrontImage && counterTexture) {
      // Tvinga en re-render genom att uppdatera textureKey
      setTextureKey(prev => prev + 1);
    }
  }, [counterFrontImage, counterTexture]);

  // F√∂rberedd f√∂r framtida individuella v√§ggbilder
  // const [storageImages, setStorageImages] = useState({
  //   back: null as string | null,
  //   left: null as string | null,
  //   right: null as string | null,
  //   front: null as string | null
  // }); // Olika bilder f√∂r olika v√§ggar
  // Prevent "declared but never read" TS warnings for a few optional states used elsewhere
  // (kept as noop references so they don't alter behavior)
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const __unused_refs = [counterSize, setCounterSize, selectedTvMarker, setSelectedTvMarker, selectedStorageMarker, setSelectedStorageMarker, selectedMarkerPosition, setSelectedMarkerPosition];
  
  // ‚è∞ REGISTRERINGS-TIMER: Visa formul√§r efter 60 sekunder
  useEffect(() => {
    // Starta timer som visar registreringsmodalen efter 60 sekunder
    const timer = setTimeout(() => {
      if (!isRegistered) {
        setShowRegistrationModal(true);
      }
    }, 60000); // 60 sekunder (1 minut)

    setRegistrationTimer(timer);

    return () => {
      if (registrationTimer) {
        clearTimeout(registrationTimer);
      }
      clearTimeout(timer);
    };
  }, [isRegistered]);
  
  // √Öterst√§ll markers n√§r man byter tv-storlek eller antal
  // React.useEffect(() => { setTvMarkersVisible(true); }, [tvIndex, tvCount]);

  // Prisfunktion
  const calculatePrice = () => {
    let totalPrice = 0;
    
    if (floorIndex === null) return 0;
    
    const floorDimensions = (() => {
      const floorConfig = FLOOR_SIZES[floorIndex];
      if (floorConfig?.custom) {
        return { width: customFloorWidth, depth: customFloorDepth };
      }
      return { width: floorConfig.width, depth: floorConfig.depth };
    })();
    
    // V√§ggpriser (per 1m segment, varierar med h√∂jd)
    let pricePerWallMeter = 862; // 2,5m som standard
    if (wallHeight === 3) pricePerWallMeter = 982;
    else if (wallHeight === 3.5) pricePerWallMeter = 1342;
    
    if (wallShape === 'straight') {
      // Rak v√§gg = baksida endast
      const backWallLength = floorDimensions.width;
      const numberOfWallSegments = Math.ceil((backWallLength * 2) ) / 2; // 0.5m segment, alltid upp√•t
      totalPrice += numberOfWallSegments * pricePerWallMeter;
    } else if (wallShape === 'l') {
      // L-form = baksida + v√§nster sida
      const backWallLength = floorDimensions.width;
      const leftWallLength = floorDimensions.depth;
      const totalWallLength = backWallLength + leftWallLength;
      const numberOfWallSegments = Math.ceil((totalWallLength * 2) ) / 2;
      totalPrice += numberOfWallSegments * pricePerWallMeter;
    } else if (wallShape === 'u') {
      // U-form = baksida + v√§nster + h√∂ger sida
      const backWallLength = floorDimensions.width;
      const sideWallLength = floorDimensions.depth * 2; // b√•da sidorna
      const totalWallLength = backWallLength + sideWallLength;
      const numberOfWallSegments = Math.ceil((totalWallLength * 2) ) / 2;
      totalPrice += numberOfWallSegments * pricePerWallMeter;
    }
    
    // Matta/golvpriser (145 kr per kvm f√∂r f√§rg, 180 kr f√∂r EXPO, 240 kr f√∂r SALSA, 255 kr f√∂r rutor)
    const floorArea = Math.round((floorDimensions.width * 100) * (floorDimensions.depth * 100)) / 10000; // alltid tv√• decimaler
    if (carpetIndex > 0) { // Alla mattor utom "Ingen matta"
      const selectedCarpet = CARPET_COLORS[carpetIndex];
      if (selectedCarpet.color && selectedCarpet.color.startsWith('checkerboard-')) {
        // Rutm√∂nster - 255 kr per kvm
        totalPrice += floorArea * 255;
      } else if (selectedCarpet.name.startsWith('EXPO')) {
        // EXPO f√§rger - 180 kr per kvm
        totalPrice += floorArea * 180;
      } else if (selectedCarpet.name.startsWith('SALSA')) {
        // SALSA f√§rger - 240 kr per kvm (180 + 60)
        totalPrice += floorArea * 240;
      } else {
        // Vanliga f√§rgmattor - 145 kr per kvm
        totalPrice += floorArea * 145;
      }
    }
    
    // Grafik
    if (graphic === 'hyr') {
      // Hyrgrafik - 200 kr per kvm v√§ggyta
      let totalWallArea = 0;
      if (wallShape === 'straight') totalWallArea = floorDimensions.width * wallHeight;
      else if (wallShape === 'l') totalWallArea = (floorDimensions.width + floorDimensions.depth) * wallHeight;
      else if (wallShape === 'u') totalWallArea = (floorDimensions.width + (floorDimensions.depth * 2)) * wallHeight;
      
      totalPrice += totalWallArea * 200;
    } else if (graphic === 'forex') {
      let pricePerMeter = 1450; // 2,5m som standard
      if (wallHeight === 3) pricePerMeter = 2000;
      if (wallHeight === 3.5) pricePerMeter = 2850;
      
      let totalWallLength = 0;
      if (wallShape === 'straight') totalWallLength = floorDimensions.width;
      else if (wallShape === 'l') totalWallLength = floorDimensions.width + floorDimensions.depth;
      else if (wallShape === 'u') totalWallLength = floorDimensions.width + (floorDimensions.depth * 2);
      
      totalPrice += totalWallLength * pricePerMeter;
    } else if (graphic === 'vepa') {
      // 700 kr per kvm
      let totalWallArea = 0;
      if (wallShape === 'straight') totalWallArea = floorDimensions.width * wallHeight;
      else if (wallShape === 'l') totalWallArea = (floorDimensions.width + floorDimensions.depth) * wallHeight;
      else if (wallShape === 'u') totalWallArea = (floorDimensions.width + (floorDimensions.depth * 2)) * wallHeight;
      
      totalPrice += totalWallArea * 700;
    }
    
    // TV-priser
    tvs.forEach(tv => {
      const tvConfig = TV_SIZES[tv.size];
      if (tvConfig.label === '32"') totalPrice += 2000;
      else if (tvConfig.label === '43"') totalPrice += 2500;
      else if (tvConfig.label === '55"') totalPrice += 3500;
      else if (tvConfig.label === '70"') totalPrice += 5500;
      else if (tvConfig.label === '75" beTV') totalPrice += 11000;
      // "Ingen" TV kostar inget (tvConfig.label === 'Ingen')
    });
    
    // Diskpriser (baserat p√• 1m disk = 3500 kr + 760 kr per 0,5m steg)
    counters.forEach(counter => {
      const counterConfig = COUNTER_TYPES[counter.type];
      if (counterConfig.width === 1) totalPrice += 3500; // 1m disk
      else if (counterConfig.width === 1.5) totalPrice += 3500 + 760; // 1,5m disk (4260 kr)
      else if (counterConfig.width === 2) totalPrice += 3500 + 1520; // 2m disk (5020 kr)
      else if (counterConfig.width === 2.5) totalPrice += 3500 + 2280; // 2,5m disk (5780 kr)
      else if (counterConfig.width === 3) totalPrice += 3500 + 3040; // 3m disk (6540 kr)
      else if (counterConfig.width === 3.5) totalPrice += 3500 + 3800; // 3,5m disk (7300 kr)
      else if (counterConfig.width === 4) totalPrice += 3500 + 4560; // 4m disk (8060 kr)
      else if (counterConfig.type === 'L' || counterConfig.type === 'L-mirrored') {
        // L-disk har eget pris
        totalPrice += 8500;
      }
    });
    
    // Diskobjekt
    if (showEspressoMachine) totalPrice += 3500;
    if (showFlowerVase) totalPrice += 450;
    if (showCandyBowl) totalPrice += 250;
    
    // F√∂rr√•d (samma pris som v√§ggar)
    storages.forEach(storage => {
      const storageConfig = STORAGE_TYPES[storage.type];
      // Ber√§kna v√§ggarea f√∂r f√∂rr√•det
      const storageWallLength = (storageConfig.width * 2) + (storageConfig.depth * 2);
      const numberOfWallSegments = Math.ceil((storageWallLength * 2)) / 2; // 0.5m segment, alltid upp√•t
      totalPrice += numberOfWallSegments * pricePerWallMeter;
    });
    
    // V√§xter (850 kr per v√§xt)
    totalPrice += plants.length * 850;
    
    // M√∂bler
    furniture.forEach(furnitureItem => {
      const furnitureConfig = FURNITURE_TYPES[furnitureItem.type];
      if (furnitureConfig.label === 'Barbord') totalPrice += 850;
      else if (furnitureConfig.label === 'Barstol') totalPrice += 550;
      else if (furnitureConfig.label === 'Mysig pall') totalPrice += 600;
      else if (furnitureConfig.label === 'Soffa 2-sits') totalPrice += 1350;
      else if (furnitureConfig.label === 'Soffa 3-sits') totalPrice += 1550;
      else if (furnitureConfig.label === 'F√•t√∂lj') totalPrice += 850;
      else if (furnitureConfig.label === 'Sidobord') totalPrice += 380;
    });
    
    // Belysning
    if (showLights) {
      // Enkla lampor 300 kr varje
      let numberOfLights = 0;
      // Ber√§kna antal lampor baserat p√• v√§ggarea, alltid r√§kna med halva meter
      if (wallShape === 'straight') numberOfLights = Math.ceil(floorDimensions.width * 2) / 2;
      else if (wallShape === 'l') numberOfLights = Math.ceil((floorDimensions.width + floorDimensions.depth) * 2) / 2;
      else if (wallShape === 'u') numberOfLights = Math.ceil((floorDimensions.width + (floorDimensions.depth * 2)) * 2) / 2;
      totalPrice += numberOfLights * 300;
    }
    
    // Truss
    const selectedTruss = TRUSS_TYPES[selectedTrussType];
    if (selectedTruss.type === 'front-straight') {
      totalPrice += floorDimensions.width * 370; // 370 kr per meter
    } else if (selectedTruss.type === 'hanging-round' && 'diameter' in selectedTruss) {
      const circumference = Math.PI * selectedTruss.diameter;
      totalPrice += circumference * 370;
    } else if (selectedTruss.type === 'hanging-square' && 'width' in selectedTruss) {
      const perimeter = (selectedTruss.width * 2) + (selectedTruss.depth * 2);
      totalPrice += perimeter * 370;
    }
    
    // V√§ggdekorationer
    wallShelves.forEach(() => {
      totalPrice += 550; // 550 kr per hylla
    });
    
    speakers.forEach(() => {
      if (speakerSize === 'small') totalPrice += 4500;
      else if (speakerSize === 'medium') totalPrice += 5500;
      else if (speakerSize === 'large') totalPrice += 8500;
    });
    
    if (showClothingRacks) {
      totalPrice += 550; // Kl√§dh√§ngare 550 kr
    }
    
    // Extra el
    if (showExtraPower) {
      totalPrice += 750;
    }
    
    return totalPrice;
  };

  // Ber√§kna vilka f√∂rr√•dsv√§ggar som √§r fria (inte mot monterv√§gg)
  const calculateFreeStorageWalls = (storage: {type: number, position: {x: number, z: number}, rotation: number}) => {
    if (!floorIndex) return { back: true, left: true, right: true, front: true };
    
    const floor = FLOOR_SIZES[floorIndex];
    const actualWidth = floor.custom ? customFloorWidth : floor.width;
    const actualDepth = floor.custom ? customFloorDepth : floor.depth;
    const storageConfig = STORAGE_TYPES[storage.type];
    
    // Definiera tr√∂skelv√§rde f√∂r n√§r en v√§gg √§r "mot" monterv√§ggen (0.6m = 60cm marginal)
    const WALL_THRESHOLD = 0.6;
    
    // F√∂rr√•dens v√§ggar i lokalkoordinater (f√∂re rotation)
    const localBack = -storageConfig.depth / 2;
    const localFront = storageConfig.depth / 2;
    const localLeft = -storageConfig.width / 2;
    const localRight = storageConfig.width / 2;
    
    // Rotera f√∂rr√•det och kolla mot monterv√§ggarna
    const rad = (storage.rotation * Math.PI) / 180;
    const cos = Math.cos(rad);
    const sin = Math.sin(rad);
    
    // Monterv√§ggpositioner
    const boothBackWall = -actualDepth / 2;
    const boothFrontWall = actualDepth / 2;
    const boothLeftWall = -actualWidth / 2;
    const boothRightWall = actualWidth / 2;
    
    // Ber√§kna v√§rldspositioner f√∂r f√∂rr√•d v√§ggar
    const backWorldZ = storage.position.z + localBack * cos;
    const frontWorldZ = storage.position.z + localFront * cos;
    const leftWorldX = storage.position.x + localLeft * cos;
    const rightWorldX = storage.position.x + localRight * cos;
    
    // Kolla vilka v√§ggar som √§r n√§ra monterv√§ggar
    const freeWalls = {
      back: true,
      left: true,
      right: true,
      front: true
    };
    
    // Kolla bakv√§gg mot booth back wall (endast f√∂r straight, l, u)
    if (wallShape === 'straight' || wallShape === 'l' || wallShape === 'u') {
      if (Math.abs(backWorldZ - boothBackWall) < WALL_THRESHOLD) {
        freeWalls.back = false;
      }
    }
    
    // Kolla v√§nster v√§gg mot booth left wall (endast f√∂r l, u)
    if (wallShape === 'l' || wallShape === 'u') {
      if (Math.abs(leftWorldX - boothLeftWall) < WALL_THRESHOLD) {
        freeWalls.left = false;
      }
    }
    
    // Kolla h√∂ger v√§gg mot booth right wall (endast f√∂r u)
    if (wallShape === 'u') {
      if (Math.abs(rightWorldX - boothRightWall) < WALL_THRESHOLD) {
        freeWalls.right = false;
      }
    }
    
    console.log('üßÆ Calculated free storage walls:', { 
      storageId: storage, 
      freeWalls, 
      wallShape,
      positions: { backWorldZ, frontWorldZ, leftWorldX, rightWorldX },
      boothWalls: { boothBackWall, boothLeftWall, boothRightWall }
    });
    
    return freeWalls;
  };

  // Arbetstidsber√§kning f√∂r byggnation och rivning
  const calculateLaborCosts = () => {
    if (floorIndex === null) return { buildHours: 0, demolitionHours: 0, buildCost: 0, demolitionCost: 0, adminFee: 0, consumables: 0, persons: 2, area: 0 };
    
    const floorDimensions = (() => {
      const floorConfig = FLOOR_SIZES[floorIndex];
      if (floorConfig?.custom) {
        return { width: customFloorWidth, depth: customFloorDepth };
      }
      return { width: floorConfig.width, depth: floorConfig.depth };
    })();
    
    // Hitta n√§rmaste standardstorlek f√∂r custom floors
    const getNearestStandardSize = (width: number, depth: number) => {
      const area = width * depth;
      const standardSizes = FLOOR_SIZES.filter(size => !size.custom);
      
      // Hitta n√§rmaste st√∂rre eller lika storlek
      const validSizes = standardSizes.filter(size => size.width * size.depth >= area);
      if (validSizes.length === 0) {
        // Om st√∂rre √§n alla standardstorlekar, ta st√∂rsta
        return standardSizes[standardSizes.length - 1];
      }
      
      // Ta minsta av de giltiga storlekarna
      return validSizes.reduce((min, current) => 
        (current.width * current.depth) < (min.width * min.depth) ? current : min
      );
    };
    
    const effectiveSize = floorIndex !== null && FLOOR_SIZES[floorIndex]?.custom
      ? getNearestStandardSize(floorDimensions.width, floorDimensions.depth)
      : floorDimensions;
    
    // Best√§m antal personer och bastid baserat p√• storlek
    let persons = 2;
    let baseHours = 4; // Minst 4h
    
    const area = effectiveSize.width * effectiveSize.depth;
    
    if (area <= 9) {
      // 3x3 och mindre: 2 personer, 4h
      persons = 2;
      baseHours = 4;
    } else if (area <= 12) {
      // 3x4, 4x3: 2 personer, 6h
      persons = 2;
      baseHours = 6;
    } else if (area <= 16) {
      // 4x4: 2 personer, 8h
      persons = 2;
      baseHours = 8;
    } else if (area <= 25) {
      // 5x5 och mindre: 2 personer, 10h
      persons = 2;
      baseHours = 10;
    } else if (area <= 36) {
      // 6x6 och mindre: 2 personer, 12h
      persons = 2;
      baseHours = 12;
    } else {
      // St√∂rre √§n 6x6: 3 personer
      persons = 3;
      if (area <= 49) baseHours = 9; // 7x7: 3 personer, 9h
      else if (area <= 64) baseHours = 12; // 8x8: 3 personer, 12h
      else baseHours = 15; // 10x10+: 3 personer, 15h
    }
    
    let totalBuildHours = baseHours;
    
    // TV-till√§gg: +1h per TV
    totalBuildHours += tvs.length;
    
    // Truss-till√§gg: +6h (3√ó2h f√∂r 2 personer, eller 2√ó3h f√∂r 3 personer)
    const selectedTruss = TRUSS_TYPES[selectedTrussType];
    if (selectedTruss.type !== 'none') {
      totalBuildHours += 6;
    }
    
    // Ber√§kna total arbetstid (personer √ó timmar)
    const totalPersonHours = persons * totalBuildHours;
    const buildCost = totalPersonHours * 750; // 750 kr per timme
    
    // Rivning: 75% av byggtiden
    const demolitionHours = Math.round(totalBuildHours * 0.75);
    const totalDemolitionPersonHours = persons * demolitionHours;
    const demolitionCost = totalDemolitionPersonHours * 750;
    
    // Skissavgift baserat p√• storlek
    const adminFee = area <= 25 ? 5000 : 10000; // 5x5 och mindre = 5000kr, st√∂rre = 10000kr
    
    // F√∂rbrukningsmaterial baserat p√• monterstorlek
    let consumables = 750; // Sm√• montrar som standard
    if (area <= 25) {
      consumables = 750; // Sm√• montrar (‚â§5x5)
    } else if (area <= 64) {
      consumables = 1350; // Mellan montrar (5x5 - 8x8)
    } else {
      consumables = 2000; // Stora montrar (>8x8)
    }
    
    return {
      buildHours: totalBuildHours,
      demolitionHours,
      buildCost,
      demolitionCost,
      adminFee,
      consumables,
      persons,
      area: area
    };
  };
  
  // √Öterst√§ll disk markers n√§r man byter disktyp
  // React.useEffect(() => { 
  //   setCounterMarkersVisible(true); 
  //   setCounters([]);
  // }, [counterType]);

  return (
    <div className="app-container" data-unused={__unused_refs.length} style={{ 
      width: '100vw', 
      height: '100vh', 
      background: '#f0f0f0', 
      position: 'relative',
      display: 'flex',
      flexDirection: 'row' // Always side by side
    }}>
      
      {/* Mobile Development Notice */}
      {window.innerWidth <= 768 && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100%',
          background: 'linear-gradient(90deg, #ff9500 0%, #ffa726 100%)',
          color: 'white',
          padding: '8px',
          textAlign: 'center',
          fontSize: '12px',
          fontWeight: '600',
          zIndex: 10000,
          boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
        }}>
          üì± Mobilversion under uppbyggnad - Anv√§nd desktop f√∂r b√§sta upplevelse
        </div>
      )}
      
      {/* 3D Canvas Container */}
      <div className="canvas-container" style={{
        flex: window.innerWidth <= 768 ? '0.6' : '1',
        position: 'relative',
        background: '#f0f0f0'
      }}>
      {/* Floating live packlista (always visible) - DOLD */}
      <div id="packlista-floating" style={{ position: 'fixed', left: 340, top: 12, width: 200, padding: 8, background: '#fff', border: '1px solid #ddd', borderRadius: 6, boxShadow: '0 6px 20px rgba(0,0,0,0.12)', zIndex: 1201, display: 'none' }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 6 }}>
          <div style={{ fontWeight: 700, fontSize: 13 }}>Packlista</div>
          <button
            aria-label={floatingPacklistCollapsed ? 'Visa packlista' : 'Minimera packlista'}
            title={floatingPacklistCollapsed ? 'Visa' : 'Minimera'}
            onClick={() => setFloatingPacklistCollapsed(!floatingPacklistCollapsed)}
            style={{ width: 26, height: 26, padding: 0, borderRadius: '50%', border: 'none', background: '#007acc', color: '#fff', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: 14, lineHeight: '18px', cursor: 'pointer', boxShadow: '0 2px 6px rgba(0,0,0,0.12)', zIndex: 1302 }}
          >{floatingPacklistCollapsed ? '+' : '‚àí'}</button>
        </div>
        {!floatingPacklistCollapsed && (() => {
          const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
          const floorW = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
          const floorD = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
          const pack = computePacklista(wallShape, floorW, floorD, wallHeight, storages);
          // compute visible shelf brackets (the small horizontal brackets under WallShelf)
          // compute SAM-led as total wall length in meters according to wallShape
          const computeSamLedFromWallLength = () => {
            const wallsToSum: Array<'back'|'left'|'right'> = [];
            if (wallShape === 'straight') wallsToSum.push('back');
            else if (wallShape === 'l') { wallsToSum.push('back'); wallsToSum.push('left'); }
            else if (wallShape === 'u') { wallsToSum.push('back'); wallsToSum.push('left'); wallsToSum.push('right'); }
            let sum = 0;
            for (const w of wallsToSum) {
              sum += (w === 'back') ? floorW : floorD;
            }
            return Math.round(sum); // integer number of meters
          };
          const visibleBrackets = computeSamLedFromWallLength();
          const totals = Object.assign({}, pack.totals || {});
          // Ensure disk innehylla from placed counters is visible in floating packlista
          try {
            const diskCount = (counters || []).length * 2;
            if (diskCount > 0) (totals as any)['disk innehylla'] = ((totals as any)['disk innehylla'] || 0) + diskCount;
          } catch (e) {}
          // show SAM-led as number of vertical brackets (one per bracket) only when lights are enabled
          if (visibleBrackets > 0 && showLights) totals['SAM-led'] = visibleBrackets;
          // add carpet info as misc entry when selected
          if (carpetIndex !== 0) {
            const selectedCarpet = CARPET_COLORS[carpetIndex];
            const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
            const floorW = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
            const floorD = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
            (totals as any)['Matta'] = `${floorW}√ó${floorD} ${selectedCarpet.name}`;
          }
          // add chosen graphic label to totals (e.g. Hyr grafik, Eget tryck (forex), Eget tryck (vepa))
          if (graphic && graphic !== 'none') {
            const g = GRAPHICS.find(gr => gr.value === graphic);
            if (g) (totals as any)['Grafik'] = g.label;
          }
          // When using hyr grafik, add wall-area entries to packlista
          if (graphic === 'hyr') {
            const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
            const fw = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
            const fd = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
            const backArea = Math.round((fw * wallHeight) * 10) / 10;
            const sideArea = Math.round((fd * wallHeight) * 10) / 10;
            if (fw > 0) (totals as any)['Hyrgrafik bakv√§gg'] = `${backArea} kvm (${fw}m √ó ${wallHeight}m)`;
            if ((wallShape === 'l' || wallShape === 'u') && fd > 0) (totals as any)['Hyrgrafik v√§nster v√§gg'] = `${sideArea} kvm (${fd}m √ó ${wallHeight}m)`;
            if (wallShape === 'u' && fd > 0) (totals as any)['Hyrgrafik h√∂ger v√§gg'] = `${sideArea} kvm (${fd}m √ó ${wallHeight}m)`;
          }
          // When using vepa, add wall-area entries to packlista
          if (graphic === 'vepa') {
            const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
            const fw = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
            const fd = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
            const backArea = Math.round((fw * wallHeight) * 10) / 10;
            const sideArea = Math.round((fd * wallHeight) * 10) / 10;
            if (uploadedImage && fw > 0) (totals as any)['Vepa bakv√§gg'] = `${backArea} kvm (${fw}m √ó ${wallHeight}m)`;
            if ((wallShape === 'l' || wallShape === 'u') && uploadedImageLeft && fd > 0) (totals as any)['Vepa v√§nster v√§gg'] = `${sideArea} kvm (${fd}m √ó ${wallHeight}m)`;
            if (wallShape === 'u' && uploadedImageRight && fd > 0) (totals as any)['Vepa h√∂ger v√§gg'] = `${sideArea} kvm (${fd}m √ó ${wallHeight}m)`;
          }
          // add small items (espresso, flower, candy bowl) when selected
          if (showEspressoMachine) totals['Espressomaskin'] = (totals['Espressomaskin'] || 0) + 1;
          if (showFlowerVase) totals['Blomma'] = (totals['Blomma'] || 0) + 1;
          if (showCandyBowl) totals['Godisk√•l'] = (totals['Godisk√•l'] || 0) + 1;
          // add TV counts to live totals
          if ((tvs || []).length > 0) {
            const tvCounts: Record<string, number> = {};
            (tvs || []).forEach(tv => {
              const label = TV_SIZES[tv.size]?.label || 'Ok√§nd';
              tvCounts[label] = (tvCounts[label] || 0) + 1;
            });
            Object.keys(tvCounts).forEach(lbl => {
              (totals as any)[`TV ${lbl}`] = ((totals as any)[`TV ${lbl}`] || 0) + tvCounts[lbl];
            });
          }
          // add plant counts to live totals
          if ((plants || []).length > 0) {
            const plantCounts: Record<string, number> = {};
            (plants || []).forEach(p => {
              const label = PLANT_TYPES[p.type]?.label || 'Ok√§nd';
              plantCounts[label] = (plantCounts[label] || 0) + 1;
            });
            Object.keys(plantCounts).forEach(lbl => {
              (totals as any)[lbl] = ((totals as any)[lbl] || 0) + plantCounts[lbl];
            });
          }
          // add wall shelf counts: one hyllplan per shelf and two brackets per shelf
          if ((wallShelves || []).length > 0) {
            const shelfCount = (wallShelves || []).length;
            (totals as any)['Hyllplan'] = ((totals as any)['Hyllplan'] || 0) + shelfCount;
            (totals as any)['Hyllbracket'] = ((totals as any)['Hyllbracket'] || 0) + (shelfCount * 2);
          }
          // add furniture counts to live totals
          if ((furniture || []).length > 0) {
            const furnCounts: Record<string, number> = {};
            (furniture || []).forEach(f => {
              const label = FURNITURE_TYPES[f.type]?.label || 'Ok√§nd';
              furnCounts[label] = (furnCounts[label] || 0) + 1;
            });
            Object.keys(furnCounts).forEach(lbl => {
              (totals as any)[lbl] = ((totals as any)[lbl] || 0) + furnCounts[lbl];
            });
          }
          // add speaker counts: one h√∂gtalare and one h√∂gtalarstativ per placed speaker
          if ((speakers || []).length > 0) {
            const sCount = (speakers || []).length;
            (totals as any)['H√∂gtalare'] = ((totals as any)['H√∂gtalare'] || 0) + sCount;
            (totals as any)['H√∂gtalarstativ'] = ((totals as any)['H√∂gtalarstativ'] || 0) + sCount;
          }
          // add clothing rack entry when toggled
          if (showClothingRacks) {
            (totals as any)['Kl√§dh√§ngare'] = ((totals as any)['Kl√§dh√§ngare'] || 0) + 1;
          }
          // Add counters/disk parts to live totals (one-to-one with placed counters)
          try {
            (counters || []).forEach((counter) => {
              const cfg = COUNTER_TYPES[counter.type];
              if (!cfg) return;
              const add = (key: string, n = 1) => { (totals as any)[key] = ((totals as any)[key] || 0) + n; };

              // Helper: increment matching grafik entries for a frame size
              const addGrafik = (frameKey: string, n = 1) => {
                // frameKey expected like 'Bematrix ram 1x1' -> Grafik 1x1
                const m = frameKey.match(/(\d+,?\d*)x(\d+,?\d*)/);
                if (m) {
                  const gx = `${m[1].replace('.', ',')}x${m[2].replace('.', ',')}`;
                  add(`Grafik ${gx}`, n);
                }
              };

              if (cfg.type === 'L' || cfg.type === 'L-mirrored') {
                add('Bematrix ram 0,5x2', 4);
                add('Bematrix ram 1,5x1', 1);
                add('Bematrix ram 1x1', 1);
                add('Barskiva 1,5x0,5', 1);
                add('Barskiva 1x0,5', 1);
                add('Lister forex', 4);
                add('Corners', 3);
                add('M8pin', 10);
                add('Special connector', 4);
                addGrafik('Bematrix ram 0,5x2', 4);
                addGrafik('Bematrix ram 1,5x1', 1);
                addGrafik('Bematrix ram 1x1', 1);
              } else {
                switch (cfg.width) {
                  case 1:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 1x1', 1);
                    add('Barskiva 1x0,5', 1);
                    add('Lister forex', 4);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 1x1', 1);
                    break;
                  case 1.5:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 1,5x1', 1);
                    add('Barskiva 1,5x0,5', 1);
                    add('Lister forex', 4);
                    add('Corners', 2);
                    add('M8pin', 6);
                    add('Special connector', 2);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 1,5x1', 1);
                    break;
                  case 2:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 2x1', 1);
                    add('Barskiva 2x0,5', 1);
                    add('Lister forex', 4);
                    add('Corners', 2);
                    add('M8pin', 6);
                    add('Special connector', 2);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 2x1', 1);
                    break;
                  case 2.5:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 2,5x1', 1);
                    add('Barskiva 2,5x0,5', 1);
                    add('Lister forex', 4);
                    add('Corners', 2);
                    add('M8pin', 6);
                    add('Special connector', 2);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 2,5x1', 1);
                    break;
                  case 3:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 3x1', 1);
                    add('Barskiva 3x0,5', 1);
                    add('Lister forex', 4);
                    add('Corners', 2);
                    add('M8pin', 6);
                    add('Special connector', 2);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 3x1', 1);
                    break;
                  case 3.5:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 2x1', 1);
                    add('Bematrix ram 1,5x1', 1);
                    add('Connectors', 2);
                    add('Barskiva 3,5x0,5', 1);
                    add('Lister forex', 4);
                    add('Corners', 2);
                    add('M8pin', 6);
                    add('Special connector', 2);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 2x1', 1);
                    addGrafik('Bematrix ram 1,5x1', 1);
                    break;
                  case 4:
                    add('Bematrix ram 0,5x2', 2);
                    add('Bematrix ram 2x1', 2);
                    add('Connectors', 2);
                    add('Barskiva 4x0,5', 1);
                    add('Lister forex', 4);
                    add('Corners', 2);
                    add('M8pin', 6);
                    add('Special connector', 2);
                    addGrafik('Bematrix ram 0,5x2', 2);
                    addGrafik('Bematrix ram 2x1', 2);
                    break;
                  default:
                    break;
                }
              }
              // Add two disk innehylla per placed disk
              add('disk innehylla', 2);
            });
          } catch (e) {
            // ignore any runtime issues while building live totals
          }
          // Truss BOM for live totals based on selected truss type
          try {
            const sel = TRUSS_TYPES[selectedTrussType];
            if (sel.type === 'hanging-square') {
              // Truss fyrkant: 2m truss x4, vajer x4, trusslampa x4
              (totals as any)['Truss 2m'] = ((totals as any)['Truss 2m'] || 0) + 4;
              (totals as any)['Vajer upph√§ngning'] = ((totals as any)['Vajer upph√§ngning'] || 0) + 4;
              (totals as any)['Trusslampa'] = ((totals as any)['Trusslampa'] || 0) + 4;
            } else if (sel.type === 'hanging-round') {
              // Rund truss: 90deg segments x4, vajer x4, trusslampa x6
              (totals as any)['Truss rund 90grader'] = ((totals as any)['Truss rund 90grader'] || 0) + 4;
              (totals as any)['Vajer upph√§ngning'] = ((totals as any)['Vajer upph√§ngning'] || 0) + 4;
              (totals as any)['Trusslampa'] = ((totals as any)['Trusslampa'] || 0) + 6;
            } else if (sel.type === 'front-straight') {
              // Framkant truss: split into 2m + 1m segments to cover front width
              const frontWidth = floorIndex !== null ? (FLOOR_SIZES[floorIndex].custom ? customFloorWidth : FLOOR_SIZES[floorIndex].width) : 0;
              // prefer 2m segments as many as possible, remainder as 1m
              const twoMeterCount = Math.floor(frontWidth / 2);
              const remainder = frontWidth - (twoMeterCount * 2);
              const oneMeterCount = Math.round(remainder); // either 0 or 1 usually
              if (twoMeterCount > 0) (totals as any)['Truss 2m'] = ((totals as any)['Truss 2m'] || 0) + twoMeterCount;
              if (oneMeterCount > 0) (totals as any)['Truss 1m'] = ((totals as any)['Truss 1m'] || 0) + oneMeterCount;
              (totals as any)['Vajer upph√§ngning'] = ((totals as any)['Vajer upph√§ngning'] || 0) + 4;
              // trusslampor: 1 per meter
              const lampCount = Math.round(frontWidth);
              if (lampCount > 0) (totals as any)['Trusslampa'] = ((totals as any)['Trusslampa'] || 0) + lampCount;
            }
          } catch (e) {
            // ignore
          }
          // Counters: (removed) disk-related packlist augmentation handled elsewhere; kept UI clean
          const frameKeys = Object.keys(totals).filter(k => k.includes('x')).sort();
          const miscKeys = Object.keys(totals).filter(k => !k.includes('x') && k !== 'SAM-led').sort();
          if (frameKeys.length === 0 && miscKeys.length === 0) return <div style={{ fontSize: 12, color: '#666' }}>Inga ramar</div>;
          return (
            <div style={{ display: 'flex', flexDirection: 'column', gap: 6 }}>
              {frameKeys.map(k => (
                <div key={k} style={{ display: 'flex', justifyContent: 'space-between', fontSize: 13 }}>
                  <div style={{ color: '#222' }}>{k.replace('.', ',')}</div>
                  <div style={{ color: '#007acc', fontWeight: 700 }}>{(totals as any)[k]}st</div>
                </div>
              ))}
              {miscKeys.map(k => (
                <div key={k} style={{ display: 'flex', justifyContent: 'space-between', fontSize: 13 }}>
                  <div style={{ color: '#444' }}>{k.replace('_', ' ')}</div>
                  <div style={{ color: '#007acc', fontWeight: 700 }}>{(totals as any)[k]}</div>
                </div>
              ))}
              {/* show SAM-led as misc key if present */}
              {totals['SAM-led'] ? (
                <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: 13 }}>
                  <div style={{ color: '#444' }}>SAM-led</div>
                  <div style={{ color: '#007acc', fontWeight: 700 }}>{totals['SAM-led']}st</div>
                </div>
              ) : null}
              {/* per-storage breakdown */}
              {([].concat(...Object.keys(pack.perWall || {}).map(k => (pack.perWall[k].storages || []))) || []).map((s: any) => (
                <div key={s.id || Math.random()} style={{ fontSize: 12, color: '#666', marginTop: 6 }}>
                  F√∂rr√•d {s.id ?? ''}: {s.width}x{s.depth} {s.cornerPlacement ? '(h√∂rn)' : ''}
                </div>
              ))}
            </div>
          );
        })()}
      </div>

      {/* Floating price box (separate from main interface) - DOLD */}
      <div id="price-floating" style={{ position: 'fixed', left: 560, top: 12, width: 280, padding: 12, background: '#fff', border: '2px solid #007acc', borderRadius: 8, boxShadow: '0 8px 24px rgba(0,0,0,0.15)', zIndex: 1200, display: 'none' }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', marginBottom: 8 }}>
          <div style={{ fontWeight: 700, fontSize: 16, color: '#007acc', display: 'flex', alignItems: 'center', gap: 6 }}>
            üí∞ Prissamanst√§llning
          </div>
          <button
            aria-label={floatingPriceCollapsed ? 'Visa prissamanst√§llning' : 'Minimera prissamanst√§llning'}
            title={floatingPriceCollapsed ? 'Visa' : 'Minimera'}
            onClick={() => setFloatingPriceCollapsed(!floatingPriceCollapsed)}
            style={{ width: 28, height: 28, padding: 0, borderRadius: '50%', border: 'none', background: '#007acc', color: '#fff', display: 'flex', alignItems: 'center', justifyContent: 'center', fontSize: 16, lineHeight: '20px', cursor: 'pointer', boxShadow: '0 2px 8px rgba(0,0,0,0.15)' }}
          >{floatingPriceCollapsed ? '+' : '‚àí'}</button>
        </div>
        {!floatingPriceCollapsed && floorIndex !== null && (() => {
          const materialCost = calculatePrice();
          const laborCosts = calculateLaborCosts();
          const subtotal = materialCost + laborCosts.buildCost + laborCosts.demolitionCost + laborCosts.adminFee + laborCosts.consumables;
          const markup = Math.round(subtotal * 0.15);
          const totalCost = subtotal + markup;
          
          return (
            <div style={{ fontSize: 13, lineHeight: 1.4 }}>
              {/* Material & uthyrning */}
              <div style={{ marginBottom: 6, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ color: '#666' }}>Material & uthyrning:</span>
                <span style={{ fontWeight: 600 }}>{materialCost.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Upps√§ttning */}
              <div style={{ marginBottom: 6, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ color: '#666' }}>Upps√§ttning ({laborCosts.persons} pers √ó {laborCosts.buildHours}h):</span>
                <span style={{ fontWeight: 600 }}>{laborCosts.buildCost.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Nedmontering */}
              <div style={{ marginBottom: 6, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ color: '#666' }}>Nedmontering ({laborCosts.persons} pers √ó {laborCosts.demolitionHours}h):</span>
                <span style={{ fontWeight: 600 }}>{laborCosts.demolitionCost.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* F√∂rbrukningsmaterial */}
              <div style={{ marginBottom: 6, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ color: '#666' }}>F√∂rbrukningsmaterial:</span>
                <span style={{ fontWeight: 600 }}>{laborCosts.consumables.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Skissavgift */}
              <div style={{ marginBottom: 10, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ color: '#666' }}>Skissavgift:</span>
                <span style={{ fontWeight: 600 }}>{laborCosts.adminFee.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Subtotal */}
              <div style={{ marginBottom: 8, paddingTop: 8, borderTop: '1px solid #ddd', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ fontWeight: 600 }}>Subtotal:</span>
                <span style={{ fontWeight: 700 }}>{subtotal.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Projektledning */}
              <div style={{ marginBottom: 12, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <span style={{ color: '#666' }}>Projektledning (15%):</span>
                <span style={{ fontWeight: 600 }}>{markup.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Total */}
              <div style={{ 
                paddingTop: 10, 
                borderTop: '2px solid #007acc', 
                display: 'flex', 
                justifyContent: 'space-between', 
                alignItems: 'center' 
              }}>
                <span style={{ fontSize: 16, fontWeight: 700, color: '#007acc' }}>TOTALT:</span>
                <span style={{ fontSize: 18, fontWeight: 700, color: '#28a745' }}>{totalCost.toLocaleString('sv-SE')} kr</span>
              </div>
              
              {/* Footer note */}
              <div style={{ marginTop: 8, fontSize: 11, color: '#888', textAlign: 'center' }}>
                Priser exkl. moms
              </div>
            </div>
          );
        })()}
        {floorIndex === null && !floatingPriceCollapsed && (
          <div style={{ fontSize: 13, color: '#888', textAlign: 'center', padding: '12px 0' }}>
            V√§lj en monterstorlek f√∂r att se prissamanst√§llning
          </div>
        )}
      </div>

      {/* Sidopanel */}
      <div className="controls-container" style={{
        position: 'fixed',
        left: 0,
        top: 0,
        width: window.innerWidth <= 768 ? '20vw' : '320px',
        height: '100vh',
        maxHeight: '100vh',
        boxSizing: 'border-box',
        background: 'linear-gradient(135deg, #f8fbff 0%, #e8f4fd 100%)',
        backdropFilter: 'blur(12px)',
        borderRight: '2px solid #e1e8ed',
        boxShadow: '8px 0 32px rgba(0, 0, 0, 0.08)',
        padding: window.innerWidth <= 768 ? '12px' : '24px',
        paddingBottom: 56, // extra space so bottom controls (t.ex. Lampor) aren't hidden under edge
        display: 'flex',
        flexDirection: 'column',
        gap: 0, // Remove gap, use marginTop instead for better control
        zIndex: 1000,
        overflowY: 'auto', // L√§gg till scrollning
        overflowX: 'hidden',
        WebkitOverflowScrolling: 'touch',
        fontSize: window.innerWidth <= 768 ? '12px' : '14px'
      }}>
        <div style={{
          position: 'sticky',
          top: 0,
          background: 'linear-gradient(135deg, #3498db 0%, #2980b9 100%)',
          margin: window.innerWidth <= 768 ? '-12px -12px 12px -12px' : '-24px -24px 24px -24px',
          padding: window.innerWidth <= 768 ? '12px' : '20px 24px',
          borderRadius: '0 0 12px 12px',
          zIndex: 10
        }}>
          <h2 style={{
            fontWeight: 700, 
            fontSize: window.innerWidth <= 768 ? '16px' : '20px', 
            margin: 0,
            color: 'white',
            textShadow: '0 1px 2px rgba(0,0,0,0.2)'
          }}>üèóÔ∏è Monterval</h2>
        </div>
        <div style={{ marginTop: '16px' }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '8px',
            display: 'block'
          }}>Monterstorlek:</label>
          
          <CustomDropdown
            options={FLOOR_SIZES.filter(floor => floor.custom).map((floor, index) => ({ ...floor, value: FLOOR_SIZES.length - 1 }))}
            value={floorIndex ?? ''}
            onChange={(value) => setFloorIndex(value === '' ? null : Number(value))}
            placeholder="Anpassad storlek"
            renderOption={(option) => (
              <>
                {option.image ? (
                  <img 
                    src={option.image} 
                    alt={option.label}
                    style={{
                      width: '24px',
                      height: '24px',
                      objectFit: 'contain',
                      marginRight: '8px'
                    }}
                  />
                ) : (
                  <span style={{ 
                    display: 'inline-block',
                    width: '24px',
                    height: '24px',
                    marginRight: '8px',
                    textAlign: 'center',
                    lineHeight: '24px',
                    fontSize: '12px',
                    color: '#999'
                  }}>
                    {option.value === '' ? '‚Äî' : 'üìê'}
                  </span>
                )}
                {option.label}
              </>
            )}
            style={{ width: '100%' }}
          />
        </div>
        
        {/* Anpassad storlek input-f√§lt */}
        {floorIndex !== null && FLOOR_SIZES[floorIndex]?.custom && (
          <div style={{marginTop: '10px'}}>
            {/* Bredd och djup f√§lt */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: '1fr 1fr',
              gap: '16px',
              marginTop: '12px',
              padding: '16px',
              backgroundColor: '#f8fbff',
              borderRadius: '8px',
              border: '2px solid #e8f4fd'
            }}>
              <div>
                <label style={{ 
                  fontWeight: 600, 
                  fontSize: '14px', 
                  color: '#2c3e50',
                  marginBottom: '6px',
                  display: 'block'
                }}>Bredd:</label>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <input 
                    type="number" 
                    value={customFloorWidth} 
                    onChange={e => setCustomFloorWidth(Math.max(1, Math.min(15, parseFloat(e.target.value) || 1)))}
                    step="0.5"
                    min="1"
                    max="15"
                    style={{
                      width: '80px',
                      padding: '8px 12px',
                      border: '2px solid #e1e8ed',
                      borderRadius: '8px',
                      fontSize: '14px',
                      fontWeight: 500,
                      background: 'white',
                      color: '#2c3e50',
                      transition: 'all 0.2s ease',
                      outline: 'none'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = '#3498db';
                      e.target.style.boxShadow = '0 0 0 3px rgba(52, 152, 219, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#e1e8ed';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                  <span style={{ fontSize: '14px', fontWeight: 500, color: '#7f8c8d' }}>m</span>
                </div>
              </div>
              
              <div>
                <label style={{ 
                  fontWeight: 600, 
                  fontSize: '14px', 
                  color: '#2c3e50',
                  marginBottom: '6px',
                  display: 'block'
                }}>Djup:</label>
                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                  <input 
                    type="number" 
                    value={customFloorDepth} 
                    onChange={e => setCustomFloorDepth(Math.max(1, Math.min(15, parseFloat(e.target.value) || 1)))}
                    step="0.5"
                    min="1" 
                    max="15"
                    style={{
                      width: '80px',
                      padding: '8px 12px',
                      border: '2px solid #e1e8ed',
                      borderRadius: '8px',
                      fontSize: '14px',
                      fontWeight: 500,
                      background: 'white',
                      color: '#2c3e50',
                      transition: 'all 0.2s ease',
                      outline: 'none'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = '#3498db';
                      e.target.style.boxShadow = '0 0 0 3px rgba(52, 152, 219, 0.1)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = '#e1e8ed';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                  <span style={{ fontSize: '14px', fontWeight: 500, color: '#7f8c8d' }}>m</span>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {floorIndex !== null && <>
        <div style={{ marginTop: '16px' }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '8px',
            display: 'block'
          }}>Matta/f√§rg:</label>
          
          <CustomDropdown
            options={CARPET_COLORS.map((color, index) => ({ ...color, value: index }))}
            value={carpetIndex}
            onChange={(value) => setCarpetIndex(value)}
            placeholder="V√§lj mattf√§rg"
            renderOption={(option) => (
              <>
                {option.color === null ? (
                  <>
                    <span style={{ 
                      display: 'inline-block', 
                      width: '20px', 
                      height: '20px', 
                      marginRight: '8px',
                      fontSize: '16px'
                    }}>‚ùå</span>
                    {option.name}
                  </>
                ) : option.color?.startsWith('checkerboard') ? (
                  <>
                    <div style={{
                      width: '20px',
                      height: '20px',
                      marginRight: '8px',
                      background: option.color === 'checkerboard-bw' 
                        ? 'repeating-conic-gradient(#000 0deg 90deg, #fff 90deg 180deg)'
                        : option.color === 'checkerboard-rb'
                        ? 'repeating-conic-gradient(#e74c3c 0deg 90deg, #000 90deg 180deg)'
                        : option.color === 'checkerboard-bwhite'
                        ? 'repeating-conic-gradient(#3498db 0deg 90deg, #fff 90deg 180deg)'
                        : 'repeating-conic-gradient(#f1c40f 0deg 90deg, #000 90deg 180deg)',
                      border: '1px solid #ddd',
                      borderRadius: '4px'
                    }} />
                    {option.name}
                  </>
                ) : (
                  <>
                    <div style={{
                      width: '20px',
                      height: '20px',
                      marginRight: '8px',
                      backgroundColor: option.color,
                      border: '1px solid #ddd',
                      borderRadius: '4px'
                    }} />
                    {option.name}
                  </>
                )}
              </>
            )}
            style={{ width: '100%' }}
          />
        </div>
        <div style={{ marginTop: '16px' }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '8px',
            display: 'block'
          }}>Bakv√§ggsform:</label>
          
          <CustomDropdown
            options={WALL_SHAPES}
            value={wallShape}
            onChange={(value) => setWallShape(value)}
            placeholder="V√§lj v√§ggform"
            renderOption={(option) => (
              <>
                {option.image ? (
                  <img 
                    src={option.image} 
                    alt={option.label}
                    style={{
                      width: '32px',
                      height: '24px',
                      objectFit: 'contain',
                      marginRight: '8px'
                    }}
                  />
                ) : (
                  <span style={{ 
                    display: 'inline-block',
                    width: '32px',
                    height: '24px',
                    marginRight: '8px',
                    textAlign: 'center',
                    lineHeight: '24px',
                    fontSize: '12px',
                    color: '#999'
                  }}>
                    ‚Äî
                  </span>
                )}
                {option.label}
              </>
            )}
            style={{ width: '100%' }}
          />
        </div>
        <div style={{ marginTop: '16px' }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '8px',
            display: 'block'
          }}>V√§gg-h√∂jd:</label>
          
          <CustomDropdown
            options={WALL_HEIGHTS}
            value={wallHeight}
            onChange={(value) => setWallHeight(value)}
            placeholder="V√§lj h√∂jd"
            renderOption={(option) => (
              <>
                <span style={{ 
                  display: 'inline-block',
                  width: '24px',
                  height: '24px',
                  marginRight: '8px',
                  textAlign: 'center',
                  lineHeight: '24px',
                  fontSize: '16px',
                  color: '#666'
                }}>
                  üìè
                </span>
                {option.label}
              </>
            )}
            style={{ width: '100%' }}
          />
        </div>
        {/* Lampor: flyttad placering i menyn - ligger nu ovanf√∂r Grafik */}
        <div style={{
          marginTop: '16px',
          padding: '16px',
          backgroundColor: '#f8fbff',
          borderRadius: '8px',
          border: '2px solid #e8f4fd',
          minHeight: '60px',
          overflow: 'visible',
          position: 'relative'
        }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '12px',
            display: 'block'
          }}>Lampor:</label>
          
          <label style={{
            display: 'flex',
            alignItems: 'center',
            cursor: 'pointer',
            gap: '12px',
            padding: '12px 0',
            margin: 0,
            width: '100%'
          }}>
            <input 
              type="checkbox" 
              checked={showLights} 
              onChange={e => setShowLights(e.target.checked)}
              style={{
                width: '20px',
                height: '20px',
                margin: 0,
                cursor: 'pointer',
                accentColor: '#3498db',
                flexShrink: 0
              }}
            />
            <span style={{
              fontSize: '14px',
              fontWeight: 500,
              color: '#2c3e50',
              userSelect: 'none',
              flex: 1
            }}>SAM-LED</span>
          </label>
        </div>
        {/* Gamla upload-knappar - nu ersatta av VepaPDFGenerator */}
        {graphic === 'vepa' && false && (
          <div style={{ marginTop: '16px' }}>
            <label style={{ 
              fontWeight: 600, 
              fontSize: '14px',
              color: '#2c3e50',
              marginBottom: '8px',
              display: 'block'
            }}>Ladda upp egen bild f√∂r bakv√§gg:</label>
            <input 
              type="file" 
              accept="image/*"
              onChange={e => {
                const file = e.target.files?.[0];
                if (file) {
                  const reader = new FileReader();
                  reader.onload = (event) => {
                    setUploadedImage(event.target?.result as string);
                  };
                  reader.readAsDataURL(file);
                }
              }}
              style={{ 
                fontSize: '14px', 
                marginBottom: '8px',
                padding: '8px',
                border: '2px solid #e1e8ed',
                borderRadius: '8px',
                width: '100%',
                background: 'white'
              }}
            />
            {uploadedImage && (
              <div style={{ fontSize: 12, color: '#666' }}>‚úì Bakv√§ggsbild uppladdad</div>
            )}
            
            {(wallShape === 'l' || wallShape === 'u') && (
              <>
                <label style={{ fontWeight: 600, marginBottom: 8, display: 'block', marginTop: 16 }}>Ladda upp egen bild f√∂r v√§nster v√§gg:</label>
                <input 
                  type="file" 
                  accept="image/*"
                  onChange={e => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (event) => {
                        setUploadedImageLeft(event.target?.result as string);
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                  style={{ fontSize: 12, marginBottom: 8 }}
                />
                {uploadedImageLeft && (
                  <div style={{ fontSize: 12, color: '#666' }}>‚úì V√§nster v√§ggbild uppladdad</div>
                )}
              </>
            )}
            
            {wallShape === 'u' && (
              <>
                <label style={{ fontWeight: 600, marginBottom: 8, display: 'block', marginTop: 16 }}>Ladda upp egen bild f√∂r h√∂ger v√§gg:</label>
                <input 
                  type="file" 
                  accept="image/*"
                  onChange={e => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (event) => {
                        setUploadedImageRight(event.target?.result as string);
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                  style={{ fontSize: 12, marginBottom: 8 }}
                />
                {uploadedImageRight && (
                  <div style={{ fontSize: 12, color: '#666' }}>‚úì H√∂ger v√§ggbild uppladdad</div>
                )}
              </>
            )}
          </div>
        )}
        {/* GAMMAL FOREX BILDUPPLADDNING - DOLD, anv√§nd nu ForexPDFGenerator ist√§llet */}
        {false && graphic === 'forex' && (
          <div>
            <label style={{ fontWeight: 600, marginBottom: 8, display: 'block' }}>Ladda upp egen bild f√∂r bakv√§gg (forex med silvriga lister):</label>
            <input 
              type="file" 
              accept="image/*"
              onChange={e => {
                const file = e.target.files?.[0];
                if (file) {
                  const reader = new FileReader();
                  reader.onload = (event) => {
                    setForexImageBack(event.target?.result as string);
                  };
                  reader.readAsDataURL(file);
                }
              }}
              style={{ fontSize: 12, marginBottom: 8 }}
            />
            {forexImageBack && (
              <div style={{ fontSize: 12, color: '#666' }}>‚úì Forex bakv√§ggsbild uppladdad</div>
            )}
            
            {(wallShape === 'l' || wallShape === 'u') && (
              <>
                <label style={{ fontWeight: 600, marginBottom: 8, display: 'block', marginTop: 16 }}>Ladda upp egen bild f√∂r v√§nster v√§gg (forex):</label>
                <input 
                  type="file" 
                  accept="image/*"
                  onChange={e => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (event) => {
                        setForexImageLeft(event.target?.result as string);
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                  style={{ fontSize: 12, marginBottom: 8 }}
                />
                {forexImageLeft && (
                  <div style={{ fontSize: 12, color: '#666' }}>‚úì Forex v√§nster v√§ggbild uppladdad</div>
                )}
              </>
            )}
            
            {wallShape === 'u' && (
              <>
                <label style={{ fontWeight: 600, marginBottom: 8, display: 'block', marginTop: 16 }}>Ladda upp egen bild f√∂r h√∂ger v√§gg (forex):</label>
                <input 
                  type="file" 
                  accept="image/*"
                  onChange={e => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (event) => {
                        setForexImageRight(event.target?.result as string);
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                  style={{ fontSize: 12, marginBottom: 8 }}
                />
                {forexImageRight && (
                  <div style={{ fontSize: 12, color: '#666' }}>‚úì Forex h√∂ger v√§ggbild uppladdad</div>
                )}
              </>
            )}
          </div>
        )}
        <div style={{ marginTop: '16px' }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '8px',
            display: 'block'
          }}>Grafik:</label>
          
          <CustomDropdown
            options={GRAPHICS}
            value={graphic}
            onChange={(value) => setGraphic(value)}
            placeholder="V√§lj grafik"
            renderOption={(option) => (
              <>
                <span style={{ 
                  display: 'inline-block',
                  width: '24px',
                  height: '24px',
                  marginRight: '8px',
                  textAlign: 'center',
                  lineHeight: '24px',
                  fontSize: '16px',
                  color: '#666'
                }}>
                  üé®
                </span>
                {option.label}
              </>
            )}
            style={{ width: '100%' }}
          />
          
          {/* VEPA PDF Generator knapp */}
          {graphic === 'vepa' && wallShape && wallShape !== '' && (
            <div style={{ marginTop: '12px' }}>
              <button
                onClick={() => setShowVepaPDFGenerator(true)}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  backgroundColor: '#4CAF50',
                  color: '#fff',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontWeight: 600,
                  fontSize: '14px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                  transition: 'all 0.2s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#45a049';
                  e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#4CAF50';
                  e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                }}
              >
                <span>üé®</span>
                <span>Skapa VEPA tryckfiler</span>
              </button>
              <div style={{
                fontSize: '12px',
                color: '#666',
                marginTop: '8px',
                textAlign: 'center'
              }}>
                Designa och ladda ner print-ready PDF:er
              </div>
            </div>
          )}
          
          {/* Forex PDF Generator knapp */}
          {graphic === 'forex' && wallShape && wallShape !== '' && (
            <div style={{ marginTop: '12px' }}>
              <button
                onClick={() => setShowForexPDFGenerator(true)}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  backgroundColor: '#FF9800',
                  color: '#fff',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontWeight: 600,
                  fontSize: '14px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                  transition: 'all 0.2s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#F57C00';
                  e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#FF9800';
                  e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                }}
              >
                <span>üñºÔ∏è</span>
                <span>Skapa FOREX tryckfiler</span>
              </button>
              <div style={{
                fontSize: '12px',
                color: '#666',
                marginTop: '8px',
                textAlign: 'center'
              }}>
                Rambaserade Forex-skyltar med sk√§rstreck
              </div>
            </div>
          )}
        </div>
        <div style={{ marginTop: '16px' }}>
          <label style={{ 
            fontWeight: 600, 
            fontSize: '14px',
            color: '#2c3e50',
            marginBottom: '8px',
            display: 'block'
          }}>Diskar:</label>
          
          <InstructionCard
            icon="üü¢"
            title="Hantera diskar"
            description="V√§lj disktyp och placera dem genom att klicka p√• gr√∂na rutor. Klicka p√• placerad disk f√∂r att rotera."
            type="success"
          />
          
          {counters.length > 0 && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              Placerade diskar: {counters.length}
              <button
                style={{marginLeft:12, padding:'4px 12px', fontWeight:600, background:'#ff4444', color:'#fff', border:'none', borderRadius:4, cursor:'pointer', fontSize:12}}
                onClick={() => setCounters([])}
              >Rensa alla</button>
            </div>
          )}
          {/* Mark√∂rkontroller - visa alltid n√§r v√§ggar finns */}
          {wallShape && wallShape !== '' && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              {counterMarkersVisible ? (
                <>
                  <div style={{marginBottom:8}}>
                    <label style={{display:'block', marginBottom:4, fontWeight:600}}>V√§lj disktyp:</label>
                    <CustomDropdown
                      options={COUNTER_TYPES.slice(1).map((counter, index) => ({ ...counter, value: index + 1 }))}
                      value={selectedCounterType}
                      onChange={(value) => setSelectedCounterType(value)}
                      placeholder="V√§lj disktyp"
                      renderOption={(option) => (
                        <>
                          {option.image ? (
                            <img 
                              src={option.image} 
                              alt={option.label}
                              style={{
                                width: '32px',
                                height: '24px',
                                objectFit: 'contain',
                                marginRight: '8px'
                              }}
                            />
                          ) : (
                            <span style={{ 
                              display: 'inline-block',
                              width: '32px',
                              height: '24px',
                              marginRight: '8px',
                              textAlign: 'center',
                              lineHeight: '24px',
                              fontSize: '12px',
                              color: '#999'
                            }}>
                              üì¶
                            </span>
                          )}
                          {option.label}
                        </>
                      )}
                      style={{ width: '100%' }}
                    />
                  </div>
                  
                  <button
                    style={{padding:'6px 18px', fontWeight:600, background:'#1ec94c', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:15}}
                    onClick={() => setCounterMarkersVisible(false)}
                  >OK</button>
                </>
              ) : (
                <>
                  <button
                    style={{padding:'8px 16px', fontWeight:600, background:'#007acc', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:14, marginTop:8}}
                    onClick={() => setCounterMarkersVisible(true)}
                  >L√§gg till disk</button>
                </>
              )}
            </div>
          )}
          
          {/* Diskobjekt-kontroller */}
          <div style={{ 
            marginTop: 12, 
            padding: '12px', 
            background: 'linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%)', 
            borderRadius: '8px',
            border: '1px solid #dee2e6'
          }}>
            <label style={{ fontWeight: 600, marginRight: 8, fontSize: 14 }}>Objekt p√• diskar:</label>
            
            <InstructionCard
              icon="‚ú®"
              title="Smart objektplacering"
              description="V√§lj vilka objekt som ska visas p√• dina diskar."
              type="info"
            />
            
            <div style={{ display: 'flex', flexDirection: 'column', gap: 6, marginTop: 8 }}>
              <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13 }}>
                <input 
                  type="checkbox" 
                  checked={showEspressoMachine} 
                  onChange={(e) => setShowEspressoMachine(e.target.checked)}
                  style={{ marginRight: 6 }}
                />
                ‚òï Espressomaskin
              </label>
              
              <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13 }}>
                <input 
                  type="checkbox" 
                  checked={showFlowerVase} 
                  onChange={(e) => setShowFlowerVase(e.target.checked)}
                  style={{ marginRight: 6 }}
                />
                üå∏ Vas med blomma
              </label>
              
              <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13 }}>
                <input 
                  type="checkbox" 
                  checked={showCandyBowl} 
                  onChange={(e) => setShowCandyBowl(e.target.checked)}
                  style={{ marginRight: 6 }}
                />
                üç¨ Godisk√•l
              </label>
            </div>
          </div>
        </div>
        {wallShape && wallShape !== '' && (
          <div>
            <label style={{ fontWeight: 600, marginRight: 8 }}>TV-apparater:</label>
            
            <InstructionCard
              icon="üì∫"
              title="Hantera TV-apparater"
              description="V√§lj TV-storlek och placera dem p√• v√§ggarna. Dubbelklicka f√∂r att v√§xla mellan liggande och st√•ende format."
              type="info"
            />
            
            {tvs.length > 0 && (
              <div style={{fontSize:12, color:'#888', marginTop:8}}>
                Placerade TV:ar: {tvs.length}
                <button
                  style={{marginLeft:12, padding:'4px 12px', fontWeight:600, background:'#ff4444', color:'#fff', border:'none', borderRadius:4, cursor:'pointer', fontSize:12}}
                  onClick={() => setTvs([])}
                >Rensa alla</button>
              </div>
            )}
            
            {/* TV-kontroller */}
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              {tvMarkersVisible ? (
                <>
                  <div style={{marginBottom:8}}>
                    <label style={{display:'block', marginBottom:4, fontWeight:600}}>V√§lj TV-storlek:</label>
                    <CustomDropdown
                      options={TV_SIZES.map((tv, index) => ({ ...tv, value: index }))}
                      value={selectedTvSize}
                      onChange={(value) => setSelectedTvSize(value)}
                      placeholder="V√§lj TV-storlek"
                      renderOption={(option) => (
                        <>
                          {option.image ? (
                            <img 
                              src={option.image} 
                              alt={option.label}
                              style={{
                                width: '32px',
                                height: '20px',
                                objectFit: 'contain',
                                marginRight: '8px'
                              }}
                            />
                          ) : (
                            <span style={{ 
                              display: 'inline-block',
                              width: '32px',
                              height: '20px',
                              marginRight: '8px',
                              textAlign: 'center',
                              lineHeight: '20px',
                              fontSize: '12px',
                              color: '#999'
                            }}>
                              üì∫
                            </span>
                          )}
                          {option.label}
                        </>
                      )}
                      style={{ width: '100%' }}
                    />
                  </div>
                  
                  {/* H√∂jd-information */}
                  <div style={{
                    marginBottom: 12,
                    padding: 8,
                    background: '#f8f9fa',
                    borderRadius: 4,
                    fontSize: 11
                  }}>
                    <div style={{fontWeight: 600, marginBottom: 4, color: '#333'}}>üìè TV-h√∂jder:</div>
                    <div style={{color: '#666', lineHeight: 1.4}}>
                      <span style={{color: '#4CAF50', fontWeight: 600}}>H</span> = H√∂g position (presentationssk√§rmar)<br/>
                      <span style={{color: '#4CAF50', fontWeight: 600}}>M</span> = Mellan position (allm√§n viewing)
                    </div>
                  </div>
                  
                  <button
                    style={{padding:'6px 18px', fontWeight:600, background:'#1ec94c', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:15}}
                    onClick={() => setTvMarkersVisible(false)}
                  >OK</button>
                </>
              ) : (
                <>
                  <button
                    style={{padding:'8px 16px', fontWeight:600, background:'#007acc', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:14, marginTop:8}}
                    onClick={() => setTvMarkersVisible(true)}
                  >L√§gg till TV</button>
                </>
              )}
            </div>

            {/* Truss-kontroller */}
            <div style={{ marginTop: 16 }}>
              <label style={{ fontWeight: 600, marginRight: 8 }}>Truss-strukturer:</label>
              
              <InstructionCard
                icon="üî©"
                title="V√§lj truss-strukturer"
                description="Framkant: Rak truss l√§ngs framkanten. H√§ngande: Rund eller fyrkantig struktur i mitten."
                type="warning"
              />
              
              <div style={{ marginTop: 8 }}>
                <label style={{ display: 'block', marginBottom: 4, fontWeight: 600 }}>V√§lj truss-typ:</label>
                <CustomDropdown
                  options={TRUSS_TYPES.map((truss, index) => ({ ...truss, value: index }))}
                  value={selectedTrussType}
                  onChange={setSelectedTrussType}
                  placeholder="V√§lj truss-typ"
                  // iconBefore="üî©"  // Property removed - not supported
                  renderOption={(option) => (
                    <>
                      <span style={{ 
                        fontSize: '16px', 
                        marginRight: '8px',
                        display: 'inline-block',
                        width: '24px',
                        textAlign: 'center'
                      }}>
                        {option.type === 'none' ? '‚ùå' : 
                         option.type === 'front-straight' ? 'üìê' :
                         option.type === 'hanging-round' ? '‚≠ï' : '‚¨ú'}
                      </span>
                      {option.label}
                    </>
                  )}
                  style={{ width: '100%' }}
                />
              </div>
            </div>

          </div>
        )}
        <div>
          <label style={{ fontWeight: 600, marginRight: 8 }}>F√∂rr√•d:</label>
          
          <InstructionCard
            icon="üì¶"
            title="Hantera f√∂rr√•d"
            description="Klicka p√• gr√∂na rutor f√∂r att v√§lja f√∂rr√•d-storlek och placera. Klicka p√• placerat f√∂rr√•d f√∂r att rotera det 90¬∞ √•t g√•ngen."
            type="warning"
          />
          
          {storages.length > 0 && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              Placerade f√∂rr√•d: {storages.length}
              <button
                style={{marginLeft:12, padding:'4px 12px', fontWeight:600, background:'#ff4444', color:'#fff', border:'none', borderRadius:4, cursor:'pointer', fontSize:12}}
                onClick={() => setStorages([])}
              >Rensa alla</button>
            </div>
          )}
          
          {/* F√∂rr√•dskontroller */}
          {wallShape && wallShape !== '' && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              {storageMarkersVisible ? (
                <>
                  <div style={{marginBottom:8}}>
                    <label style={{display:'block', marginBottom:4, fontWeight:600}}>V√§lj f√∂rr√•d-storlek:</label>
                    <CustomDropdown
                      options={STORAGE_TYPES.slice(1).map((storage, index) => ({ ...storage, value: index + 1 }))}
                      value={selectedStorageType}
                      onChange={setSelectedStorageType}
                      placeholder="V√§lj f√∂rr√•d-storlek"
                      // iconBefore="üì¶"  // Property removed - not supported
                      renderOption={(option) => (
                        <>
                          <span style={{ 
                            fontSize: '16px', 
                            marginRight: '8px',
                            display: 'inline-block',
                            width: '24px',
                            textAlign: 'center'
                          }}>
                            üì¶
                          </span>
                          {option.label}
                        </>
                      )}
                      style={{ width: '100%' }}
                    />
                  </div>
                  <span>Klicka p√• bl√• rutor f√∂r att placera f√∂rr√•d. </span>
                  <button
                    style={{padding:'6px 18px', fontWeight:600, background:'#1ec94c', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:15}}
                    onClick={() => setStorageMarkersVisible(false)}
                  >OK</button>
                </>
              ) : (
                <>
                  <button
                    style={{padding:'8px 16px', fontWeight:600, background:'#007acc', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:14, marginTop:8}}
                    onClick={() => setStorageMarkersVisible(true)}
                  >L√§gg till f√∂rr√•d</button>
                </>
              )}
            </div>
          )}
        </div>
        {/* F√∂rr√•dsinst√§llningar f√∂r f√§rg och grafik */}
        {wallShape && wallShape !== '' && storages.length > 0 && (
          <div>
            <label style={{ fontWeight: 600, marginRight: 8 }}>F√∂rr√•dens utseende:</label>
            
            <div style={{marginTop:8}}>
              <label style={{ fontWeight: 600, marginBottom: 4, display: 'block' }}>F√§rg p√• f√∂rr√•d:</label>
              <input
                type="color"
                value={storageColor}
                onChange={(e) => setStorageColor(e.target.value)}
                style={{ width: '100%', height: 30, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>

            <div style={{marginTop:8}}>
              <label style={{ fontWeight: 600, marginBottom: 4, display: 'block' }}>Grafik p√• f√∂rr√•d:</label>
              <select 
                value={storageGraphic} 
                onChange={e => setStorageGraphic(e.target.value)}
                style={{width:'100%', padding:8, borderRadius:4, border:'1px solid #ccs'}}
              >
                <option value="none">Ingen grafik</option>
                <option value="upload">Ladda upp egen bild</option>
              </select>
            </div>
          </div>
        )}

        {/* Bildkontroller f√∂r f√∂rr√•d - visas alltid n√§r vi har f√∂rr√•d och valt 'ladda upp' */}
        {storages.length > 0 && storageGraphic === 'upload' && (
          <div style={{marginTop:16}}>
            <label style={{ fontWeight: 600, marginRight: 8 }}>F√∂rr√•dbilder:</label>
            
            <div style={{marginTop:8}}>
              <label style={{ fontWeight: 600, marginBottom: 8, display: 'block' }}>V√§lj vilka v√§ggar som ska ha bilden:</label>
              
              <div style={{marginBottom:4}}>
                <label style={{display:'flex', alignItems:'center', fontSize:14}}>
                  <input 
                    type="checkbox" 
                    checked={storageWallSelections.back}
                    onChange={e => setStorageWallSelections(prev => ({...prev, back: e.target.checked}))}
                    style={{marginRight:8}}
                  />
                  Bakv√§gg (v√§gg mot publiken)
                </label>
              </div>
              
              <div style={{marginBottom:4}}>
                <label style={{display:'flex', alignItems:'center', fontSize:14}}>
                  <input 
                    type="checkbox" 
                    checked={storageWallSelections.left}
                    onChange={e => setStorageWallSelections(prev => ({...prev, left: e.target.checked}))}
                    style={{marginRight:8}}
                  />
                  V√§nster v√§gg
                </label>
              </div>
              
              <div style={{marginBottom:4}}>
                <label style={{display:'flex', alignItems:'center', fontSize:14}}>
                  <input 
                    type="checkbox" 
                    checked={storageWallSelections.right}
                    onChange={e => setStorageWallSelections(prev => ({...prev, right: e.target.checked}))}
                    style={{marginRight:8}}
                  />
                  H√∂ger v√§gg
                </label>
              </div>
              
              <div style={{marginBottom:8}}>
                <label style={{display:'flex', alignItems:'center', fontSize:14}}>
                  <input 
                    type="checkbox" 
                    checked={storageWallSelections.front}
                    onChange={e => setStorageWallSelections(prev => ({...prev, front: e.target.checked}))}
                    style={{marginRight:8}}
                  />
                  Framv√§gg (√∂ppning mot montern)
                </label>
              </div>
            </div>
            
            <div style={{marginTop:8}}>
              <label style={{ fontWeight: 600, marginBottom: 4, display: 'block' }}>Ladda upp bild f√∂r f√∂rr√•d:</label>
              <input 
                type="file" 
                accept="image/*"
                onChange={e => {
                  const file = e.target.files?.[0];
                  if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                      setStorageUploadedImage(event.target?.result as string);
                    };
                    reader.readAsDataURL(file);
                  }
                }}
                style={{ fontSize: 12, marginBottom: 8, width: '100%' }}
              />
              {storageUploadedImage && (
                <div style={{ fontSize: 12, color: '#666' }}>‚úì F√∂rr√•dsbild uppladdad</div>
              )}
            </div>
          </div>
        )}
        
        {/* VEPA/Forex Designer f√∂r individuella f√∂rr√•d */}
        {storages.length > 0 && (
          <div style={{marginTop:16}}>
            <label style={{ 
              fontWeight: 600, 
              fontSize: '14px',
              color: '#2c3e50',
              marginBottom: '8px',
              display: 'block'
            }}>Design f√∂rr√•d:</label>
            
            <div style={{marginTop:8, display:'flex', flexDirection:'column', gap:'12px'}}>
              {storages.map(storage => {
                const storageConfig = STORAGE_TYPES[storage.type];
                const freeWalls = calculateFreeStorageWalls(storage);
                const freeWallCount = Object.values(freeWalls).filter(Boolean).length;
                const hasDesign = storageDesigns.has(storage.id);
                
                return (
                  <div key={storage.id} style={{
                    border: '1px solid #e0e0e0',
                    borderRadius: '8px',
                    padding: '12px',
                    backgroundColor: '#f9f9f9'
                  }}>
                    <div style={{
                      fontSize: '13px',
                      fontWeight: 600,
                      color: '#2c3e50',
                      marginBottom: '8px'
                    }}>
                      F√∂rr√•d #{storage.id} ({storageConfig.label}) - {freeWallCount} fria v√§ggar
                    </div>
                    
                    <button
                      onClick={() => {
                        setSelectedStorageForDesign(storage.id);
                        setShowStoragePDFGenerator(true);
                      }}
                      style={{
                        width: '100%',
                        padding: '12px 16px',
                        backgroundColor: hasDesign ? '#10b981' : '#3b82f6',
                        color: '#fff',
                        border: 'none',
                        borderRadius: '8px',
                        cursor: 'pointer',
                        fontWeight: 600,
                        fontSize: '14px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        gap: '8px',
                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = hasDesign ? '#059669' : '#2563eb';
                        e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = hasDesign ? '#10b981' : '#3b82f6';
                        e.currentTarget.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
                      }}
                    >
                      <span>{hasDesign ? '‚úÖ' : 'üé®'}</span>
                      <span>{hasDesign ? 'Redigera design' : 'Skapa design'}</span>
                    </button>
                    
                    <div style={{
                      fontSize: '12px',
                      color: '#666',
                      marginTop: '8px',
                      textAlign: 'center'
                    }}>
                      {hasDesign ? 'Klicka f√∂r att redigera befintlig design' : 'Designa och ladda ner print-ready PDF:er'}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        )}
        
        {/* Diskinst√§llningar f√∂r panelf√§rger */}
        {wallShape && wallShape !== '' && counters.length > 0 && (
          <div style={{marginTop:16}}>
            <label style={{ fontWeight: 600, marginRight: 8 }}>Diskars utseende:</label>
            
            <div style={{marginTop:8}}>
              <label style={{ fontWeight: 600, marginBottom: 4, display: 'block' }}>F√§rg p√• paneler (framsida + sidor):</label>
              <input
                type="color"
                value={counterPanelColor}
                onChange={(e) => setCounterPanelColor(e.target.value)}
                style={{ width: '100%', height: 30, border: '1px solid #ccc', borderRadius: 4 }}
              />
            </div>
          </div>
        )}

        {/* Bildkontroller f√∂r diskar - visas alltid n√§r vi har diskar */}
        {counters.length > 0 && (
          <div style={{marginTop:16}}>
            <label style={{ fontWeight: 600, marginRight: 8 }}>Diskbilder:</label>
            
            <div style={{marginTop:8}}>
              <label style={{ fontWeight: 600, marginBottom: 4, display: 'block' }}>Eget tryck p√• framsida:</label>
              <input
                type="file"
                accept="image/*"
                onChange={(e) => {
                  const file = e.target.files?.[0];
                  if (file) {
                    const reader = new FileReader();
                    reader.onload = (event) => {
                      const imageData = event.target?.result as string;
                      setCounterFrontImage(imageData);
                      
                      // Om det inte finns n√•gra diskar √§n, skapa automatiskt en standarddisk
                      if (counters.length === 0 && floorIndex !== null) {
                        const counterConfig = COUNTER_TYPES[selectedCounterType];
                        const floor = FLOOR_SIZES[floorIndex];
                        
                        // Placera disken i mitten av golvet
                        const centerX = 0;
                        const centerZ = 0;
                        
                        // Kontrollera att disken passar inom monteromr√•det
                        let canPlace = true;
                        if (counterConfig.type === 'L' || counterConfig.type === 'L-mirrored') {
                          // L-formad disk: kontrollera b√•de delar
                          const maxX = floor.width / 2;
                          const minX = -floor.width / 2;
                          const maxZ = floor.depth / 2;
                          const minZ = -floor.depth / 2;
                          
                          // Kontrollera f√∂rsta delen (1,5m x 0,5m)
                          if (centerX + 0.75 > maxX || centerX - 0.75 < minX || 
                              centerZ + 0.25 > maxZ || centerZ - 0.25 < minZ) {
                            canPlace = false;
                          }
                          
                          // Kontrollera andra delen beroende p√• typ
                          if (counterConfig.type === 'L') {
                            // Vanlig L: andra delen √•t h√∂ger
                            if (centerX + 1.25 > maxX || centerZ + 0.75 > maxZ || centerZ - 0.75 < minZ) {
                              canPlace = false;
                            }
                          } else {
                            // Spegelv√§nd L: andra delen √•t v√§nster
                            if (centerX - 1.25 < minX || centerZ + 0.75 > maxZ || centerZ - 0.75 < minZ) {
                              canPlace = false;
                            }
                          }
                        } else {
                          // Rektangul√§r disk
                          const maxX = floor.width / 2;
                          const minX = -floor.width / 2;
                          const maxZ = floor.depth / 2;
                          const minZ = -floor.depth / 2;
                          
                          if (centerX + counterConfig.width/2 > maxX || centerX - counterConfig.width/2 < minX ||
                              centerZ + counterConfig.depth/2 > maxZ || centerZ - counterConfig.depth/2 < minZ) {
                            canPlace = false;
                          }
                        }
                        
                        if (canPlace) {
                          const newCounter = {
                            id: Date.now(),
                            type: selectedCounterType,
                            position: { x: centerX, z: centerZ },
                            rotation: 0
                          };
                          setCounters(prev => [...prev, newCounter]);
                        }
                      }
                    };
                    reader.readAsDataURL(file);
                  }
                }}
                style={{ width: '100%', padding: 4, border: '1px solid #ccc', borderRadius: 4 }}
              />
              {counterFrontImage && (
                <div style={{marginTop: 4}}>
                  <button
                    onClick={() => setCounterFrontImage(null)}
                    style={{
                      padding: '4px 8px',
                      fontSize: '12px',
                      backgroundColor: '#ff4444',
                      color: 'white',
                      border: 'none',
                      borderRadius: 4,
                      cursor: 'pointer'
                    }}
                  >
                    Ta bort bild
                  </button>
                </div>
              )}
            </div>
          </div>
        )}
        
        <div>
          <label style={{ fontWeight: 600, marginRight: 8 }}>V√§xter:</label>
          
          <InstructionCard
            icon="ÔøΩ"
            title="Hantera v√§xter"
            description="V√§lj v√§xttyp och placera dem genom att klicka p√• gr√∂na rutor. Klicka p√• placerad v√§xt f√∂r att rotera."
            type="success"
          />
          
          {plants.length > 0 && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              Placerade v√§xter: {plants.length}
              <button
                style={{marginLeft:12, padding:'4px 12px', fontWeight:600, background:'#ff4444', color:'#fff', border:'none', borderRadius:4, cursor:'pointer', fontSize:12}}
                onClick={() => setPlants([])}
              >Rensa alla</button>
            </div>
          )}
          
          {/* V√§xtkontroller */}
          {wallShape && wallShape !== '' && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              {plantMarkersVisible ? (
                <>
                  <div style={{marginBottom:8}}>
                    <label style={{display:'block', marginBottom:4, fontWeight:600}}>V√§lj v√§xttyp:</label>
                    <CustomDropdown
                      options={PLANT_TYPES.map((plant, index) => ({ ...plant, value: index }))}
                      value={selectedPlantType}
                      onChange={(value) => setSelectedPlantType(value)}
                      placeholder="V√§lj v√§xt"
                      renderOption={(option) => (
                        <>
                          {option.image ? (
                            <img 
                              src={option.image} 
                              alt={option.label}
                              style={{
                                width: '24px',
                                height: '24px',
                                objectFit: 'cover',
                                borderRadius: '4px',
                                marginRight: '8px'
                              }}
                            />
                          ) : (
                            <span style={{ 
                              fontSize: '20px', 
                              marginRight: '8px',
                              display: 'inline-block',
                              width: '24px',
                              textAlign: 'center'
                            }}>
                              {option.emoji}
                            </span>
                          )}
                          {option.label}
                        </>
                      )}
                      style={{ width: '100%' }}
                    />
                  </div>
                  
                  <button
                    style={{padding:'6px 18px', fontWeight:600, background:'#1ec94c', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:15}}
                    onClick={() => setPlantMarkersVisible(false)}
                  >OK</button>
                </>
              ) : (
                <>
                  <button
                    style={{padding:'8px 16px', fontWeight:600, background:'#228B22', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:14, marginTop:8}}
                    onClick={() => setPlantMarkersVisible(true)}
                  >L√§gg till v√§xter</button>
                </>
              )}
            </div>
          )}
        </div>
        <div>
          <label style={{ fontWeight: 600, marginRight: 8 }}>M√∂bler:</label>
          
          <InstructionCard
            icon="ü™ë"
            title="Hantera m√∂bler"
            description="Klicka p√• bl√•a rutor f√∂r att v√§lja m√∂beltyp och placera. Klicka p√• placerad m√∂bel f√∂r att rotera den 90¬∞ √•t g√•ngen."
            type="info"
          />
          
          {furniture.length > 0 && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              Placerade m√∂bler: {furniture.length}
              <button
                style={{marginLeft:12, padding:'4px 12px', fontWeight:600, background:'#ff4444', color:'#fff', border:'none', borderRadius:4, cursor:'pointer', fontSize:12}}
                onClick={() => setFurniture([])}
              >Rensa alla</button>
            </div>
          )}
          
          {/* M√∂belkontroller */}
          {wallShape && wallShape !== '' && (
            <div style={{fontSize:12, color:'#888', marginTop:8}}>
              {furnitureMarkersVisible ? (
                <>
                  <div style={{marginBottom:8}}>
                    <label style={{display:'block', marginBottom:4, fontWeight:600}}>V√§lj m√∂beltyp:</label>
                    <CustomDropdown
                      options={FURNITURE_TYPES.map((furniture, index) => ({ ...furniture, value: index }))}
                      value={selectedFurnitureType}
                      onChange={(value) => setSelectedFurnitureType(value)}
                      placeholder="V√§lj m√∂bel"
                      renderOption={(option) => (
                        <>
                          {option.image ? (
                            <img 
                              src={option.image} 
                              alt={option.label}
                              style={{
                                width: '24px',
                                height: '24px',
                                objectFit: 'cover',
                                borderRadius: '4px',
                                marginRight: '8px'
                              }}
                            />
                          ) : (
                            <span style={{ 
                              fontSize: '20px', 
                              marginRight: '8px',
                              display: 'inline-block',
                              width: '24px',
                              textAlign: 'center'
                            }}>
                              {option.emoji}
                            </span>
                          )}
                          {option.label}
                        </>
                      )}
                      style={{ width: '100%' }}
                    />
                  </div>
                  
                  <button
                    style={{padding:'6px 18px', fontWeight:600, background:'#1ec94c', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:15}}
                    onClick={() => setFurnitureMarkersVisible(false)}
                  >OK</button>
                </>
              ) : (
                <>
                  <button
                    style={{padding:'8px 16px', fontWeight:600, background:'#8B4513', color:'#fff', border:'none', borderRadius:6, cursor:'pointer', fontSize:14, marginTop:8}}
                    onClick={() => setFurnitureMarkersVisible(true)}
                  >L√§gg till m√∂bler</button>
                </>
              )}
            </div>
          )}
          
          {/* Visa placerade m√∂bler */}
          {furniture.length > 0 && (
            <div style={{ fontSize: 12, color: '#888', marginTop: 8 }}>
              Placerade m√∂bler: {furniture.length}
              <button
                style={{ marginLeft: 12, padding: '2px 8px', fontSize: 11, background: '#ff4444', color: '#fff', border: 'none', borderRadius: 3, cursor: 'pointer' }}
                onClick={() => setFurniture([])}
              >Rensa alla</button>
            </div>
          )}
        </div>
        {wallShape && wallShape !== '' && (
          <>
            
            {/* Nya funktioner */}
            <div style={{ marginTop: 16, padding: 12, backgroundColor: '#f5f5f5', borderRadius: 6 }}>
              <h3 style={{ margin: '0 0 12px 0', fontSize: 16, fontWeight: 600 }}>V√§ggdekorationer & Tillbeh√∂r</h3>
              
              <div style={{ display: 'grid', gridTemplateColumns: '1fr', gap: 8, marginBottom: 12 }}>
                {/* Hyllor p√• v√§gg */}
                <div>
                  <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13, fontWeight: 600 }}>
                    üóÑÔ∏è Hyllor p√• v√§gg
                  </label>
                  
                  <InstructionCard
                    icon="üìö"
                    title="Placera hyllor"
                    description="Klicka p√• v√§ggarna f√∂r att placera hyllor (4 per kvm)"
                    type="info"
                  />
                  
                  {wallShelves.length > 0 && (
                    <div style={{ fontSize: 12, color: '#888', marginBottom: 8 }}>
                      Placerade hyllor: {wallShelves.length}
                      <button
                        style={{ marginLeft: 12, padding: '2px 8px', fontSize: 11, background: '#ff4444', color: '#fff', border: 'none', borderRadius: 3, cursor: 'pointer' }}
                        onClick={() => setWallShelves([])}
                      >Rensa</button>
                    </div>
                  )}
                  {shelfMarkersVisible ? (
                    <button
                      style={{ padding: '4px 12px', fontSize: 12, background: '#1ec94c', color: '#fff', border: 'none', borderRadius: 4, cursor: 'pointer' }}
                      onClick={() => setShelfMarkersVisible(false)}
                    >OK</button>
                  ) : (
                    <button
                      style={{ padding: '4px 12px', fontSize: 12, background: '#007acc', color: '#fff', border: 'none', borderRadius: 4, cursor: 'pointer' }}
                      onClick={() => setShelfMarkersVisible(true)}
                    >Placera hyllor</button>
                  )}
                </div>
                
                {/* Extra el */}
                <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13 }}>
                  <input 
                    type="checkbox" 
                    checked={showExtraPower} 
                    onChange={(e) => setShowExtraPower(e.target.checked)}
                    style={{ marginRight: 6 }}
                  />
                  ÔøΩ Extra el-uttag (endast priseffekt)
                </label>
                
                {/* H√∂gtalare p√• stativ */}
                <div>
                  <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13, fontWeight: 600 }}>
                    üîä H√∂gtalare p√• stativ
                  </label>
                  <div style={{ fontSize: 12, color: '#666', marginBottom: 8 }}>
                    Klicka p√• montern f√∂r att placera h√∂gtalare (4 per ruta)
                  </div>
                  {speakers.length > 0 && (
                    <div style={{ fontSize: 12, color: '#888', marginBottom: 8 }}>
                      Placerade h√∂gtalare: {speakers.length}
                      <button
                        style={{ marginLeft: 12, padding: '2px 8px', fontSize: 11, background: '#ff4444', color: '#fff', border: 'none', borderRadius: 3, cursor: 'pointer' }}
                        onClick={() => setSpeakers([])}
                      >Rensa</button>
                    </div>
                  )}
                  <div style={{ marginBottom: 8 }}>
                    <label style={{ fontWeight: 600, marginRight: 8, fontSize: 13 }}>Storlek:</label>
                    <select 
                      value={speakerSize} 
                      onChange={e => setSpeakerSize(e.target.value as 'small' | 'medium' | 'large')}
                      style={{ fontSize: 12, padding: '2px 6px' }}
                    >
                      <option value="small">Liten</option>
                      <option value="medium">Medium</option>
                      <option value="large">Stor</option>
                    </select>
                  </div>
                  {speakerMarkersVisible ? (
                    <button
                      style={{ padding: '4px 12px', fontSize: 12, background: '#1ec94c', color: '#fff', border: 'none', borderRadius: 4, cursor: 'pointer' }}
                      onClick={() => setSpeakerMarkersVisible(false)}
                    >OK</button>
                  ) : (
                    <button
                      style={{ padding: '4px 12px', fontSize: 12, background: '#007acc', color: '#fff', border: 'none', borderRadius: 4, cursor: 'pointer' }}
                      onClick={() => setSpeakerMarkersVisible(true)}
                    >Placera h√∂gtalare</button>
                  )}
                </div>
              </div>
            </div>

            {/* F√∂rr√•dstillbeh√∂r */}
            {storages.length > 0 && (
              <div style={{ marginTop: 12, padding: 12, backgroundColor: '#f0f8ff', borderRadius: 6 }}>
                <h3 style={{ margin: '0 0 12px 0', fontSize: 16, fontWeight: 600 }}>F√∂rr√•dstillbeh√∂r</h3>
                
                <label style={{ display: 'flex', alignItems: 'center', cursor: 'pointer', fontSize: 13 }}>
                  <input 
                    type="checkbox" 
                    checked={showClothingRacks} 
                    onChange={(e) => setShowClothingRacks(e.target.checked)}
                    style={{ marginRight: 6 }}
                  />
                  üëî Kl√§dh√§ngare i f√∂rr√•
                </label>
              </div>
            )}
          </>
        )}
  </>}

  {/* Prisber√§kning */}
  <div id="price-summary" style={{ 
          position: 'sticky',
          bottom: 0,
          backgroundColor: '#fff',
          borderTop: '2px solid #007acc',
          padding: '16px',
          marginTop: '20px',
          boxShadow: '0 -4px 12px rgba(0,0,0,0.1)'
        }}>
                <div style={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            margin: '0 0 12px 0' 
          }}>
            <h3 style={{ 
              margin: 0, 
              fontSize: 18, 
              fontWeight: 700, 
              color: '#007acc' 
            }}>
              üí∞ Totalber√§kning
            </h3>
            <button
              onClick={() => setPriceSectionCollapsed(!priceSectionCollapsed)}
              style={{
                background: 'transparent',
                border: 'none',
                fontSize: '20px',
                cursor: 'pointer',
                color: '#007acc',
                padding: '0 4px',
                lineHeight: 1
              }}
            >
              {priceSectionCollapsed ? '‚äû' : '‚äü'}
            </button>
          </div>
          
                {/* Hidden packlista container for PDF rendering */}
                <div id="packlista-hidden" style={{ position: 'absolute', left: -9999, top: -9999, width: '1024px', padding: 20, background: '#fff', color: '#000' }} />
                
                {/* Hidden price summary container for PDF rendering */}
                <div id="price-summary-hidden" style={{ position: 'absolute', left: -9999, top: -9999, width: '1024px', padding: 20, background: '#fff', color: '#000' }} />
          {floorIndex !== null ? (() => {
            const materialCost = calculatePrice();
            const laborCosts = calculateLaborCosts();
            const subtotal = materialCost + laborCosts.buildCost + laborCosts.demolitionCost + laborCosts.adminFee + laborCosts.consumables;
            const markup = Math.round(subtotal * 0.15); // 15% p√•slag
            const totalCost = subtotal + markup;
            
            return (
              <div>
                {/* Detailed breakdown - only show when not collapsed */}
                {!priceSectionCollapsed && (
                  <>
                    {/* Materialkostnad */}
                    <div style={{ fontSize: 14, marginBottom: 4, display: 'flex', justifyContent: 'space-between' }}>
                      <span>Material & uthyrning:</span>
                      <span>{materialCost.toLocaleString('sv-SE')} kr</span>
                    </div>
                    
                    {/* Byggkostnad */}
                    <div style={{ fontSize: 14, marginBottom: 4, display: 'flex', justifyContent: 'space-between' }}>
                      <span>Upps√§ttning ({laborCosts.persons} pers √ó {laborCosts.buildHours}h):</span>
                      <span>{laborCosts.buildCost.toLocaleString('sv-SE')} kr</span>
                    </div>
                    
                    {/* Rivningskostnad */}
                    <div style={{ fontSize: 14, marginBottom: 4, display: 'flex', justifyContent: 'space-between' }}>
                      <span>Nedmontering ({laborCosts.persons} pers √ó {laborCosts.demolitionHours}h):</span>
                      <span>{laborCosts.demolitionCost.toLocaleString('sv-SE')} kr</span>
                    </div>
                    
                    {/* F√∂rbrukningsmaterial */}
                    <div style={{ fontSize: 14, marginBottom: 4, display: 'flex', justifyContent: 'space-between' }}>
                      <span>F√∂rbrukningsmaterial:</span>
                      <span>{laborCosts.consumables.toLocaleString('sv-SE')} kr</span>
                    </div>
                    
                    {/* Skissavgift */}
                    <div style={{ fontSize: 14, marginBottom: 4, display: 'flex', justifyContent: 'space-between' }}>
                      <span>Skissavgift:</span>
                      <span>{laborCosts.adminFee.toLocaleString('sv-SE')} kr</span>
                    </div>
                    
                    {/* Subtotal */}
                    <div style={{ fontSize: 14, marginBottom: 4, display: 'flex', justifyContent: 'space-between', borderTop: '1px solid #ddd', paddingTop: 4 }}>
                      <span><strong>Subtotal:</strong></span>
                      <span><strong>{subtotal.toLocaleString('sv-SE')} kr</strong></span>
                    </div>
                    
                    {/* P√•slag */}
                    <div style={{ fontSize: 14, marginBottom: 8, display: 'flex', justifyContent: 'space-between' }}>
                      <span>Projektledning:</span>
                      <span>{markup.toLocaleString('sv-SE')} kr</span>
                    </div>
                  </>
                )}
                
                {/* Total - always visible */}
                <div style={{ 
                  fontSize: 20, 
                  fontWeight: 700, 
                  color: '#28a745',
                  marginBottom: '8px',
                  display: 'flex', 
                  justifyContent: 'space-between',
                  borderTop: '2px solid #28a745',
                  paddingTop: 8
                }}>
                  <span>TOTALT:</span>
                  <span>{totalCost.toLocaleString('sv-SE')} kr</span>
                </div>
                {/* Best√§ll-knapp */}
                <div style={{ marginTop: 10, marginBottom: 6 }}>
                  <button
                    onClick={async () => {
                      const pdf = new jsPDF('p', 'mm', 'a4');
                      const canvasEl = document.querySelector('canvas') as HTMLCanvasElement | null;
                      
                      // Funktion f√∂r att l√§gga till vattenst√§mpel - anv√§nds p√• alla sidor
                      const addWatermark = (pdf: any) => {
                        try {
                          // Huvudvattenst√§mpel
                          pdf.setGState(new pdf.GState({opacity: 0.15}));
                          pdf.addImage('/Loggo/Monterhyra Logotyp.png', 'PNG', 140, 20, 50, 25);
                          
                          // Extra textbaserade vattenst√§mplar
                          pdf.setGState(new pdf.GState({opacity: 0.08}));
                          pdf.setFontSize(6);
                          pdf.setTextColor(150, 150, 150);
                          pdf.text('F√ñRHANDSGRANSKNING - MONTERHYRA.SE', 15, 280);
                          pdf.text('ENDAST F√ñR INTERN ANV√ÑNDNING', 15, 285);
                          
                          // Diagonal vattenst√§mpel i mitten
                          pdf.setGState(new pdf.GState({opacity: 0.05}));
                          const pageWidth = 210; // A4 width in mm
                          const pageHeight = 297; // A4 height in mm
                          pdf.text('MONTERHYRA DEMO', pageWidth/2 - 20, pageHeight/2, null, 45);
                          
                          pdf.setGState(new pdf.GState({opacity: 1})); // √Öterst√§ll
                          pdf.setTextColor(0, 0, 0);
                        } catch (e) {
                          // Fallback om vattenst√§mpel misslyckas
                          pdf.setFontSize(6);
                          pdf.setTextColor(200, 200, 200);
                          pdf.text('¬© Monterhyra.se - Demo', 170, 30);
                          pdf.text('Licensiering kr√§vs f√∂r kommersiell anv√§ndning', 120, 285);
                          pdf.setTextColor(0, 0, 0);
                        }
                      };
                      
                      try {
                        // F√∂rs√∂k att f√•nga tre olika vyer av montern
                        if (captureRef.current && captureRef.current.captureViews) {
                          try {
                            // F√• tre olika kameravyer fr√•n CaptureHelper (l√§gre uppl√∂sning f√∂r mindre filstorlek)
                            const views = captureRef.current.captureViews(800, 533);
                            
                            // Sida 1: Ovanifr√•n-vy
                            if (views[0]) {
                              // L√§gg till kontaktinformation √∂verst p√• f√∂rsta sidan
                              pdf.setFontSize(16);
                              pdf.setTextColor(40, 62, 80);
                              pdf.text('MONTEROFFERT', 15, 25);
                              
                              // Kontaktinformation
                              pdf.setFontSize(10);
                              pdf.setTextColor(0, 0, 0);
                              let yPos = 35;
                              
                              if (registrationData.name) {
                                pdf.text(`Kontaktperson: ${registrationData.name}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.company) {
                                pdf.text(`F√∂retag: ${registrationData.company}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.email) {
                                pdf.text(`E-post: ${registrationData.email}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.phone) {
                                pdf.text(`Telefon: ${registrationData.phone}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.orgNumber) {
                                pdf.text(`Organisationsnummer: ${registrationData.orgNumber}`, 15, yPos);
                                yPos += 5;
                              }
                              
                              // Linje under kontaktinfo
                              pdf.setDrawColor(200, 200, 200);
                              pdf.line(15, yPos + 3, 195, yPos + 3);
                              
                              // Montervy - flyttad ner f√∂r att ge plats f√∂r kontaktinfo
                              const imageYPos = yPos + 10;
                              const imageHeight = 100; // Mindre h√∂jd f√∂r att f√• plats
                              pdf.addImage(views[0], 'JPEG', 15, imageYPos, 180, imageHeight);
                              addWatermark(pdf);
                              // L√§gg till text som beskriver vyn
                              pdf.setFontSize(10);
                              pdf.text('Planvy - ovanifr√•n', 15, imageYPos + imageHeight + 5);
                            }
                            
                            // Sida 2: Perspektivvy 
                            if (views[1]) {
                              pdf.addPage();
                              pdf.addImage(views[1], 'JPEG', 15, 15, 180, 120);
                              addWatermark(pdf);
                              pdf.setFontSize(10);
                              pdf.text('Perspektivvy', 15, 140);
                            }
                            
                            // Sida 3: Helvy fr√•n andra sidan
                            if (views[2]) {
                              pdf.addPage();
                              pdf.addImage(views[2], 'JPEG', 15, 15, 180, 120);
                              addWatermark(pdf);
                              pdf.setFontSize(10);
                              pdf.text('Helvy', 15, 140);
                            }
                            
                          } catch (e) {
                            console.warn('Kunde inte f√•nga olika vyer, anv√§nder fallback', e);
                            // Fallback: anv√§nd canvas direkt om CaptureHelper misslyckas
                            if (canvasEl) {
                              const imgData = canvasEl.toDataURL('image/jpeg', 0.7); // JPEG med 70% kvalitet
                              
                              // L√§gg till kontaktinformation √∂verst p√• f√∂rsta sidan
                              pdf.setFontSize(16);
                              pdf.setTextColor(40, 62, 80);
                              pdf.text('MONTEROFFERT', 15, 25);
                              
                              // Kontaktinformation
                              pdf.setFontSize(10);
                              pdf.setTextColor(0, 0, 0);
                              let yPos = 35;
                              
                              if (registrationData.name) {
                                pdf.text(`Kontaktperson: ${registrationData.name}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.company) {
                                pdf.text(`F√∂retag: ${registrationData.company}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.email) {
                                pdf.text(`E-post: ${registrationData.email}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.phone) {
                                pdf.text(`Telefon: ${registrationData.phone}`, 15, yPos);
                                yPos += 5;
                              }
                              if (registrationData.orgNumber) {
                                pdf.text(`Organisationsnummer: ${registrationData.orgNumber}`, 15, yPos);
                                yPos += 5;
                              }
                              
                              // Linje under kontaktinfo
                              pdf.setDrawColor(200, 200, 200);
                              pdf.line(15, yPos + 3, 195, yPos + 3);
                              
                              // 3D-vy - flyttad ner f√∂r att ge plats f√∂r kontaktinfo
                              const imageYPos = yPos + 10;
                              const imageHeight = 100;
                              pdf.addImage(imgData, 'JPEG', 15, imageYPos, 180, imageHeight);
                              pdf.setFontSize(10);
                              pdf.text('3D-vy av montern', 15, imageYPos + imageHeight + 5);
                              
                              pdf.addPage();
                              pdf.addImage(imgData, 'JPEG', 15, 15, 180, 120);
                              pdf.text('3D-vy av montern', 15, 140);
                              pdf.addPage();
                              pdf.addImage(imgData, 'JPEG', 15, 15, 180, 120);
                              pdf.text('3D-vy av montern', 15, 140);
                            }
                          }
                        } else if (canvasEl) {
                          // Fallback: anv√§nd vanlig canvas-bild om CaptureHelper inte finns
                          try {
                            const imgData = canvasEl.toDataURL('image/jpeg', 0.7); // JPEG med 70% kvalitet
                            
                            // L√§gg till kontaktinformation √∂verst p√• f√∂rsta sidan
                            pdf.setFontSize(16);
                            pdf.setTextColor(40, 62, 80);
                            pdf.text('MONTEROFFERT', 15, 25);
                            
                            // Kontaktinformation
                            pdf.setFontSize(10);
                            pdf.setTextColor(0, 0, 0);
                            let yPos = 35;
                            
                            if (registrationData.name) {
                              pdf.text(`Kontaktperson: ${registrationData.name}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.company) {
                              pdf.text(`F√∂retag: ${registrationData.company}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.email) {
                              pdf.text(`E-post: ${registrationData.email}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.phone) {
                              pdf.text(`Telefon: ${registrationData.phone}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.orgNumber) {
                              pdf.text(`Organisationsnummer: ${registrationData.orgNumber}`, 15, yPos);
                              yPos += 5;
                            }
                            
                            // Linje under kontaktinfo
                            pdf.setDrawColor(200, 200, 200);
                            pdf.line(15, yPos + 3, 195, yPos + 3);
                            
                            // L√§gg till samma vy med olika beskrivningar - f√∂rsta sidan med kontaktinfo
                            const imageYPos = yPos + 10;
                            const imageHeight = 100;
                            pdf.addImage(imgData, 'JPEG', 15, imageYPos, 180, imageHeight);
                            pdf.setFontSize(10);
                            pdf.text('3D-vy av montern', 15, imageYPos + imageHeight + 5);
                            
                            pdf.addPage();
                            pdf.addImage(imgData, 'JPEG', 15, 15, 180, 120);
                            pdf.text('3D-vy av montern', 15, 140);
                            pdf.addPage();
                            pdf.addImage(imgData, 'JPEG', 15, 15, 180, 120);
                            pdf.text('3D-vy av montern', 15, 140);
                          } catch (e) {
                            // If canvas is tainted or toDataURL fails, fallback to html2canvas
                            const cFallback = await html2canvas(canvasEl as HTMLElement, { backgroundColor: null, scale: 1 });
                            const imgFb = cFallback.toDataURL('image/jpeg', 0.7); // JPEG med 70% kvalitet
                            
                            // L√§gg till kontaktinformation √∂verst p√• f√∂rsta sidan
                            pdf.setFontSize(16);
                            pdf.setTextColor(40, 62, 80);
                            pdf.text('MONTEROFFERT', 15, 25);
                            
                            // Kontaktinformation
                            pdf.setFontSize(10);
                            pdf.setTextColor(0, 0, 0);
                            let yPos = 35;
                            
                            if (registrationData.name) {
                              pdf.text(`Kontaktperson: ${registrationData.name}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.company) {
                              pdf.text(`F√∂retag: ${registrationData.company}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.email) {
                              pdf.text(`E-post: ${registrationData.email}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.phone) {
                              pdf.text(`Telefon: ${registrationData.phone}`, 15, yPos);
                              yPos += 5;
                            }
                            if (registrationData.orgNumber) {
                              pdf.text(`Organisationsnummer: ${registrationData.orgNumber}`, 15, yPos);
                              yPos += 5;
                            }
                            
                            // Linje under kontaktinfo
                            pdf.setDrawColor(200, 200, 200);
                            pdf.line(15, yPos + 3, 195, yPos + 3);
                            
                            const imageYPos = yPos + 10;
                            const imageHeight = 100;
                            pdf.addImage(imgFb, 'JPEG', 15, imageYPos, 180, imageHeight);
                            pdf.setFontSize(10);
                            pdf.text('3D-vy av montern', 15, imageYPos + imageHeight + 5);
                            
                            pdf.addPage();
                            pdf.addImage(imgFb, 'JPEG', 15, 15, 180, 120);
                            pdf.text('3D-vy av montern', 15, 140);
                            pdf.addPage();
                            pdf.addImage(imgFb, 'JPEG', 15, 15, 180, 120);
                            pdf.text('3D-vy av montern', 15, 140);
                          }
                        }

                        // Sida 4: Prissammanst√§llning med snygg ruta
                        pdf.addPage();
                        
                        // Skapa och rendera prissammanst√§llning i dolt element
                        const materialCost = calculatePrice();
                        const laborCosts = calculateLaborCosts();
                        const subtotal = materialCost + laborCosts.buildCost + laborCosts.demolitionCost + laborCosts.adminFee + laborCosts.consumables;
                        const markup = Math.round(subtotal * 0.15); // 15% p√•slag
                        const totalCost = subtotal + markup;
                        
                        const priceEl = document.getElementById('price-summary-hidden');
                        if (priceEl) {
                          priceEl.innerHTML = '';
                          priceEl.style.width = '794px';
                          priceEl.style.padding = '18px';
                          priceEl.style.boxSizing = 'border-box';
                          priceEl.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                          priceEl.style.fontSize = '12pt';
                          priceEl.style.color = '#000';
                          priceEl.style.background = '#fff';

                          const h1 = document.createElement('h2');
                          h1.textContent = 'Prissammanst√§llning';
                          h1.style.margin = '0 0 12px 0';
                          h1.style.fontSize = '1.6em';
                          h1.style.fontWeight = '700';
                          h1.style.fontFamily = 'inherit';
                          priceEl.appendChild(h1);

                          // Prisruta med gr√∂n ram (samma som packlista)
                          const box = document.createElement('div');
                          box.style.border = '3px solid #2e8b2e';
                          box.style.padding = '16px';
                          box.style.width = '740px';
                          box.style.margin = '10px auto';
                          box.style.boxShadow = 'none';
                          box.style.boxSizing = 'border-box';
                          box.style.background = '#fff';

                          const priceContainer = document.createElement('div');
                          priceContainer.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                          priceContainer.style.fontSize = '11pt';

                          // Grundspecifikation f√∂rst
                          const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
                          const floorW = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
                          const floorD = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
                          
                          const specDiv = document.createElement('div');
                          specDiv.style.marginBottom = '16px';
                          specDiv.style.padding = '8px';
                          specDiv.style.backgroundColor = '#f8f9fa';
                          specDiv.style.borderRadius = '4px';
                          specDiv.innerHTML = `
                            <div style="font-weight: 600; margin-bottom: 4px;">Monterspecifikation:</div>
                            <div>Monterstorlek: ${floorW} √ó ${floorD} meter (${floorW * floorD} kvm)</div>
                            <div>V√§ggform: ${WALL_SHAPES.find(w => w.value === wallShape)?.label || 'Ok√§nd'}</div>
                            <div>V√§ggh√∂jd: ${wallHeight} meter</div>
                          `;
                          priceContainer.appendChild(specDiv);

                          // Prisuppdelning utan checkboxar (bara label och pris)
                          const makeRowElement = (labelText: string, priceText: string) => {
                            const item = document.createElement('div');
                            item.style.display = 'flex';
                            item.style.justifyContent = 'space-between';
                            item.style.alignItems = 'center';
                            item.style.padding = '6px 2px';
                            item.style.breakInside = 'avoid';

                            const left = document.createElement('div');
                            left.textContent = labelText;
                            left.style.color = '#222';
                            left.style.fontSize = '11pt';

                            const price = document.createElement('div');
                            price.textContent = priceText;
                            price.style.fontWeight = '700';
                            price.style.color = '#007acc';
                            price.style.fontSize = '11pt';

                            item.appendChild(left);
                            item.appendChild(price);
                            return item;
                          };

                          // L√§gg till prisrader
                          priceContainer.appendChild(makeRowElement('Material & uthyrning', `${materialCost.toLocaleString('sv-SE')} kr`));
                          priceContainer.appendChild(makeRowElement(`Upps√§ttning (${laborCosts.persons} pers √ó ${laborCosts.buildHours}h)`, `${laborCosts.buildCost.toLocaleString('sv-SE')} kr`));
                          priceContainer.appendChild(makeRowElement(`Nedmontering (${laborCosts.persons} pers √ó ${laborCosts.demolitionHours}h)`, `${laborCosts.demolitionCost.toLocaleString('sv-SE')} kr`));
                          priceContainer.appendChild(makeRowElement('F√∂rbrukningsmaterial', `${laborCosts.consumables.toLocaleString('sv-SE')} kr`));
                          priceContainer.appendChild(makeRowElement('Skissavgift', `${laborCosts.adminFee.toLocaleString('sv-SE')} kr`));

                          // Subtotal linje
                          const subtotalDiv = document.createElement('div');
                          subtotalDiv.style.borderTop = '2px solid #ddd';
                          subtotalDiv.style.marginTop = '8px';
                          subtotalDiv.style.paddingTop = '8px';
                          priceContainer.appendChild(subtotalDiv);
                          
                          subtotalDiv.appendChild(makeRowElement('Subtotal', `${subtotal.toLocaleString('sv-SE')} kr`));
                          subtotalDiv.appendChild(makeRowElement('Projektledning (15%)', `${markup.toLocaleString('sv-SE')} kr`));

                          // Total linje
                          const totalDiv = document.createElement('div');
                          totalDiv.style.borderTop = '3px solid #28a745';
                          totalDiv.style.marginTop = '8px';
                          totalDiv.style.paddingTop = '8px';
                          totalDiv.style.backgroundColor = '#f8fff8';
                          totalDiv.style.borderRadius = '4px';
                          totalDiv.style.padding = '12px 8px';
                          
                          const totalRow = document.createElement('div');
                          totalRow.style.display = 'flex';
                          totalRow.style.justifyContent = 'space-between';
                          totalRow.style.alignItems = 'center';
                          totalRow.style.fontSize = '14pt';
                          totalRow.style.fontWeight = '700';
                          totalRow.style.color = '#28a745';
                          
                          const totalLabel = document.createElement('div');
                          totalLabel.textContent = 'TOTALT:';
                          const totalPrice = document.createElement('div');
                          totalPrice.textContent = `${totalCost.toLocaleString('sv-SE')} kr`;
                          
                          totalRow.appendChild(totalLabel);
                          totalRow.appendChild(totalPrice);
                          totalDiv.appendChild(totalRow);
                          priceContainer.appendChild(totalDiv);

                          box.appendChild(priceContainer);
                          priceEl.appendChild(box);

                          // Rendera till PDF med html2canvas
                          const cPrice = await html2canvas(priceEl as HTMLElement, { backgroundColor: '#ffffff', scale: 2 });
                          const imgData = cPrice.toDataURL('image/png');
                          const imgW = cPrice.width;
                          const imgH = cPrice.height;
                          const pdfUsableW = 180; // mm
                          const imgHeightMm = (imgH / imgW) * pdfUsableW;
                          pdf.addImage(imgData, 'PNG', 15, 15, pdfUsableW, imgHeightMm);
                        }

                        // Sida 5: Packlista - BORTTAGEN (finns i admin-portalen ist√§llet)
                        /* 
                        pdf.addPage();
                        try {
                          ... packlista kod borttagen ...
                        } catch (e) {
                          console.warn('Could not render packlista', e);
                        }
                        */

                        // L√§gg till juridisk sida med villkor
                        pdf.addPage();
                        addWatermark(pdf);
                        
                        // Rubrik
                        pdf.setFontSize(18);
                        pdf.setTextColor(40, 62, 80);
                        pdf.text('VILLKOR & ANSVARSFRISKRIVNING', 15, 25);
                        
                        // Inneh√•ll
                        pdf.setFontSize(10);
                        pdf.setTextColor(0, 0, 0);
                        let yPos = 35;
                        
                        const addSection = (title: string, content: string[]) => {
                          pdf.setFontSize(12);
                          pdf.setTextColor(40, 62, 80);
                          pdf.text(title, 15, yPos);
                          yPos += 8;
                          
                          pdf.setFontSize(9);
                          pdf.setTextColor(0, 0, 0);
                          content.forEach(line => {
                            const splitText = pdf.splitTextToSize(line, 180);
                            pdf.text(splitText, 15, yPos);
                            yPos += splitText.length * 4;
                          });
                          yPos += 3;
                        };

                        addSection('1. Ansvarsfriskrivning', [
                          'Denna PDF √§r endast en offert och inte ett bindande avtal.',
                          'Priser, produkter och inneh√•ll kan komma att √§ndras. Slutgiltig orderbekr√§ftelse sker f√∂rst efter skriftligt godk√§nnande fr√•n Monterhyra. Vi reserverar oss f√∂r tryckfel, pris√§ndringar och eventuella tekniska avvikelser i produkter och material.'
                        ]);

                        addSection('2. √Ñgander√§tt / Upphovsr√§tt', [
                          'Alla ritningar, 3D-visualiseringar, bilder och dokument i denna PDF tillh√∂r Monterhyra och f√•r inte kopieras, spridas eller anv√§ndas av tredje part utan skriftligt tillst√•nd.'
                        ]);

                        addSection('3. Best√§llningsvillkor', [
                          'En best√§llning blir giltig f√∂rst n√§r den har mottagits och bekr√§ftats skriftligt av Monterhyra.',
                          'Leveranstider och priser √§r prelimin√§ra fram till orderbekr√§ftelse.'
                        ]);

                        addSection('4. Ansvar f√∂r leverans & montering', [
                          'Monterhyra ansvarar inte f√∂r f√∂rseningar eller skador orsakade av:',
                          '‚Ä¢ Tredje part (t.ex. transportf√∂retag)',
                          '‚Ä¢ Tekniska problem eller fel i material',
                          '‚Ä¢ F√∂r√§ndringar i kundens monteryta eller milj√∂ som p√•verkar montering',
                          '‚Ä¢ √ñvriga omst√§ndigheter utanf√∂r Monterhyras kontroll'
                        ]);

                        addSection('5. Integritet / GDPR', [
                          'Personuppgifter som samlas in i samband med best√§llning hanteras enligt g√§llande dataskyddslagstiftning (GDPR) och anv√§nds endast f√∂r att fullf√∂lja best√§llningen.'
                        ]);

                        addSection('ALLM√ÑNNA VILLKOR', [
                          'Offert och accept ‚Äì Denna PDF utg√∂r endast en offert. Best√§llning blir giltig f√∂rst efter skriftlig bekr√§ftelse fr√•n Monterhyra.',
                          '',
                          'Betalning ‚Äì Faktura skickas i samband med orderbekr√§ftelse. Betalning ska ske enligt fakturans villkor.',
                          '',
                          '√Ñndringar och avbokning ‚Äì Vid avbokning:',
                          '‚Ä¢ Mindre √§n 2 veckor f√∂re m√§ssa debiteras 50% av orderv√§rdet.',
                          '‚Ä¢ Mer √§n 2 veckor f√∂re m√§ssa debiteras 25% av orderv√§rdet.',
                          '',
                          'Ansvar ‚Äì Monterhyra ansvarar inte f√∂r skador, f√∂rseningar eller f√∂rluster utanf√∂r v√•r direkta kontroll.',
                          '',
                          'Force Majeure ‚Äì Monterhyra ansvarar inte f√∂r f√∂rseningar eller utebliven leverans p√• grund av h√§ndelser utanf√∂r v√•r kontroll, t.ex. naturkatastrofer, strejk eller tekniska fel.',
                          '',
                          'Till√§mplig lag och tvist ‚Äì Svensk lag g√§ller. Eventuella tvister ska i f√∂rsta hand l√∂sas genom f√∂rhandlingar.'
                        ]);

                        pdf.save('monter-bestallning.pdf');
                      } catch (err) {
                        console.error('Fel vid skapande av PDF', err);
                        alert('Kunde inte skapa PDF. F√∂rs√∂k √∂ppna appen i ett nytt f√∂nster eller kontrollera att inga cross-origin-bilder anv√§nds.');
                      }
                    }}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      background: '#666666',
                      color: '#fff',
                      border: 'none',
                      borderRadius: 6,
                      cursor: 'pointer',
                      fontWeight: 700,
                      fontSize: 14,
                      marginBottom: '8px'
                    }}
                  >
                    üìÑ PDF
                  </button>
                  
                  {/* Ny Best√§ll-knapp som skickar e-post med EmailJS */}
                  <button
                    onClick={async () => {
                      try {
                        console.log('Best√§ll-knapp klickad');
                        console.log('Registration data:', registrationData);
                        
                        // Kolla om EmailJS √§r tillg√§ngligt
                        if (!emailjs) {
                          throw new Error('EmailJS √§r inte laddat');
                        }
                        
                        // Anv√§nd samma avancerade PDF-kod som PDF-knappen
                        console.log('Skapar avancerad PDF med alla detaljer...');
                        const pdf = new jsPDF('p', 'mm', 'a4');
                        const canvasEl = document.querySelector('canvas') as HTMLCanvasElement | null;
                        
                        // Watermark-funktion
                        const addWatermark = (pdf: any) => {
                          pdf.setFontSize(12);
                          pdf.setTextColor(180, 180, 180);
                          pdf.text('MONTERHYRA - www.monterhyra.se', 15, 285);
                          pdf.setTextColor(0, 0, 0);
                        };
                        
                        try {
                          // F√∂rs√∂k att f√•nga tre olika vyer av montern (samma som PDF-knappen)
                          if (captureRef.current && captureRef.current.captureViews) {
                            try {
                              // F√• tre olika kameravyer fr√•n CaptureHelper
                              const views = captureRef.current.captureViews(1200, 800);
                              
                              // Sida 1: Ovanifr√•n-vy med kontaktinfo
                              if (views[0]) {
                                pdf.setFontSize(16);
                                pdf.setTextColor(40, 62, 80);
                                pdf.text('MONTEROFFERT', 15, 25);
                                
                                // Kontaktinformation
                                pdf.setFontSize(10);
                                pdf.setTextColor(0, 0, 0);
                                let yPos = 35;
                                
                                if (registrationData.name) {
                                  pdf.text(`Kontaktperson: ${registrationData.name}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.company) {
                                  pdf.text(`F√∂retag: ${registrationData.company}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.email) {
                                  pdf.text(`E-post: ${registrationData.email}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.phone) {
                                  pdf.text(`Telefon: ${registrationData.phone}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.orgNumber) {
                                  pdf.text(`Organisationsnummer: ${registrationData.orgNumber}`, 15, yPos);
                                  yPos += 5;
                                }
                                
                                // Linje under kontaktinfo
                                pdf.setDrawColor(200, 200, 200);
                                pdf.line(15, yPos + 3, 195, yPos + 3);
                                
                                // Montervy
                                const imageYPos = yPos + 10;
                                const imageHeight = 100;
                                pdf.addImage(views[0], 'JPEG', 15, imageYPos, 180, imageHeight);
                                addWatermark(pdf);
                                pdf.setFontSize(10);
                                pdf.text('Planvy - ovanifr√•n', 15, imageYPos + imageHeight + 5);
                              }
                              
                              // Sida 2: Perspektivvy 
                              if (views[1]) {
                                pdf.addPage();
                                pdf.addImage(views[1], 'JPEG', 15, 15, 180, 120);
                                addWatermark(pdf);
                                pdf.setFontSize(10);
                                pdf.text('Perspektivvy', 15, 140);
                              }
                              
                              // Sida 3: Helvy fr√•n andra sidan
                              if (views[2]) {
                                pdf.addPage();
                                pdf.addImage(views[2], 'JPEG', 15, 15, 180, 120);
                                addWatermark(pdf);
                                pdf.setFontSize(10);
                                pdf.text('Helvy', 15, 140);
                              }
                              
                            } catch (e) {
                              console.warn('Kunde inte f√•nga olika vyer, anv√§nder fallback', e);
                              // Fallback: anv√§nd canvas direkt
                              if (canvasEl) {
                                const imgData = canvasEl.toDataURL('image/jpeg', 0.7); // JPEG med 70% kvalitet
                                
                                pdf.setFontSize(16);
                                pdf.setTextColor(40, 62, 80);
                                pdf.text('MONTEROFFERT', 15, 25);
                                
                                // Kontaktinformation
                                pdf.setFontSize(10);
                                pdf.setTextColor(0, 0, 0);
                                let yPos = 35;
                                
                                if (registrationData.name) {
                                  pdf.text(`Kontaktperson: ${registrationData.name}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.company) {
                                  pdf.text(`F√∂retag: ${registrationData.company}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.email) {
                                  pdf.text(`E-post: ${registrationData.email}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.phone) {
                                  pdf.text(`Telefon: ${registrationData.phone}`, 15, yPos);
                                  yPos += 5;
                                }
                                if (registrationData.orgNumber) {
                                  pdf.text(`Organisationsnummer: ${registrationData.orgNumber}`, 15, yPos);
                                  yPos += 5;
                                }
                                
                                pdf.setDrawColor(200, 200, 200);
                                pdf.line(15, yPos + 3, 195, yPos + 3);
                                
                                const imageYPos = yPos + 10;
                                const imageHeight = 100;
                                pdf.addImage(imgData, 'JPEG', 15, imageYPos, 180, imageHeight);
                                pdf.setFontSize(10);
                                pdf.text('3D-vy av montern', 15, imageYPos + imageHeight + 5);
                              }
                            }
                          }
                          
                          // Sida 4: Prissammanst√§llning (samma som PDF-knappen)
                          pdf.addPage();
                          
                          const materialCost = calculatePrice();
                          const laborCosts = calculateLaborCosts();
                          const subtotal = materialCost + laborCosts.buildCost + laborCosts.demolitionCost + laborCosts.adminFee + laborCosts.consumables;
                          const markup = Math.round(subtotal * 0.15);
                          const totalCost = subtotal + markup;
                          
                          const priceEl = document.getElementById('price-summary-hidden');
                          if (priceEl) {
                            // Samma prissammanst√§llningslogik som PDF-knappen...
                            priceEl.innerHTML = '';
                            priceEl.style.width = '794px';
                            priceEl.style.padding = '18px';
                            priceEl.style.boxSizing = 'border-box';
                            priceEl.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                            priceEl.style.fontSize = '12pt';
                            priceEl.style.color = '#000';
                            priceEl.style.background = '#fff';

                            const h1 = document.createElement('h2');
                            h1.textContent = 'Prissammanst√§llning';
                            h1.style.margin = '0 0 12px 0';
                            h1.style.fontSize = '1.6em';
                            h1.style.fontWeight = '700';
                            h1.style.fontFamily = 'inherit';
                            priceEl.appendChild(h1);

                            const box = document.createElement('div');
                            box.style.border = '3px solid #2e8b2e';
                            box.style.padding = '16px';
                            box.style.width = '740px';
                            box.style.margin = '10px auto';
                            box.style.boxShadow = 'none';
                            box.style.boxSizing = 'border-box';
                            box.style.background = '#fff';

                            const priceContainer = document.createElement('div');
                            priceContainer.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                            priceContainer.style.fontSize = '11pt';

                            // Grundspecifikation f√∂rst
                            const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
                            const floorW = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
                            const floorD = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
                            
                            const specDiv = document.createElement('div');
                            specDiv.style.marginBottom = '16px';
                            specDiv.style.padding = '8px';
                            specDiv.style.backgroundColor = '#f8f9fa';
                            specDiv.style.borderRadius = '4px';
                            specDiv.innerHTML = `
                              <div style="font-weight: 600; margin-bottom: 4px;">Monterspecifikation:</div>
                              <div>Monterstorlek: ${floorW} √ó ${floorD} meter (${floorW * floorD} kvm)</div>
                              <div>V√§ggform: ${WALL_SHAPES.find(w => w.value === wallShape)?.label || 'Ok√§nd'}</div>
                              <div>V√§ggh√∂jd: ${wallHeight} meter</div>
                            `;
                            priceContainer.appendChild(specDiv);

                            // Prisrader
                            const makeRowElement = (labelText: string, priceText: string) => {
                              const item = document.createElement('div');
                              item.style.display = 'flex';
                              item.style.justifyContent = 'space-between';
                              item.style.alignItems = 'center';
                              item.style.padding = '6px 2px';
                              item.style.breakInside = 'avoid';

                              const left = document.createElement('div');
                              left.textContent = labelText;
                              left.style.color = '#222';
                              left.style.fontSize = '11pt';

                              const price = document.createElement('div');
                              price.textContent = priceText;
                              price.style.fontWeight = '700';
                              price.style.color = '#007acc';
                              price.style.fontSize = '11pt';

                              item.appendChild(left);
                              item.appendChild(price);
                              return item;
                            };

                            priceContainer.appendChild(makeRowElement('Material & uthyrning', `${materialCost.toLocaleString('sv-SE')} kr`));
                            priceContainer.appendChild(makeRowElement(`Upps√§ttning (${laborCosts.persons} pers √ó ${laborCosts.buildHours}h)`, `${laborCosts.buildCost.toLocaleString('sv-SE')} kr`));
                            priceContainer.appendChild(makeRowElement(`Nedmontering (${laborCosts.persons} pers √ó ${laborCosts.demolitionHours}h)`, `${laborCosts.demolitionCost.toLocaleString('sv-SE')} kr`));
                            priceContainer.appendChild(makeRowElement('F√∂rbrukningsmaterial', `${laborCosts.consumables.toLocaleString('sv-SE')} kr`));
                            priceContainer.appendChild(makeRowElement('Skissavgift', `${laborCosts.adminFee.toLocaleString('sv-SE')} kr`));

                            // Subtotal
                            const subtotalDiv = document.createElement('div');
                            subtotalDiv.style.borderTop = '2px solid #ddd';
                            subtotalDiv.style.marginTop = '8px';
                            subtotalDiv.style.paddingTop = '8px';
                            priceContainer.appendChild(subtotalDiv);
                            
                            subtotalDiv.appendChild(makeRowElement('Subtotal', `${subtotal.toLocaleString('sv-SE')} kr`));
                            subtotalDiv.appendChild(makeRowElement('Projektledning (15%)', `${markup.toLocaleString('sv-SE')} kr`));

                            // Total
                            const totalDiv = document.createElement('div');
                            totalDiv.style.borderTop = '3px solid #28a745';
                            totalDiv.style.marginTop = '8px';
                            totalDiv.style.paddingTop = '8px';
                            totalDiv.style.backgroundColor = '#f8fff8';
                            totalDiv.style.borderRadius = '4px';
                            totalDiv.style.padding = '12px 8px';
                            
                            const totalRow = document.createElement('div');
                            totalRow.style.display = 'flex';
                            totalRow.style.justifyContent = 'space-between';
                            totalRow.style.alignItems = 'center';
                            totalRow.style.fontSize = '14pt';
                            totalRow.style.fontWeight = '700';
                            totalRow.style.color = '#28a745';
                            
                            const totalLabel = document.createElement('div');
                            totalLabel.textContent = 'TOTALT:';
                            const totalPrice = document.createElement('div');
                            totalPrice.textContent = `${totalCost.toLocaleString('sv-SE')} kr`;
                            
                            totalRow.appendChild(totalLabel);
                            totalRow.appendChild(totalPrice);
                            totalDiv.appendChild(totalRow);
                            priceContainer.appendChild(totalDiv);

                            box.appendChild(priceContainer);
                            priceEl.appendChild(box);

                            // Rendera till PDF
                            const cPrice = await html2canvas(priceEl as HTMLElement, { backgroundColor: '#ffffff', scale: 2 });
                            const imgData = cPrice.toDataURL('image/png');
                            const imgW = cPrice.width;
                            const imgH = cPrice.height;
                            const pdfUsableW = 180;
                            const imgHeightMm = (imgH / imgW) * pdfUsableW;
                            pdf.addImage(imgData, 'PNG', 15, 15, pdfUsableW, imgHeightMm);
                          }
                          
                          // Sida 5: Packlista (samma som PDF-knappen)
                          pdf.addPage();
                          try {
                            const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
                            const floorW = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
                            const floorD = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
                            const pack = computePacklista(wallShape, floorW, floorD, wallHeight, storages);
                            
                            // Ber√§kna synliga hyllbrackets och l√§gg till i totals
                            try {
                              const computeSamLedForPdf = () => {
                                let sum = 0;
                                if (wallShape === 'straight') sum = floorW;
                                else if (wallShape === 'l') sum = floorW + floorD;
                                else if (wallShape === 'u') sum = floorW + (floorD * 2);
                                return Math.round(sum);
                              };
                              const visibleBracketsForPdf = computeSamLedForPdf();
                              if (visibleBracketsForPdf > 0) {
                                pack.totals = pack.totals || {};
                                (pack.totals as any)['SAM-led'] = visibleBracketsForPdf;
                              }
                              
                              // Vepa v√§ggomr√•den
                              if (graphic === 'vepa') {
                                pack.totals = pack.totals || {};
                                if (uploadedImage && floorW > 0) (pack.totals as any)['Vepa bakv√§gg'] = `${Math.round((floorW * wallHeight) * 10)/10} kvm (${floorW}m √ó ${wallHeight}m)`;
                                if ((wallShape === 'l' || wallShape === 'u') && uploadedImageLeft && floorD > 0) (pack.totals as any)['Vepa v√§nster v√§gg'] = `${Math.round((floorD * wallHeight) * 10)/10} kvm (${floorD}m √ó ${wallHeight}m)`;
                                if (wallShape === 'u' && uploadedImageRight && floorD > 0) (pack.totals as any)['Vepa h√∂ger v√§gg'] = `${Math.round((floorD * wallHeight) * 10)/10} kvm (${floorD}m √ó ${wallHeight}m)`;
                              }
                              
                              // Forex v√§ggomr√•den (main walls)
                              if (graphic === 'forex') {
                                pack.totals = pack.totals || {};
                                if (vepaWallDesigns.length > 0) {
                                  vepaWallDesigns.forEach((design) => {
                                    const area = Math.round((design.widthMM / 1000) * (design.heightMM / 1000) * 10) / 10;
                                    (pack.totals as any)[`Forex ${design.wallLabel}`] = `${area} kvm (${Math.round(design.widthMM/100)/10}m √ó ${Math.round(design.heightMM/100)/10}m)`;
                                  });
                                }
                              }
                              
                              // F√∂rr√•d med Vepa/Forex tryck
                              storageDesigns.forEach((storageData, storageId) => {
                                const printType = storageData.printType;
                                const printLabel = printType === 'vepa' ? 'Vepa' : 'Forex';
                                storageData.designs.forEach((design) => {
                                  const area = Math.round((design.widthMM / 1000) * (design.heightMM / 1000) * 10) / 10;
                                  const label = `${printLabel} F√∂rr√•d${storageId} ${design.wallLabel}`;
                                  (pack.totals as any)[label] = `${area} kvm (${Math.round(design.widthMM/100)/10}m √ó ${Math.round(design.heightMM/100)/10}m)`;
                                });
                              });
                              
                              // Sm√•saker
                              if (showEspressoMachine) (pack.totals as any)['Espressomaskin'] = ((pack.totals as any)['Espressomaskin'] || 0) + 1;
                              if (showFlowerVase) (pack.totals as any)['Blomma'] = ((pack.totals as any)['Blomma'] || 0) + 1;
                              if (showCandyBowl) (pack.totals as any)['Godisk√•l'] = ((pack.totals as any)['Godisk√•l'] || 0) + 1;
                              
                              // TV-r√§kningar
                              if ((tvs || []).length > 0) {
                                const tvCounts: Record<string, number> = {};
                                (tvs || []).forEach(tv => {
                                  const label = TV_SIZES[tv.size]?.label || 'Ok√§nd';
                                  tvCounts[label] = (tvCounts[label] || 0) + 1;
                                });
                                Object.keys(tvCounts).forEach(lbl => {
                                  pack.totals = pack.totals || {};
                                  (pack.totals as any)[`TV ${lbl}`] = ((pack.totals as any)[`TV ${lbl}`] || 0) + tvCounts[lbl];
                                });
                              }
                              
                              // Matta
                              if (carpetIndex !== 0) {
                                const selectedCarpet = CARPET_COLORS[carpetIndex];
                                (pack.totals as any)['Matta'] = `${floorW}√ó${floorD} ${selectedCarpet.name}`;
                              }
                              
                              // V√§ggyhyllor och h√∂gtalare
                              if ((wallShelves || []).length > 0) {
                                const shelfCount = (wallShelves || []).length;
                                pack.totals = pack.totals || {};
                                (pack.totals as any)['Hyllplan'] = ((pack.totals as any)['Hyllplan'] || 0) + shelfCount;
                                (pack.totals as any)['Hyllbracket'] = ((pack.totals as any)['Hyllbracket'] || 0) + (shelfCount * 2);
                              }
                              if ((speakers || []).length > 0) {
                                const sCount = (speakers || []).length;
                                pack.totals = pack.totals || {};
                                (pack.totals as any)['H√∂gtalare'] = ((pack.totals as any)['H√∂gtalare'] || 0) + sCount;
                                (pack.totals as any)['H√∂gtalarstativ'] = ((pack.totals as any)['H√∂gtalarstativ'] || 0) + sCount;
                              }
                              if (showClothingRacks) {
                                pack.totals = pack.totals || {};
                                (pack.totals as any)['Kl√§dh√§ngare'] = ((pack.totals as any)['Kl√§dh√§ngare'] || 0) + 1;
                              }
                              if (graphic && graphic !== 'none') {
                                const g = GRAPHICS.find(gr => gr.value === graphic);
                                if (g) (pack.totals as any)['Grafik'] = g.label;
                              }
                            } catch (e) {
                              // ignorera packlista-fel
                            }
                            
                            // Bygg packlista DOM-element
                            const packEl = document.getElementById('packlista-hidden');
                            if (packEl) {
                              packEl.innerHTML = '';
                              packEl.style.width = '794px';
                              packEl.style.padding = '18px';
                              packEl.style.boxSizing = 'border-box';
                              packEl.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                              packEl.style.fontSize = '12pt';
                              packEl.style.color = '#000';
                              packEl.style.background = '#fff';

                              const h1 = document.createElement('h2');
                              h1.textContent = 'Packlista';
                              h1.style.margin = '0 0 12px 0';
                              h1.style.fontSize = '1.6em';
                              h1.style.fontWeight = '700';
                              h1.style.fontFamily = 'inherit';
                              packEl.appendChild(h1);

                              const box = document.createElement('div');
                              box.style.border = '3px solid #2e8b2e';
                              box.style.padding = '8px';
                              box.style.width = '740px';
                              box.style.margin = '10px auto';
                              box.style.boxShadow = 'none';
                              box.style.boxSizing = 'border-box';
                              box.style.background = '#fff';

                              const sub = document.createElement('div');
                              sub.textContent = 'BeMatrix';
                              sub.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                              sub.style.fontSize = '1.2em';
                              sub.style.fontWeight = '600';
                              sub.style.margin = '0 0 12px 0';
                              box.appendChild(sub);

                              const listContainer = document.createElement('div');
                              listContainer.style.display = 'flex';
                              listContainer.style.gap = '20px';
                              listContainer.style.width = '100%';
                              listContainer.style.boxSizing = 'border-box';
                              listContainer.style.fontFamily = 'Optima, Arial, Helvetica, sans-serif';
                              listContainer.style.fontSize = '10pt';

                              const colLeft = document.createElement('div');
                              const colRight = document.createElement('div');
                              colLeft.style.width = '50%';
                              colRight.style.width = '50%';

                              const makeRowElement = (labelText: string, countText: string) => {
                                const item = document.createElement('div');
                                item.style.display = 'flex';
                                item.style.justifyContent = 'space-between';
                                item.style.alignItems = 'center';
                                item.style.padding = '4px 2px';
                                item.style.breakInside = 'avoid';

                                const left = document.createElement('div');
                                left.textContent = labelText;
                                left.style.color = '#222';
                                left.style.fontSize = '10pt';

                                const rightWrap = document.createElement('div');
                                rightWrap.style.display = 'flex';
                                rightWrap.style.alignItems = 'center';
                                rightWrap.style.gap = '8px';

                                const count = document.createElement('div');
                                count.textContent = countText;
                                count.style.fontWeight = '700';
                                count.style.color = '#007acc';
                                count.style.fontSize = '10pt';

                                const cb = document.createElement('input');
                                cb.type = 'checkbox';
                                cb.style.width = '14px';
                                cb.style.height = '14px';

                                rightWrap.appendChild(count);
                                rightWrap.appendChild(cb);
                                item.appendChild(left);
                                item.appendChild(rightWrap);
                                return item;
                              };

                              // Bygg lista med items
                              const totals = (pack && pack.totals) ? pack.totals : {};
                              const frameKeys = Object.keys(totals).filter(k => k.includes('x')).sort();
                              const miscKeys = Object.keys(totals).filter(k => !k.includes('x')).sort();

                              const allItems: Array<{label: string, count: string}> = [];
                              for (const k of frameKeys) {
                                const v = (totals as any)[k];
                                if (!v || v <= 0) continue;
                                allItems.push({ label: k.replace(/\./g, ','), count: `${v}st` });
                              }
                              for (const mk of miscKeys) {
                                const val = (totals as any)[mk];
                                if (val === undefined || val === null) continue;
                                let labelText = mk.replace(/_/g, ' ');
                                if (mk === 'Grafik') labelText = 'Grafik';
                                if (mk === 'Matta') labelText = 'Matta';
                                if (mk === 'SAM-led') labelText = 'SAM-led';
                                allItems.push({ label: labelText, count: (typeof val === 'number') ? `${val}st` : `${val}` });
                              }

                              // Dela upp i tv√• kolumner
                              const mid = Math.ceil(allItems.length / 2);
                              const leftItems = allItems.slice(0, mid);
                              const rightItems = allItems.slice(mid);

                              if (leftItems.length === 0 && rightItems.length === 0) {
                                const empty = document.createElement('div');
                                empty.textContent = 'Inga poster';
                                empty.style.padding = '6px 0';
                                colLeft.appendChild(empty);
                              } else {
                                leftItems.forEach(it => colLeft.appendChild(makeRowElement(it.label, it.count)));
                                rightItems.forEach(it => colRight.appendChild(makeRowElement(it.label, it.count)));
                              }

                              listContainer.appendChild(colLeft);
                              listContainer.appendChild(colRight);
                              box.appendChild(listContainer);
                              packEl.appendChild(box);
                              
                              const cPack = await html2canvas(packEl as HTMLElement, { backgroundColor: '#ffffff', scale: 2 });
                              const imgPack = cPack.toDataURL('image/png');
                              pdf.addImage(imgPack, 'PNG', 15, 15, 180, 250 * 0.6);
                            }
                          } catch (e) {
                            console.warn('Packlista kunde inte genereras:', e);
                          }
                          
                          // Sida 6: Villkor
                          pdf.addPage();
                          pdf.setFontSize(16);
                          pdf.text('ALLM√ÑNNA VILLKOR', 15, 25);
                          pdf.setFontSize(10);
                          const villkor = [
                            'Priser g√§ller i 30 dagar fr√•n offertdatum.',
                            'Alla priser √§r exklusive moms.',
                            'Betalning sker enligt √∂verenskommen betalningsplan.',
                            'Upps√§ttning och nedmontering ing√•r i priset.',
                            'Transport debiteras enligt g√§llande prislista.',
                            '√Ñndringar efter bekr√§ftad best√§llning kan medf√∂ra extra kostnader.',
                            'Kunden ansvarar f√∂r att monteromr√•det √§r f√∂rberet vid leverans.',
                            'Skador som uppst√•r under uthyrningsperioden debiteras enligt prislista.',
                            'Avbokning senare √§n 7 dagar f√∂re upps√§ttning medf√∂r avgift.',
                            'Monterhyra f√∂rbeh√•ller sig r√§tten till √§ndringar.'
                          ];
                          
                          let yPos = 40;
                          villkor.forEach((villkor, index) => {
                            pdf.text(`${index + 1}. ${villkor}`, 15, yPos);
                            yPos += 8;
                          });
                          
                          addWatermark(pdf);
                          
                          // Konvertera till base64 f√∂r e-post
                          const pdfBase64 = pdf.output('datauristring');
                          const pdfBase64Only = pdfBase64.split(',')[1];
                          console.log('Avancerad PDF skapad, storlek:', pdfBase64Only.length);
                          
                          // Ladda ner lokalt f√∂r kunden
                          const timestamp = Date.now();
                          const filename = `monteroffert-${timestamp}.pdf`;
                          pdf.save(filename);
                          
                          // EmailJS konfiguration
                          const serviceId = 'service_rd6m6ys';
                          const templateId = 'template_70rgvmm'; 
                          const publicKey = 'dovkvDHK77DZp1OUz';
                          
                          // Skapa textmeddelande UTAN PDF (f√∂r stor f√∂r mail)
                          const orderDetails = `
MONTERBEST√ÑLLNING - ${new Date().toLocaleDateString('sv-SE')}

KONTAKTUPPGIFTER:
‚Ä¢ Namn: ${registrationData.name || 'Ej angivet'}
‚Ä¢ F√∂retag: ${registrationData.company || 'Ej angivet'}
‚Ä¢ E-post: ${registrationData.email || 'Ej angivet'}
‚Ä¢ Telefon: ${registrationData.phone || 'Ej angivet'}
‚Ä¢ Org.nummer: ${registrationData.orgNumber || 'Ej angivet'}

EVENTDETALJER:
‚Ä¢ Eventnamn: ${registrationData.eventName || 'Ej angivet'}
‚Ä¢ Eventstad: ${registrationData.eventCity || 'Ej angivet'}
‚Ä¢ Eventdatum: ${registrationData.eventDate || 'Ej angivet'}
‚Ä¢ Byggdatum: ${registrationData.buildDate || 'Ej angivet'}
‚Ä¢ Nedmonteringsdatum: ${registrationData.teardownDate || 'Ej angivet'}

MONTERDETALJER:
‚Ä¢ Best√§llning gjord: ${new Date().toLocaleString('sv-SE')}
‚Ä¢ Totalpris: ${totalCost.toLocaleString('sv-SE')} kr

üìÅ FILER OCH TRYCKUNDERLAG:
Alla PDF-filer, tryckfiler och komplett offert finns tillg√§ngliga i admin-portalen.
Logga in p√• admin-portalen f√∂r att ladda ner ZIP-fil med alla filer.

N√ÑSTA STEG:
1. Logga in p√• admin-portalen och ladda ner filer
2. Kontakta kunden p√• ${registrationData.phone || registrationData.email}
3. Bekr√§fta best√§llning och planera leverans/montering

Med v√§nliga h√§lsningar,
Monterhyra Best√§llningssystem
                          `;
                          
                          // Skicka e-post med EmailJS
                          const templateParams = {
                            to_name: 'Monterhyra',
                            to_email: 'monterhyra@gmail.com',
                            from_name: registrationData.name || 'Kund',
                            reply_to: registrationData.email || 'ej-angivet@email.com',
                            company: registrationData.company || 'Ej angivet',
                            phone: registrationData.phone || 'Ej angivet',
                            message: orderDetails
                          };
                          
                          // Initiera EmailJS och skicka e-post
                          emailjs.init(publicKey);
                          console.log('EmailJS initierat, skickar avancerad PDF...');
                          const result = await emailjs.send(serviceId, templateId, templateParams, publicKey);
                          console.log('EmailJS framg√•ngsrikt:', result);
                          
                          // Spara best√§llning till admin-portal med alla PDFer
                          try {
                            console.log('üíæ Sparar best√§llning till admin-portal...');
                            
                            // F√∂rbered kundinfo
                            const customerInfo: CustomerInfo = {
                              name: registrationData.name || '',
                              email: registrationData.email || '',
                              phone: registrationData.phone || '',
                              company: registrationData.company || '',
                              deliveryAddress: registrationData.eventCity || '',
                              eventDate: registrationData.eventDate || '',
                              eventTime: '', 
                              setupTime: registrationData.buildDate || '',
                              pickupTime: registrationData.teardownDate || '',
                              message: registrationData.eventName || ''
                            };
                            
                            // F√∂rbered best√§llningsdata
                            // Ber√§kna detaljerad packlista
                            const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
                            const floorW = floorConfig?.custom ? customFloorWidth : (floorConfig ? floorConfig.width : 0);
                            const floorD = floorConfig?.custom ? customFloorDepth : (floorConfig ? floorConfig.depth : 0);
                            const packlistaData = computePacklista(wallShape, floorW, floorD, wallHeight, storages);
                            
                            // F√ñRB√ÑTTRA packlistaData med alla saknade artiklar (samma som email PDF)
                            try {
                              // SAM-led
                              const computeSamLed = () => {
                                let sum = 0;
                                if (wallShape === 'straight') sum = floorW;
                                else if (wallShape === 'l') sum = floorW + floorD;
                                else if (wallShape === 'u') sum = floorW + (floorD * 2);
                                return Math.round(sum);
                              };
                              const samLedCount = computeSamLed();
                              if (samLedCount > 0) {
                                packlistaData.totals = packlistaData.totals || {};
                                (packlistaData.totals as any)['SAM-led'] = samLedCount;
                              }
                              
                              // Vepa v√§ggomr√•den (main walls)
                              if (graphic === 'vepa') {
                                packlistaData.totals = packlistaData.totals || {};
                                if (uploadedImage && floorW > 0) (packlistaData.totals as any)['Vepa bakv√§gg'] = `${Math.round((floorW * wallHeight) * 10)/10} kvm (${floorW}m √ó ${wallHeight}m)`;
                                if ((wallShape === 'l' || wallShape === 'u') && uploadedImageLeft && floorD > 0) (packlistaData.totals as any)['Vepa v√§nster v√§gg'] = `${Math.round((floorD * wallHeight) * 10)/10} kvm (${floorD}m √ó ${wallHeight}m)`;
                                if (wallShape === 'u' && uploadedImageRight && floorD > 0) (packlistaData.totals as any)['Vepa h√∂ger v√§gg'] = `${Math.round((floorD * wallHeight) * 10)/10} kvm (${floorD}m √ó ${wallHeight}m)`;
                              }
                              
                              // Forex v√§ggomr√•den (main walls)
                              if (graphic === 'forex') {
                                packlistaData.totals = packlistaData.totals || {};
                                if (vepaWallDesigns.length > 0) {
                                  vepaWallDesigns.forEach((design) => {
                                    const area = Math.round((design.widthMM / 1000) * (design.heightMM / 1000) * 10) / 10;
                                    (packlistaData.totals as any)[`Forex ${design.wallLabel}`] = `${area} kvm (${Math.round(design.widthMM/100)/10}m √ó ${Math.round(design.heightMM/100)/10}m)`;
                                  });
                                }
                              }
                              
                              // F√∂rr√•d med Vepa/Forex tryck
                              storageDesigns.forEach((storageData, storageId) => {
                                const printType = storageData.printType;
                                const printLabel = printType === 'vepa' ? 'Vepa' : 'Forex';
                                storageData.designs.forEach((design) => {
                                  const area = Math.round((design.widthMM / 1000) * (design.heightMM / 1000) * 10) / 10;
                                  const label = `${printLabel} F√∂rr√•d${storageId} ${design.wallLabel}`;
                                  (packlistaData.totals as any)[label] = `${area} kvm (${Math.round(design.widthMM/100)/10}m √ó ${Math.round(design.heightMM/100)/10}m)`;
                                });
                              });
                              
                              // Sm√•saker
                              if (showEspressoMachine) (packlistaData.totals as any)['Espressomaskin'] = ((packlistaData.totals as any)['Espressomaskin'] || 0) + 1;
                              if (showFlowerVase) (packlistaData.totals as any)['Blomma'] = ((packlistaData.totals as any)['Blomma'] || 0) + 1;
                              if (showCandyBowl) (packlistaData.totals as any)['Godisk√•l'] = ((packlistaData.totals as any)['Godisk√•l'] || 0) + 1;
                              
                              // TV-r√§kningar
                              if ((tvs || []).length > 0) {
                                const tvCounts: Record<string, number> = {};
                                (tvs || []).forEach(tv => {
                                  const label = TV_SIZES[tv.size]?.label || 'Ok√§nd';
                                  tvCounts[label] = (tvCounts[label] || 0) + 1;
                                });
                                Object.keys(tvCounts).forEach(lbl => {
                                  packlistaData.totals = packlistaData.totals || {};
                                  (packlistaData.totals as any)[`TV ${lbl}`] = ((packlistaData.totals as any)[`TV ${lbl}`] || 0) + tvCounts[lbl];
                                });
                              }
                              
                              // Matta
                              if (carpetIndex !== 0) {
                                const selectedCarpet = CARPET_COLORS[carpetIndex];
                                (packlistaData.totals as any)['Matta'] = `${floorW}√ó${floorD} ${selectedCarpet.name}`;
                              }
                              
                              // V√§ggyhyllor och h√∂gtalare
                              if ((wallShelves || []).length > 0) {
                                const shelfCount = (wallShelves || []).length;
                                packlistaData.totals = packlistaData.totals || {};
                                (packlistaData.totals as any)['Hyllplan'] = ((packlistaData.totals as any)['Hyllplan'] || 0) + shelfCount;
                                (packlistaData.totals as any)['Hyllbracket'] = ((packlistaData.totals as any)['Hyllbracket'] || 0) + (shelfCount * 2);
                              }
                              if ((speakers || []).length > 0) {
                                const sCount = (speakers || []).length;
                                packlistaData.totals = packlistaData.totals || {};
                                (packlistaData.totals as any)['H√∂gtalare'] = ((packlistaData.totals as any)['H√∂gtalare'] || 0) + sCount;
                                (packlistaData.totals as any)['H√∂gtalarstativ'] = ((packlistaData.totals as any)['H√∂gtalarstativ'] || 0) + sCount;
                              }
                              if (showClothingRacks) {
                                packlistaData.totals = packlistaData.totals || {};
                                (packlistaData.totals as any)['Kl√§dh√§ngare'] = ((packlistaData.totals as any)['Kl√§dh√§ngare'] || 0) + 1;
                              }
                              
                              // Disk-delar (l√§gg till alla delar fr√•n placerade diskar)
                              if ((counters || []).length > 0) {
                                packlistaData.totals = packlistaData.totals || {};
                                // L√§gg till grundl√§ggande disk-enheter
                                (packlistaData.totals as any)['disk innehylla'] = ((packlistaData.totals as any)['disk innehylla'] || 0) + (counters || []).length * 2;
                                
                                // L√§gg till alla delar fr√•n varje disk
                                (counters || []).forEach((counter) => {
                                  const cfg = COUNTER_TYPES[counter.type];
                                  if (!cfg) return;
                                  
                                  const add = (key: string, n = 1) => { 
                                    (packlistaData.totals as any)[key] = ((packlistaData.totals as any)[key] || 0) + n; 
                                  };

                                  // Helper: increment matching grafik entries for a frame size
                                  const addGrafik = (frameKey: string, n = 1) => {
                                    // frameKey expected like 'Bematrix ram 1x1' -> Grafik 1x1
                                    const m = frameKey.match(/(\d+,?\d*)x(\d+,?\d*)/);
                                    if (m) {
                                      const gx = `${m[1].replace('.', ',')}x${m[2].replace('.', ',')}`;
                                      add(`Grafik ${gx}`, n);
                                    }
                                  };

                                  if (cfg.type === 'L' || cfg.type === 'L-mirrored') {
                                    add('Bematrix ram 0,5x2', 4);
                                    add('Bematrix ram 1,5x1', 1);
                                    add('Bematrix ram 1x1', 1);
                                    add('Barskiva 1,5x0,5', 1);
                                    add('Barskiva 1x0,5', 1);
                                    add('Lister forex', 4);
                                    add('Corners', 3);
                                    add('M8pin', 10);
                                    add('Special connector', 4);
                                    addGrafik('Bematrix ram 0,5x2', 4);
                                    addGrafik('Bematrix ram 1,5x1', 1);
                                    addGrafik('Bematrix ram 1x1', 1);
                                  } else {
                                    switch (cfg.width) {
                                      case 1:
                                        add('Bematrix ram 0,5x2', 2);
                                        add('Bematrix ram 1x1', 1);
                                        add('Barskiva 1x0,5', 1);
                                        add('Lister forex', 4);
                                        addGrafik('Bematrix ram 0,5x2', 2);
                                        addGrafik('Bematrix ram 1x1', 1);
                                        break;
                                      case 1.5:
                                        add('Bematrix ram 0,5x2', 2);
                                        add('Bematrix ram 1,5x1', 1);
                                        add('Barskiva 1,5x0,5', 1);
                                        add('Lister forex', 4);
                                        add('Corners', 2);
                                        add('M8pin', 6);
                                        add('Special connector', 2);
                                        addGrafik('Bematrix ram 0,5x2', 2);
                                        addGrafik('Bematrix ram 1,5x1', 1);
                                        break;
                                      case 2:
                                        add('Bematrix ram 0,5x2', 2);
                                        add('Bematrix ram 2x1', 1);
                                        add('Barskiva 2x0,5', 1);
                                        add('Lister forex', 4);
                                        add('Corners', 2);
                                        add('M8pin', 6);
                                        add('Special connector', 2);
                                        addGrafik('Bematrix ram 0,5x2', 2);
                                        addGrafik('Bematrix ram 2x1', 1);
                                        break;
                                      case 2.5:
                                        add('Bematrix ram 0,5x2', 2);
                                        add('Bematrix ram 2,5x1', 1);
                                        add('Barskiva 2,5x0,5', 1);
                                        add('Lister forex', 4);
                                        add('Corners', 2);
                                        add('M8pin', 6);
                                        add('Special connector', 2);
                                        addGrafik('Bematrix ram 0,5x2', 2);
                                        addGrafik('Bematrix ram 2,5x1', 1);
                                        break;
                                      case 3:
                                        add('Bematrix ram 0,5x2', 2);
                                        add('Bematrix ram 3x1', 1);
                                        add('Barskiva 3x0,5', 1);
                                        add('Lister forex', 4);
                                        add('Corners', 2);
                                        add('M8pin', 6);
                                        add('Special connector', 2);
                                        addGrafik('Bematrix ram 0,5x2', 2);
                                        addGrafik('Bematrix ram 3x1', 1);
                                        break;
                                    }
                                  }
                                });
                              }
                              if (graphic && graphic !== 'none') {
                                const g = GRAPHICS.find(gr => gr.value === graphic);
                                if (g) (packlistaData.totals as any)['Grafik'] = g.label;
                              }
                              
                              // V√§xter
                              if ((plants || []).length > 0) {
                                const plantCounts: Record<string, number> = {};
                                (plants || []).forEach(p => {
                                  const label = PLANT_TYPES[p.type]?.label || 'Ok√§nd';
                                  plantCounts[label] = (plantCounts[label] || 0) + 1;
                                });
                                Object.keys(plantCounts).forEach(lbl => {
                                  (packlistaData.totals as any)[lbl] = ((packlistaData.totals as any)[lbl] || 0) + plantCounts[lbl];
                                });
                              }
                              
                              // M√∂bler
                              if ((furniture || []).length > 0) {
                                const furnCounts: Record<string, number> = {};
                                (furniture || []).forEach(f => {
                                  const label = FURNITURE_TYPES[f.type]?.label || 'Ok√§nd';
                                  furnCounts[label] = (furnCounts[label] || 0) + 1;
                                });
                                Object.keys(furnCounts).forEach(lbl => {
                                  (packlistaData.totals as any)[lbl] = ((packlistaData.totals as any)[lbl] || 0) + furnCounts[lbl];
                                });
                              }
                              
                              // Truss-delar
                              if (selectedTrussType > 0) {
                                const sel = TRUSS_TYPES[selectedTrussType];
                                if (sel.type === 'hanging-square') {
                                  (packlistaData.totals as any)['Truss 2m'] = ((packlistaData.totals as any)['Truss 2m'] || 0) + 4;
                                  (packlistaData.totals as any)['Vajer upph√§ngning'] = ((packlistaData.totals as any)['Vajer upph√§ngning'] || 0) + 4;
                                  (packlistaData.totals as any)['Trusslampa'] = ((packlistaData.totals as any)['Trusslampa'] || 0) + 4;
                                } else if (sel.type === 'hanging-round') {
                                  (packlistaData.totals as any)['Truss rund 90grader'] = ((packlistaData.totals as any)['Truss rund 90grader'] || 0) + 4;
                                  (packlistaData.totals as any)['Vajer upph√§ngning'] = ((packlistaData.totals as any)['Vajer upph√§ngning'] || 0) + 4;
                                  (packlistaData.totals as any)['Trusslampa'] = ((packlistaData.totals as any)['Trusslampa'] || 0) + 6;
                                } else if (sel.type === 'front-straight') {
                                  const frontWidth = floorIndex !== null ? (FLOOR_SIZES[floorIndex].custom ? customFloorWidth : FLOOR_SIZES[floorIndex].width) : 0;
                                  const twoMeterCount = Math.floor(frontWidth / 2);
                                  const remainder = frontWidth - (twoMeterCount * 2);
                                  const oneMeterCount = Math.round(remainder);
                                  if (twoMeterCount > 0) (packlistaData.totals as any)['Truss 2m'] = ((packlistaData.totals as any)['Truss 2m'] || 0) + twoMeterCount;
                                  if (oneMeterCount > 0) (packlistaData.totals as any)['Truss 1m'] = ((packlistaData.totals as any)['Truss 1m'] || 0) + oneMeterCount;
                                  (packlistaData.totals as any)['Vajer upph√§ngning'] = ((packlistaData.totals as any)['Vajer upph√§ngning'] || 0) + 4;
                                  const lampCount = Math.round(frontWidth);
                                  if (lampCount > 0) (packlistaData.totals as any)['Trusslampa'] = ((packlistaData.totals as any)['Trusslampa'] || 0) + lampCount;
                                }
                              }
                            } catch (e) {
                              console.error('Fel vid f√∂rb√§ttring av packlista:', e);
                            }
                            
                            const orderData: OrderData = {
                              floorSize: floorIndex !== null ? FLOOR_SIZES[floorIndex] : null,
                              wallConfig: {
                                shape: wallShape,
                                height: wallHeight,
                                width: floorIndex !== null ? FLOOR_SIZES[floorIndex].width : 0,
                                depth: floorIndex !== null ? FLOOR_SIZES[floorIndex].depth : 0
                              },
                              furniture: [],
                              plants: [],
                              decorations: [],
                              storages: [],
                              totalPrice: totalCost,
                              packlista: packlistaData // Spara hela den f√∂rb√§ttrade packlistan
                            };
                            
                            // Samla alla PDF-filer
                            const pdfBlob = pdf.output('blob');
                            const wallPDFs: { name: string; blob: Blob }[] = [];
                            const storagePDFs: { name: string; blob: Blob }[] = [];
                            
                            // Generera v√§gg-PDFer fr√•n VEPA designs
                            if (vepaWallDesigns.length > 0) {
                              console.log('üìÑ Genererar VEPA tryckfiler...');
                              for (const design of vepaWallDesigns) {
                                try {
                                  const designPDF = new jsPDF('portrait', 'mm', [design.widthMM, design.heightMM]);
                                  
                                  // Bakgrundsf√§rg
                                  if (design.backgroundColor && design.backgroundColorRGB) {
                                    designPDF.setFillColor(design.backgroundColorRGB);
                                    designPDF.rect(0, 0, design.widthMM, design.heightMM, 'F');
                                  }
                                  
                                  // Bakgrundsbild
                                  if (design.backgroundImage) {
                                    designPDF.addImage(design.backgroundImage, 'JPEG', 0, 0, design.widthMM, design.heightMM);
                                  }
                                  
                                  // Logo
                                  if (design.logo) {
                                    designPDF.addImage(
                                      design.logo.imageData,
                                      'PNG',
                                      design.logo.x,
                                      design.logo.y,
                                      design.logo.width,
                                      design.logo.height
                                    );
                                  }
                                  
                                  const designBlob = designPDF.output('blob');
                                  wallPDFs.push({
                                    name: `VEPA_${design.wallLabel}_${design.widthMM}x${design.heightMM}mm`,
                                    blob: designBlob
                                  });
                                } catch (err) {
                                  console.error('Fel vid generering av VEPA PDF:', err);
                                }
                              }
                            }
                            
                            // Generera v√§gg-PDFer fr√•n FOREX designs
                            if (forexWallDesigns.length > 0) {
                              console.log('üìÑ Genererar FOREX tryckfiler...');
                              for (const design of forexWallDesigns) {
                                try {
                                  const designPDF = new jsPDF('portrait', 'mm', [design.widthMM, design.heightMM]);
                                  
                                  if (design.backgroundColor && design.backgroundColorRGB) {
                                    designPDF.setFillColor(design.backgroundColorRGB);
                                    designPDF.rect(0, 0, design.widthMM, design.heightMM, 'F');
                                  }
                                  
                                  if (design.backgroundImage) {
                                    designPDF.addImage(design.backgroundImage, 'JPEG', 0, 0, design.widthMM, design.heightMM);
                                  }
                                  
                                  if (design.logo) {
                                    designPDF.addImage(
                                      design.logo.imageData,
                                      'PNG',
                                      design.logo.x,
                                      design.logo.y,
                                      design.logo.width,
                                      design.logo.height
                                    );
                                  }
                                  
                                  const designBlob = designPDF.output('blob');
                                  wallPDFs.push({
                                    name: `FOREX_${design.wallLabel}_${design.widthMM}x${design.heightMM}mm`,
                                    blob: designBlob
                                  });
                                } catch (err) {
                                  console.error('Fel vid generering av FOREX PDF:', err);
                                }
                              }
                            }
                            
                            // Generera f√∂rr√•ds-PDFer
                            if (storageDesigns.size > 0) {
                              console.log('üìÑ Genererar f√∂rr√•ds tryckfiler...');
                              storageDesigns.forEach((storageData, storageId) => {
                                storageData.designs.forEach((design) => {
                                  try {
                                    const designPDF = new jsPDF('portrait', 'mm', [design.widthMM, design.heightMM]);
                                    
                                    if (design.backgroundColor && design.backgroundColorRGB) {
                                      designPDF.setFillColor(design.backgroundColorRGB);
                                      designPDF.rect(0, 0, design.widthMM, design.heightMM, 'F');
                                    }
                                    
                                    if (design.backgroundImage) {
                                      designPDF.addImage(design.backgroundImage, 'JPEG', 0, 0, design.widthMM, design.heightMM);
                                    }
                                    
                                    if (design.logo) {
                                      designPDF.addImage(
                                        design.logo.imageData,
                                        'PNG',
                                        design.logo.x,
                                        design.logo.y,
                                        design.logo.width,
                                        design.logo.height
                                      );
                                    }
                                    
                                    const designBlob = designPDF.output('blob');
                                    storagePDFs.push({
                                      name: `F√∂rr√•d${storageId}_${design.wallLabel}_${design.widthMM}x${design.heightMM}mm`,
                                      blob: designBlob
                                    });
                                  } catch (err) {
                                    console.error('Fel vid generering av f√∂rr√•ds PDF:', err);
                                  }
                                });
                              });
                            }
                            
                            console.log(`‚úÖ Genererade ${wallPDFs.length} v√§gg-PDFer och ${storagePDFs.length} f√∂rr√•ds-PDFer`);
                            
                            const pdfFiles = {
                              mainPDF: pdfBlob,
                              wallPDFs: wallPDFs,
                              storagePDFs: storagePDFs
                            };
                            
                            // Spara best√§llningen med alla PDFer
                            const orderId = await OrderManager.saveOrder(customerInfo, orderData, pdfFiles);
                            console.log('‚úÖ Best√§llning sparad med ID:', orderId);
                            console.log('üì¶ Best√§llningsdata:', { customerInfo, orderData, fileCount: wallPDFs.length + storagePDFs.length + 1 });
                          } catch (adminError) {
                            console.error('‚ö†Ô∏è Kunde inte spara till admin-portal:', adminError);
                            console.error('Detaljerat fel:', {
                              message: (adminError as any).message,
                              stack: (adminError as any).stack
                            });
                            alert('‚ö†Ô∏è Varning: Best√§llningen kunde inte sparas i admin-portalen. Mailet skickades √§nd√•.');
                            // Forts√§tt √§nd√•, mailet √§r viktigast
                          }
                          
                          alert(`‚úÖ Best√§llning skickad!\n\nÔøΩ Mail skickat\n\nüíæ PDF och alla tryckfiler sparade i admin-portalen\n\nÔøΩ Logga in p√• admin-portalen f√∂r att ladda ner ZIP-fil`);
                          
                        } catch (error) {
                          console.error('Fel vid best√§llning:', error);
                          const err = error as any;
                          console.error('Error details:', {
                            message: err.message,
                            stack: err.stack,
                            name: err.name
                          });
                          alert(`‚ùå Ett fel uppstod vid s√§ndning av best√§llningen: ${err.message || 'Ok√§nt fel'}\n\nKontrollera konsolen f√∂r mer detaljer.`);
                        }
                      } catch (error) {
                        console.error('Fel vid best√§llning:', error);
                        const err = error as any;
                        console.error('Error details:', {
                          message: err.message,
                          stack: err.stack,
                          name: err.name
                        });
                        alert(`Ett fel uppstod vid s√§ndning av best√§llningen: ${err.message || 'Ok√§nt fel'}`);
                      }
                    }}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      background: '#28a745',
                      color: '#fff',
                      border: 'none',
                      borderRadius: 6,
                      cursor: 'pointer',
                      fontWeight: 700,
                      fontSize: 14
                    }}
                  >
                    üìß Best√§ll
                  </button>
                </div>
              </div>
            );
          })() : (
            <div style={{ fontSize: 18, color: '#666' }}>V√§lj monterstorlek f√∂r att se pris</div>
          )}
          
          <div style={{ 
            fontSize: 11, 
            color: '#666',
            lineHeight: '1.3',
            marginTop: 8
          }}>
            Pris exklusive moms. Frakt och eventuella hotellkostnader tillkommer.
            <br />
            Montern: {floorIndex !== null ? `${calculateLaborCosts().area}m¬≤` : '-'}
          </div>
        </div>
      </div>
      
      {/* M√§ssmilj√∂-knapp i h√∂gra h√∂rnet */}
      <button
        style={{
          position: 'fixed',
          top: '20px',
          right: '20px',
          padding: '8px 16px',
          fontSize: '12px',
          background: showExhibitionHall ? '#28a745' : '#6c757d',
          color: '#fff',
          border: 'none',
          borderRadius: '6px',
          cursor: 'pointer',
          zIndex: 1000,
          fontWeight: '500',
          boxShadow: '0 2px 8px rgba(0,0,0,0.15)'
        }}
        onClick={() => setShowExhibitionHall(!showExhibitionHall)}
      >
        {showExhibitionHall ? 'üè¢ D√∂lj m√§sshall' : 'üè¢ Visa m√§sshall'}
      </button>
      
  {/* 3D-scen */}
  <div className="canvas-container" style={{ 
    marginLeft: window.innerWidth <= 768 ? '50vw' : '320px', 
    width: window.innerWidth <= 768 ? '50vw' : 'calc(100vw - 320px)', 
    height: '100vh', 
    position: 'relative',
    background: '#f0f0f0',
    display: 'block'
  }}>
        {floorIndex === null ? (
          // Visa instruktioner n√§r ingen monterstorlek √§r vald
          <div style={{
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100%',
            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
            color: 'white',
            textAlign: 'center',
            padding: '20px'
          }}>
            <div>
              {window.innerWidth <= 768 ? (
                // Mobilversion - visa meddelande om utveckling
                <>
                  <div style={{
                    background: 'rgba(255, 193, 7, 0.9)',
                    color: '#000',
                    padding: '15px',
                    borderRadius: '8px',
                    marginBottom: '20px',
                    fontSize: '14px',
                    fontWeight: '600'
                  }}>
                    üì± Mobilversion under uppbyggnad<br />
                    F√∂r b√§sta upplevelse, anv√§nd desktop/dator
                  </div>
                  <h2 style={{ 
                    fontSize: '18px',
                    marginBottom: '10px',
                    fontWeight: '600'
                  }}>
                    V√§lkommen till Monterhyra! üèóÔ∏è
                  </h2>
                </>
              ) : (
                // Desktop version - vanlig v√§lkomsttext
                <h2 style={{ 
                  fontSize: '24px',
                  marginBottom: '10px',
                  fontWeight: '600'
                }}>
                  V√§lkommen till Monterhyra! üèóÔ∏è
                </h2>
              )}
              <p style={{ 
                fontSize: window.innerWidth <= 768 ? '12px' : '16px',
                opacity: 0.9,
                maxWidth: '300px'
              }}>
                V√§lj en monterstorlek i menyn {window.innerWidth <= 768 ? 'till v√§nster' : ''} f√∂r att b√∂rja designa din 3D-monter
              </p>
            </div>
          </div>
        ) : (() => {
          // (vepa overlay removed)
          
          // Hj√§lpfunktion f√∂r att f√• r√§tt golvdimensioner
          const getFloorDimensions = () => {
            const floorConfig = FLOOR_SIZES[floorIndex];
            if (floorConfig?.custom) {
              return { width: customFloorWidth, depth: customFloorDepth };
            }
            return { width: floorConfig.width, depth: floorConfig.depth };
          };
          
          const floorDimensions = getFloorDimensions();
          
          return (
            <Canvas 
              camera={{ 
                position: window.innerWidth <= 768 ? [0, 4, 10] : [0, 2, 6], // Zooma ut mer p√• mobil
                fov: window.innerWidth <= 768 ? 75 : 50 // Mycket bredare synf√§lt p√• mobil
              }} 
              shadows
              gl={{ preserveDrawingBuffer: true }}
              style={{ background: '#f0f0f0' }} // S√§kerst√§ll synlig bakgrund
            >
            <CaptureHelper ref={captureRef} onHideGrid={setHideGridForCapture} />
            {/* Visa golvplatta - d√∂lj under PDF-generering */}
            {!hideGridForCapture && <Grid args={[20, 20]} cellColor="#bbb" sectionColor="#888" fadeDistance={20} position={[0, 0, 0]} />}
            
            {/* √ÖTERG√Ö TILL FUNGERANDE BELYSNING */}
            {showExhibitionHall ? (
              <>
                <ambientLight intensity={0.4} />
                <directionalLight position={[5, 10, 5]} intensity={0.3} />
              </>
            ) : (
              <>
                <ambientLight intensity={0.8} />
                <directionalLight position={[5, 10, 5]} intensity={0.5} />
              </>
            )}
            
            {/* M√§sshallsmilj√∂ - visas bara n√§r showExhibitionHall √§r true */}
            {showExhibitionHall && (
              <>
                {/* PREMIUM M√ÑSSGOLV - Polerat betong-look */}
                <mesh position={[0, -0.02, 0]} receiveShadow>
                  <boxGeometry args={[100, 0.04, 100]} />
                  <meshPhysicalMaterial 
                    color="#e8e8e8" 
                    roughness={0.2}
                    metalness={0.1}
                    clearcoat={0.8}
                    reflectivity={0.3}
                  />
                </mesh>
                
                {/* M√§ssgolv detaljer - Texturerade sektioner */}
                {[-40, -20, 0, 20, 40].map((x, i) => 
                  [-40, -20, 0, 20, 40].map((z, j) => (
                    <mesh key={`floor-${i}-${j}`} position={[x, -0.015, z]} receiveShadow>
                      <boxGeometry args={[18, 0.01, 18]} />
                      <meshPhysicalMaterial 
                        color="#f2f2f2" 
                        roughness={0.3}
                        metalness={0.0}
                      />
                    </mesh>
                  ))
                )}
                
                {/* INDUSTRIELLA H√ñGA V√ÑGGAR - Dubbelt s√• h√∂ga (8m) */}
                {/* Fram-v√§gg */}
                <mesh position={[0, 4, 50]} castShadow>
                  <boxGeometry args={[100, 8, 0.2]} />
                  <meshStandardMaterial color="#d5d5d5" roughness={0.8} metalness={0.1} />
                </mesh>
                
                {/* Bak-v√§gg */}
                <mesh position={[0, 4, -50]} castShadow>
                  <boxGeometry args={[100, 8, 0.2]} />
                  <meshStandardMaterial color="#d5d5d5" roughness={0.8} metalness={0.1} />
                </mesh>
                
                {/* V√§nster v√§gg */}
                <mesh position={[-50, 4, 0]} castShadow>
                  <boxGeometry args={[0.2, 8, 100]} />
                  <meshStandardMaterial color="#d5d5d5" roughness={0.8} metalness={0.1} />
                </mesh>
                
                {/* H√∂ger v√§gg */}
                <mesh position={[50, 4, 0]} castShadow>
                  <boxGeometry args={[0.2, 8, 100]} />
                  <meshStandardMaterial color="#d5d5d5" roughness={0.8} metalness={0.1} />
                </mesh>
                
                {/* INDUSTRIELL M√ÑSSBELYSNING - H√∂gt upp √∂ver v√§ggarna (12m h√∂jd) */}
                {/* Spotlight rad 1 - l√§ngs fram-sidan */}
                <spotLight
                  position={[-30, 12, 40]}
                  target-position={[-30, 0, 0]}
                  intensity={200}
                  angle={Math.PI / 6}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                <spotLight
                  position={[0, 12, 40]}
                  target-position={[0, 0, 0]}
                  intensity={200}
                  angle={Math.PI / 6}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                <spotLight
                  position={[30, 12, 40]}
                  target-position={[30, 0, 0]}
                  intensity={200}
                  angle={Math.PI / 6}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                
                {/* Spotlight rad 2 - l√§ngs mitten */}
                <spotLight
                  position={[-20, 12, 0]}
                  target-position={[-20, 0, 0]}
                  intensity={180}
                  angle={Math.PI / 5}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                <spotLight
                  position={[20, 12, 0]}
                  target-position={[20, 0, 0]}
                  intensity={180}
                  angle={Math.PI / 5}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                
                {/* Spotlight rad 3 - l√§ngs bak-sidan */}
                <spotLight
                  position={[-30, 12, -40]}
                  target-position={[-30, 0, 0]}
                  intensity={200}
                  angle={Math.PI / 6}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                <spotLight
                  position={[30, 12, -40]}
                  target-position={[30, 0, 0]}
                  intensity={200}
                  angle={Math.PI / 6}
                  penumbra={0.3}
                  distance={50}
                  color="#ffffff"
                  castShadow
                />
                
                {/* Metalliska lamparmatur - Industriell k√§nsla */}
                {[
                  [-30, 40], [0, 40], [30, 40],  // Fram-rad
                  [-20, 0], [20, 0],             // Mitt-rad  
                  [-30, -40], [30, -40]          // Bak-rad
                ].map(([x, z], index) => (
                  <group key={`fixture-${index}`} position={[x, 11.5, z]}>
                    {/* Metallisk lamph√•llare */}
                    <mesh>
                      <cylinderGeometry args={[0.3, 0.4, 0.8, 8]} />
                      <meshPhysicalMaterial 
                        color="#2a2a2a" 
                        roughness={0.3} 
                        metalness={0.9}
                      />
                    </mesh>
                    {/* Kabel upp√•t */}
                    <mesh position={[0, 1, 0]}>
                      <cylinderGeometry args={[0.02, 0.02, 2, 8]} />
                      <meshStandardMaterial color="#000" />
                    </mesh>
                  </group>
                ))}
                
                {/* Ljusa monterplatser - UT√ñKAD LAYOUT MED G√ÖNGAR */}
                {/* Rad 1 - V√§nster sida */}
                <mesh position={[-35, 0.01, -30]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[-35, 0.01, -15]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[-35, 0.01, 0]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[-35, 0.01, 15]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[-35, 0.01, 30]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                
                {/* Rad 2 - Mitt-v√§nster (v√•r huvudmont√∂r h√§r) */}
                <mesh position={[-15, 0.01, -30]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 8]} />
                  <meshStandardMaterial color="#e6f3ff" roughness={0.3} />
                </mesh>
                {/* Tom plats f√∂r huvudmont√∂r - h√§r renderas v√•r designade mont√∂r */}
                <mesh position={[-15, 0.01, 15]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[-15, 0.01, 30]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 8]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                
                {/* Rad 3 - Centrum (tom g√•ng) */}
                {/* Ingen mont√∂r h√§r - √∂ppen g√•ng f√∂r r√∂relse */}
                
                {/* Rad 4 - Mitt-h√∂ger */}
                <mesh position={[15, 0.01, -30]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 8]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[15, 0.01, -10]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[15, 0.01, 10]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[15, 0.01, 30]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 8]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                
                {/* Rad 5 - H√∂ger sida */}
                <mesh position={[35, 0.01, -30]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[35, 0.01, -15]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[35, 0.01, 0]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[35, 0.01, 15]} receiveShadow>
                  <boxGeometry args={[8, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                <mesh position={[35, 0.01, 30]} receiveShadow>
                  <boxGeometry args={[6, 0.02, 6]} />
                  <meshStandardMaterial color="#ffffff" roughness={0.3} />
                </mesh>
                
                {/* G√ÖNG-MARKERINGAR - Gr√• banor mellan montrar */}
                {/* Huvudg√•ng genom mitten (nord-syd) */}
                <mesh position={[0, 0.005, 0]} receiveShadow>
                  <boxGeometry args={[8, 0.01, 80]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>
                
                {/* Tv√§rsg√•ngar (√∂st-v√§st) */}
                <mesh position={[-25, 0.005, -30]} receiveShadow>
                  <boxGeometry args={[20, 0.01, 4]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>
                <mesh position={[25, 0.005, -30]} receiveShadow>
                  <boxGeometry args={[20, 0.01, 4]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>
                
                <mesh position={[-25, 0.005, 0]} receiveShadow>
                  <boxGeometry args={[20, 0.01, 4]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>
                <mesh position={[25, 0.005, 0]} receiveShadow>
                  <boxGeometry args={[20, 0.01, 4]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>
                
                <mesh position={[-25, 0.005, 30]} receiveShadow>
                  <boxGeometry args={[20, 0.01, 4]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>
                <mesh position={[25, 0.005, 30]} receiveShadow>
                  <boxGeometry args={[20, 0.01, 4]} />
                  <meshStandardMaterial color="#d0d0d0" roughness={0.7} />
                </mesh>

                {/* RENDER BOOTH TEMPLATES P√Ö M√ÑSSHALLSPLATSER */}
                {Object.entries(exhibitionBooths).map(([boothId, templateId]) => {
                  const template = EXHIBITION_BOOTH_TEMPLATES.find(t => t.id === templateId);
                  if (!template) return null;
                  
                  // Booth positioner baserat p√• booth ID
                  const boothPositions: { [key: string]: { x: number, z: number } } = {
                    'booth-1': { x: -35, z: -30 },
                    'booth-2': { x: -35, z: -15 }, 
                    'booth-3': { x: -35, z: 0 },
                    'booth-4': { x: -35, z: 15 },
                    'booth-5': { x: -35, z: 30 },
                    'booth-6': { x: -15, z: -30 },
                    'booth-7': { x: -15, z: 15 },
                    'booth-8': { x: -15, z: 30 },
                    'booth-9': { x: 15, z: -30 },
                    'booth-10': { x: 15, z: -10 },
                    'booth-11': { x: 15, z: 10 },
                    'booth-12': { x: 15, z: 30 },
                    'booth-13': { x: 35, z: -30 },
                    'booth-14': { x: 35, z: -15 },
                    'booth-15': { x: 35, z: 0 },
                    'booth-16': { x: 35, z: 15 },
                    'booth-17': { x: 35, z: 30 }
                  };
                  
                  const position = boothPositions[boothId];
                  if (!position) return null;
                  
                  return (
                    <ExhibitionBoothRenderer 
                      key={boothId}
                      booth={template}
                      position={position}
                    />
                  );
                })}
              </>
            )}
            
            <Floor 
              width={floorDimensions.width} 
              depth={floorDimensions.depth} 
            />
            
            {carpetIndex !== 0 && CARPET_COLORS[carpetIndex].color && (
              <Carpet width={floorDimensions.width} depth={floorDimensions.depth} color={CARPET_COLORS[carpetIndex].color as string} />
            )}
            
            {/* Disk placering mark√∂rer - visa gr√∂na rutor p√• halvmeter precision */}
            {wallShape && wallShape !== '' && counterMarkersVisible && (() => {
              const floor = floorDimensions;
              const markers = [];
              
              // Skapa mark√∂rer f√∂r varje halvmeter (finare precision f√∂r diskar)
              for (let x = 0; x < floor.width * 2; x++) {
                for (let z = 0; z < floor.depth * 2; z++) {
                  const posX = x * 0.5 - floor.width/2 + 0.25;
                  const posZ = z * 0.5 - floor.depth/2 + 0.25;
                  
                  markers.push(
                    <mesh
                      key={`counter-marker-${x}-${z}`}
                      position={[posX, 0.13, posZ]}
                      rotation={[-Math.PI / 2, 0, 0]}
                      onClick={() => {
                        console.log('üü¢ Disk marker clicked!', { floorIndex, selectedCounterType });
                        // Skapa disk direkt med vald typ
                        if (!floorIndex || selectedCounterType <= 0) {
                          console.warn('‚ùå Cannot place counter:', { floorIndex, selectedCounterType });
                          return;
                        }
                        
                        const counterConfig = COUNTER_TYPES[selectedCounterType];
                        console.log('‚úÖ Counter config:', counterConfig);
                        const floor = FLOOR_SIZES[floorIndex];
                        const actualWidth = floor.custom ? customFloorWidth : floor.width;
                        const actualDepth = floor.custom ? customFloorDepth : floor.depth;
                        
                        // Kontrollera att disken passar inom monteromr√•det
                        let canPlace = true;
                        if (counterConfig.type === 'L' || counterConfig.type === 'L-mirrored') {
                          // L-formad disk: kontrollera b√•de delar
                          const maxX = actualWidth / 2;
                          const minX = -actualWidth / 2;
                          const maxZ = actualDepth / 2;
                          const minZ = -actualDepth / 2;
                          
                          // Kontrollera f√∂rsta delen (1,5m x 0,5m)
                          if (posX + 0.75 > maxX || posX - 0.75 < minX || 
                              posZ + 0.25 > maxZ || posZ - 0.25 < minZ) {
                            canPlace = false;
                          }
                          
                          // Kontrollera andra delen beroende p√• typ
                          if (counterConfig.type === 'L') {
                            // Vanlig L: andra delen √•t h√∂ger
                            if (posX + 1.25 > maxX || posZ + 0.75 > maxZ || posZ - 0.75 < minZ) {
                              canPlace = false;
                            }
                          } else {
                            // Spegelv√§nd L: andra delen √•t v√§nster
                            if (posX - 1.25 < minX || posZ + 0.75 > maxZ || posZ - 0.75 < minZ) {
                              canPlace = false;
                            }
                          }
                        } else {
                          // Vanlig rak disk
                          const maxX = actualWidth / 2 - counterConfig.width / 2;
                          const minX = -actualWidth / 2 + counterConfig.width / 2;
                          const maxZ = actualDepth / 2 - counterConfig.depth / 2;
                          const minZ = -actualDepth / 2 + counterConfig.depth / 2;
                          
                          if (posX > maxX || posX < minX || posZ > maxZ || posZ < minZ) {
                            canPlace = false;
                          }
                        }
                        
                        if (canPlace && selectedCounterType > 0) {
                          console.log('‚úÖ Placing counter at:', { posX, posZ });
                          setCounters(prev => [...prev, {
                            id: nextCounterId,
                            type: selectedCounterType,
                            position: {x: posX, z: posZ},
                            rotation: 0
                          }]);
                          setNextCounterId(prev => prev + 1);
                        } else {
                          console.warn('‚ùå Cannot place - out of bounds or invalid type');
                        }
                      }}
                    >
                      <planeGeometry args={[0.4, 0.4]} />
                      <meshBasicMaterial color="#1ec94c" opacity={0.3} transparent />
                    </mesh>
                  );
                }
              }
              
              return <>{markers}</>;
            })()}

            {/* F√∂rr√•d placering mark√∂rer - visa bl√• rutor bara i framre h√∂rnen */}
            {wallShape && wallShape !== '' && storageMarkersVisible && (() => {
              const floor = floorDimensions;
              const storageMarkers: React.ReactElement[] = [];
              
              // Skapa mark√∂rer endast i de tv√• framre h√∂rnen
              const frontCorners = [
                {x: 0, z: 0}, // H√∂rn v√§nster fram
                {x: floor.width - 1, z: 0}, // H√∂rn h√∂ger fram  
              ];
              
              frontCorners.forEach((corner) => {
                const posX = corner.x - floor.width/2 + 0.5;
                const posZ = corner.z - floor.depth/2 + 0.5;
                
                storageMarkers.push(
                  <mesh
                    key={`storage-marker-${corner.x}-${corner.z}`}
                    position={[posX, 0.14, posZ]}
                    rotation={[-Math.PI / 2, 0, 0]}
                    onClick={() => {
                      console.log('üîµ Storage marker clicked!', { posX, posZ, floorIndex, selectedStorageType });
                      // Skapa f√∂rr√•d direkt med vald typ
                      if (!floorIndex || selectedStorageType <= 0) {
                        console.warn('‚ùå Cannot place storage:', { floorIndex, selectedStorageType });
                        return;
                      }
                      
                      const floor = FLOOR_SIZES[floorIndex];
                      const actualWidth = floor.custom ? customFloorWidth : floor.width;
                      const actualDepth = floor.custom ? customFloorDepth : floor.depth;
                      const storageConfig = STORAGE_TYPES[selectedStorageType];
                      
                      console.log('‚úÖ Storage config:', storageConfig, 'Floor:', { actualWidth, actualDepth });
                      
                      // Justera position s√• f√∂rr√•det h√•ller sig inom monteromr√•det
                      let adjustedX = posX;
                      let adjustedZ = posZ;
                      
                      // Kontrollera och justera X-position
                      const maxX = actualWidth / 2 - storageConfig.width / 2;
                      const minX = -actualWidth / 2 + storageConfig.width / 2;
                      if (adjustedX > maxX) adjustedX = maxX;
                      if (adjustedX < minX) adjustedX = minX;
                      
                      // Kontrollera och justera Z-position
                      const maxZ = actualDepth / 2 - storageConfig.depth / 2;
                      const minZ = -actualDepth / 2 + storageConfig.depth / 2;
                      if (adjustedZ > maxZ) adjustedZ = maxZ;
                      if (adjustedZ < minZ) adjustedZ = minZ;
                      
                      console.log('üìç Placing storage at:', { adjustedX, adjustedZ });
                      
                      setStorages(prev => [...prev, {
                        id: nextStorageId,
                        type: selectedStorageType,
                        position: {x: adjustedX, z: adjustedZ},
                        rotation: 0
                      }]);
                      setNextStorageId(prev => prev + 1);
                    }}
                  >
                    <planeGeometry args={[0.8, 0.8]} />
                    <meshBasicMaterial color="#4169E1" opacity={0.3} transparent />
                  </mesh>
                );
              });
              
              return <>{storageMarkers}</>;
            })()}

            {/* V√§xt placering mark√∂rer - visa gr√∂na rutor p√• hela golvet */}
            {wallShape && wallShape !== '' && plantMarkersVisible && (() => {
              const floor = floorDimensions;
              const plantMarkers = [];
              
              // Skapa mark√∂rer f√∂r varje golvplatta
              for (let x = 0; x < floor.width; x++) {
                for (let z = 0; z < floor.depth; z++) {
                  const posX = x - floor.width/2 + 0.5;
                  const posZ = z - floor.depth/2 + 0.5;
                  
                  // Kontrollera att positionen inte kolliderar med f√∂rr√•d, diskar eller TVs
                  const hasCollision = storages.some(storage => {
                    const storageConfig = STORAGE_TYPES[storage.type];
                    const isRotated = storage.rotation === 90 || storage.rotation === 270;
                    const effectiveWidth = isRotated ? storageConfig.depth : storageConfig.width;
                    const effectiveDepth = isRotated ? storageConfig.width : storageConfig.depth;
                    
                    return Math.abs(posX - storage.position.x) < effectiveWidth/2 + 0.3 &&
                           Math.abs(posZ - storage.position.z) < effectiveDepth/2 + 0.3;
                  }) || counters.some(counter => {
                    const counterConfig = COUNTER_TYPES[counter.type];
                    if (counterConfig.type === 'L') {
                      // L-formad disk kollision
                      return Math.abs(posX - counter.position.x) < 1.0 &&
                             Math.abs(posZ - counter.position.z) < 1.0;
                    } else if (counterConfig.type === 'L-mirrored') {
                      // Spegelv√§nd L-formad disk kollision
                      return Math.abs(posX - counter.position.x) < 1.0 &&
                             Math.abs(posZ - counter.position.z) < 1.0;
                    } else {
                      return Math.abs(posX - counter.position.x) < counterConfig.width/2 + 0.3 &&
                             Math.abs(posZ - counter.position.z) < counterConfig.depth/2 + 0.3;
                    }
                  });
                  
                  if (!hasCollision) {
                    plantMarkers.push(
                      <mesh
                        key={`plant-marker-${x}-${z}`}
                        position={[posX, 0.15, posZ]}
                        rotation={[-Math.PI / 2, 0, 0]}
                        onClick={() => {
                          // Skapa v√§xt direkt med vald typ
                          setPlants(prev => [...prev, {
                            id: nextPlantId,
                            type: selectedPlantType,
                            position: {x: posX, z: posZ},
                            rotation: 0
                          }]);
                          setNextPlantId(prev => prev + 1);
                        }}
                      >
                        <planeGeometry args={[0.6, 0.6]} />
                        <meshBasicMaterial color="#32CD32" opacity={0.4} transparent />
                      </mesh>
                    );
                  }
                }
              }
              
              return <>{plantMarkers}</>;
            })()}

            {/* M√∂bel placering mark√∂rer - visa bl√•a rutor p√• hela golvet */}
            {wallShape && wallShape !== '' && furnitureMarkersVisible && (() => {
              const floor = floorDimensions;
              const furnitureMarkers = [];
              
              // Skapa mark√∂rer f√∂r varje halv-meter (finare precision f√∂r m√∂bler)
              for (let x = 0; x < floor.width * 2; x++) {
                for (let z = 0; z < floor.depth * 2; z++) {
                  const posX = x * 0.5 - floor.width/2 + 0.25;
                  const posZ = z * 0.5 - floor.depth/2 + 0.25;
                  
                  // Kontrollera att positionen inte kolliderar med f√∂rr√•d, diskar eller TVs
                  const hasCollision = storages.some(storage => {
                    const storageConfig = STORAGE_TYPES[storage.type];
                    const isRotated = storage.rotation === 90 || storage.rotation === 270;
                    const effectiveWidth = isRotated ? storageConfig.depth : storageConfig.width;
                    const effectiveDepth = isRotated ? storageConfig.width : storageConfig.depth;
                    
                    return Math.abs(posX - storage.position.x) < effectiveWidth/2 + 0.2 &&
                           Math.abs(posZ - storage.position.z) < effectiveDepth/2 + 0.2;
                  }) || counters.some(counter => {
                    const counterConfig = COUNTER_TYPES[counter.type];
                    if (counterConfig.type === 'L') {
                      // L-formad disk kollision
                      return Math.abs(posX - counter.position.x) < 0.8 &&
                             Math.abs(posZ - counter.position.z) < 0.8;
                    } else if (counterConfig.type === 'L-mirrored') {
                      // Spegelv√§nd L-formad disk kollision
                      return Math.abs(posX - counter.position.x) < 0.8 &&
                             Math.abs(posZ - counter.position.z) < 0.8;
                    } else {
                      return Math.abs(posX - counter.position.x) < counterConfig.width/2 + 0.2 &&
                             Math.abs(posZ - counter.position.z) < counterConfig.depth/2 + 0.2;
                    }
                  });
                  
                  if (!hasCollision) {
                    furnitureMarkers.push(
                      <mesh
                        key={`furniture-marker-${x}-${z}`}
                        position={[posX, 0.15, posZ]}
                        rotation={[-Math.PI / 2, 0, 0]}
                        onClick={() => {
                          // Skapa m√∂bel direkt med vald typ
                          setFurniture(prev => [...prev, {
                            id: nextFurnitureId,
                            type: selectedFurnitureType,
                            position: {x: posX, z: posZ},
                            rotation: 0
                          }]);
                          setNextFurnitureId(prev => prev + 1);
                        }}
                      >
                        <planeGeometry args={[0.4, 0.4]} />
                        <meshBasicMaterial color="#4169E1" opacity={0.4} transparent />
                      </mesh>
                    );
                  }
                }
              }
              
              return <>{furnitureMarkers}</>;
            })()}

            {/* V√§ggar centrerade */}
            {wallShape && wallShape !== '' && (() => {
              const floor = floorDimensions;
              let wallColor = '#cccccc';
              let wallMaterial = 'standard';
              if (graphic === 'hyr') {
                wallColor = '#fff';
                wallMaterial = 'standard';
              } else if (graphic === 'vepa') {
                wallColor = '#d3d3d3'; // ljusgr√•
                wallMaterial = 'standard';
              } else if (graphic === 'forex') {
                wallColor = '#d3d3d3'; // ljusgr√•
                wallMaterial = 'standard';
              } else {
                wallColor = '#888'; // gr√• n√§r inget val √§r gjort
                wallMaterial = 'standard';
              }
              const thickness = 0.065;
              const height = wallHeight;
              // const offset = 0.065; // ej anv√§nd
              const makeWallSections = (start: [number, number, number], dir: [number, number, number], length: number, rotY: number) => {
                const sections = [];
                const n = Math.ceil(length);
                const actualWallColor = wallColor;
                for (let i = 0; i < n; i++) {
                  let segLength = 1;
                  if (i === n - 1) {
                    segLength = length - (n - 1);
                  }
                  const y = height/2 + 0.06; // Golvet √§r 0.12 tjockt p√• Y=0, s√• toppen √§r p√• 0.06
                  const pos: [number, number, number] = [
                    start[0] + dir[0] * (i + segLength/2),
                    y,
                    start[2] + dir[2] * (i + segLength/2)
                  ];
                  const Material = wallMaterial === 'basic' ? 'meshBasicMaterial' : 'meshStandardMaterial';
                  const thinWall = thickness / 2;
                  
                  // L√§gg till transparens n√§r ingen grafik √§r vald
                  const isTransparent = graphic === 'none';
                  const opacity = isTransparent ? 0.05 : 1.0;
                  
                  if (rotY === 0) {
                    // Bakv√§gg: Insidan (mot montern) √§r +Z, utsidan √§r -Z
                    // F√§rgad sida (insidan) - mot montern
                    
                    sections.push(
                      <mesh key={rotY + '-' + i + '-inside'} position={[pos[0], pos[1], pos[2] + thinWall/2]} rotation={[0, 0, 0]}>
                        <boxGeometry args={[segLength, height, thinWall]} />
                        {Material === 'meshBasicMaterial' ? (
                          <meshBasicMaterial color={actualWallColor} transparent={isTransparent} opacity={opacity} />
                        ) : (
                          <meshStandardMaterial color={actualWallColor} transparent={isTransparent} opacity={opacity} />
                        )}
                      </mesh>
                    );
                    // Vit sida (utsidan)
                    sections.push(
                      <mesh key={rotY + '-' + i + '-outside'} position={[pos[0], pos[1], pos[2] - thinWall/2]} rotation={[0, 0, 0]}>
                        <boxGeometry args={[segLength, height, thinWall]} />
                        {Material === 'meshBasicMaterial' ? (
                          <meshBasicMaterial color="#fff" transparent={isTransparent} opacity={opacity} />
                        ) : (
                          <meshStandardMaterial color="#fff" transparent={isTransparent} opacity={opacity} />
                        )}
                      </mesh>
                    );
                  } else {
                    // Sidov√§ggar: F√∂r v√§nsterv√§gg √§r insidan +X, f√∂r h√∂gerv√§gg √§r insidan -X
                    // Vi beh√∂ver veta vilken v√§gg det √§r baserat p√• startposition
                    const isLeftWall = start[0] < 0; // V√§nsterv√§gg har negativ X-startposition
                    
                    if (isLeftWall) {
                      // V√§nsterv√§gg: insidan √§r +X (mot mitten av montern)
                      sections.push(
                        <mesh key={rotY + '-' + i + '-inside'} position={[pos[0] + thinWall/2, pos[1], pos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[segLength, height, thinWall]} />
                          {Material === 'meshBasicMaterial' ? (
                            <meshBasicMaterial color={actualWallColor} transparent={isTransparent} opacity={opacity} />
                          ) : (
                            <meshStandardMaterial color={actualWallColor} transparent={isTransparent} opacity={opacity} />
                          )}
                        </mesh>
                      );
                      // Utsidan √§r -X
                      sections.push(
                        <mesh key={rotY + '-' + i + '-outside'} position={[pos[0] - thinWall/2, pos[1], pos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[segLength, height, thinWall]} />
                          {Material === 'meshBasicMaterial' ? (
                            <meshBasicMaterial color="#fff" transparent={isTransparent} opacity={opacity} />
                          ) : (
                            <meshStandardMaterial color="#fff" transparent={isTransparent} opacity={opacity} />
                          )}
                        </mesh>
                      );
                    } else {
                      // H√∂gerv√§gg: insidan √§r -X (mot mitten av montern)
                      sections.push(
                        <mesh key={rotY + '-' + i + '-inside'} position={[pos[0] - thinWall/2, pos[1], pos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[segLength, height, thinWall]} />
                          {Material === 'meshBasicMaterial' ? (
                            <meshBasicMaterial color={actualWallColor} transparent={isTransparent} opacity={opacity} />
                          ) : (
                            <meshStandardMaterial color={actualWallColor} transparent={isTransparent} opacity={opacity} />
                          )}
                        </mesh>
                      );
                      // Utsidan √§r +X
                      sections.push(
                        <mesh key={rotY + '-' + i + '-outside'} position={[pos[0] + thinWall/2, pos[1], pos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[segLength, height, thinWall]} />
                          {Material === 'meshBasicMaterial' ? (
                            <meshBasicMaterial color="#fff" transparent={isTransparent} opacity={opacity} />
                          ) : (
                            <meshStandardMaterial color="#fff" transparent={isTransparent} opacity={opacity} />
                          )}
                        </mesh>
                      );
                    }
                  }
                }
                
                // L√§gg till skarvlinjer p√• B√ÖDE insidan och utsidan av alla v√§ggtyper (6mm silver/gr√• streck mellan varje meter)
                const seamWidth = 0.006; // 6mm i meter
                const seamColor = "#c0c0c0"; // Silver/gr√• f√§rg
                
                // L√§gg till vertikala skarvlinjer mellan varje meter p√• B√ÖDA SIDOR av v√§ggen
                for (let i = 1; i < n; i++) {
                  const seamY = height/2 + 0.06;
                  const seamPos: [number, number, number] = [
                    start[0] + dir[0] * i,
                    seamY,
                    start[2] + dir[2] * i
                  ];
                  
                  if (rotY === 0) {
                    // Bakv√§gg: Vertikal skarv p√• INSIDAN (positiv Z-riktning)
                    sections.push(
                      <mesh key={rotY + '-seam-inside-' + i} position={[seamPos[0], seamPos[1], seamPos[2] + thickness/4 + 0.001]} rotation={[0, 0, 0]}>
                        <boxGeometry args={[seamWidth, height, thickness/2]} />
                        <meshStandardMaterial color={seamColor} />
                      </mesh>
                    );
                    // Bakv√§gg: Vertikal skarv p√• UTSIDAN (negativ Z-riktning)
                    sections.push(
                      <mesh key={rotY + '-seam-outside-' + i} position={[seamPos[0], seamPos[1], seamPos[2] - thickness/4 - 0.001]} rotation={[0, 0, 0]}>
                        <boxGeometry args={[seamWidth, height, thickness/2]} />
                        <meshStandardMaterial color={seamColor} />
                      </mesh>
                    );
                  } else {
                    // Sidov√§ggar: Vertikala skarvar p√• B√ÖDA SIDOR
                    const isLeftWall = start[0] < 0;
                    
                    if (isLeftWall) {
                      // V√§nsterv√§gg: INSIDAN (positiv X) och UTSIDAN (negativ X)
                      sections.push(
                        <mesh key={rotY + '-seam-inside-' + i} position={[seamPos[0] + thickness/4 + 0.001, seamPos[1], seamPos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[seamWidth, height, thickness/2]} />
                          <meshStandardMaterial color={seamColor} />
                        </mesh>
                      );
                      sections.push(
                        <mesh key={rotY + '-seam-outside-' + i} position={[seamPos[0] - thickness/4 - 0.001, seamPos[1], seamPos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[seamWidth, height, thickness/2]} />
                          <meshStandardMaterial color={seamColor} />
                        </mesh>
                      );
                    } else {
                      // H√∂gerv√§gg: INSIDAN (negativ X) och UTSIDAN (positiv X)
                      sections.push(
                        <mesh key={rotY + '-seam-inside-' + i} position={[seamPos[0] - thickness/4 - 0.001, seamPos[1], seamPos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[seamWidth, height, thickness/2]} />
                          <meshStandardMaterial color={seamColor} />
                        </mesh>
                      );
                      sections.push(
                        <mesh key={rotY + '-seam-outside-' + i} position={[seamPos[0] + thickness/4 + 0.001, seamPos[1], seamPos[2]]} rotation={[0, Math.PI/2, 0]}>
                          <boxGeometry args={[seamWidth, height, thickness/2]} />
                          <meshStandardMaterial color={seamColor} />
                        </mesh>
                      );
                    }
                  }
                }
                
                return sections;
              };
              // üî• F√ñRB√ÑTTRAT TV-POSITIONERINGSSYSTEM - Fler positioner och h√∂jder
              const tvHeights = [
                { name: 'h√∂g', y: height * 0.75 + 0.1, label: 'H' },     // H√∂g position (75% upp p√• v√§ggen)
                { name: 'mellan', y: height * 0.5 + 0.06, label: 'M' }   // Mellan position (ursprunglig)
              ];
              
              const boxSize = 0.4; // Mindre storlek f√∂r fler positioner
              const gap = 0.25;    // Mindre mellanrum f√∂r fler positioner
              
              // Funktion f√∂r att r√§kna ut hur m√•nga platser som f√•r plats p√• en v√§gg (fler positioner)
              const getSpots = (length: number) => {
                const n = Math.floor((length + gap) / (boxSize + gap));
                return Math.max(2, n); // Minst 2 positioner per v√§gg
              };
              // Antal platser per v√§gg
              const spotsBack = getSpots(floor.width);
              const spotsLeft = getSpots(floor.depth);
              const spotsRight = getSpots(floor.depth);

              // StartX f√∂r varje v√§gg
              const calcWallStartX = (spots: number) => {
                const totalWidth = spots * boxSize + (spots - 1) * gap;
                return -totalWidth / 2 + boxSize / 2;
              };

              // Hj√§lpfunktion f√∂r att rendera TV p√• en v√§gg, endast om v√§ggen finns
              const wallExists = (wall: 'back'|'left'|'right') => {
                if (wallShape === 'straight') return wall === 'back';
                if (wallShape === 'l') return wall === 'back' || wall === 'left';
                if (wallShape === 'u') return true;
                return false;
              };

              const renderTVs = (wall: 'back'|'left'|'right') => {
                if (!wallExists(wall)) return null;
                let spots = wall === 'back' ? spotsBack : wall === 'left' ? spotsLeft : spotsRight;
                let wallStartX = calcWallStartX(spots);
                
                return tvs
                  .filter(tv => tv.wall === wall)
                  .map((tv) => {
                    const tvConfig = TV_SIZES[tv.size];
                    const tvLabel = tvConfig.label === 'Ingen' ? '' : `TV${tvConfig.label.replace(/"/g, '')}`;
                    const heightConfig = tvHeights[tv.heightIndex];
                    
                    let position: [number, number, number];
                    let rotation: [number, number, number] = [0, 0, 0];
                    if (wall === 'back') {
                      // Justera positionering f√∂r 75" beTV - mindre aggressiv f√∂r att inte f√∂rsvinna i trycket
                      const zOffset = tvConfig.label === '75" beTV' ? -(floor.depth/2) + 0.065 - 0.005 : -(floor.depth/2) + 0.065 + 0.025;
                      position = [wallStartX + tv.position * (boxSize + gap), heightConfig.y, zOffset];
                    } else if (wall === 'left') {
                      // Justera positionering f√∂r 75" beTV p√• v√§nster v√§gg
                      const xOffset = tvConfig.label === '75" beTV' ? -(floor.width/2) + 0.065 - 0.005 : -(floor.width/2) + 0.065 + 0.025;
                      position = [xOffset, heightConfig.y, wallStartX + tv.position * (boxSize + gap)];
                      rotation = [0, Math.PI/2, 0];
                    } else {
                      // Justera positionering f√∂r 75" beTV p√• h√∂ger v√§gg
                      const xOffset = tvConfig.label === '75" beTV' ? (floor.width/2) - 0.065 + 0.005 : (floor.width/2) - 0.065 - 0.025;
                      position = [xOffset, heightConfig.y, wallStartX + tv.position * (boxSize + gap)];
                      rotation = [0, -Math.PI/2, 0];
                    }
                    
                    return (
                      <group key={tv.id}>
                        <mesh
                          position={position}
                          rotation={rotation}
                          onDoubleClick={() => {
                            setTvs(prev => prev.map(t => {
                              if (t.id === tv.id) {
                                const newOrientation = t.orientation === 'landscape' ? 'portrait' : 'landscape';
                                const tvConfig = TV_SIZES[t.size];
                                const currentHeightConfig = tvHeights[t.heightIndex];
                                
                                // Ber√§kna TV:ns dimensioner i det nya l√§get
                                const tvWidth = newOrientation === 'portrait' ? tvConfig.height : tvConfig.width;
                                const tvHeight = newOrientation === 'portrait' ? tvConfig.width : tvConfig.height;
                                const halfTvWidth = tvWidth / 2;
                                const halfTvHeight = tvHeight / 2;
                                
                                // Kontrollera om TV:n sticker ut √∂ver v√§ggkanten (vertikalt)
                                const topEdge = currentHeightConfig.y + halfTvHeight;
                                const maxAllowedHeight = height - 0.1; // Lite marginal fr√•n toppen
                                
                                // Kontrollera om TV:n sticker ut √∂ver v√§ggkanten (horisontellt)
                                let wallLength = 0;
                                if (wall === 'back') {
                                  wallLength = floor.width;
                                } else {
                                  wallLength = floor.depth;
                                }
                                
                                const wallStartX = calcWallStartX(wall === 'back' ? spotsBack : wall === 'left' ? spotsLeft : spotsRight);
                                const currentTvCenterX = wallStartX + t.position * (boxSize + gap);
                                const leftEdge = currentTvCenterX - halfTvWidth;
                                const rightEdge = currentTvCenterX + halfTvWidth;
                                const wallLeftEdge = -wallLength / 2;
                                const wallRightEdge = wallLength / 2;
                                
                                let newHeightIndex = t.heightIndex;
                                let newPosition = t.position;
                                
                                // Om TV:n sticker ut √∂ver v√§ggen vertikalt, flytta ner den
                                if (topEdge > maxAllowedHeight) {
                                  for (let i = tvHeights.length - 1; i >= 0; i--) {
                                    const testHeight = tvHeights[i].y + halfTvHeight;
                                    if (testHeight <= maxAllowedHeight) {
                                      newHeightIndex = i;
                                      break;
                                    }
                                  }
                                }
                                
                                // Om TV:n sticker ut √∂ver v√§ggen horisontellt, flytta den
                                if (leftEdge < wallLeftEdge || rightEdge > wallRightEdge) {
                                  // Hitta den position som centrerar TV:n b√§st inom v√§ggen
                                  const spots = wall === 'back' ? spotsBack : wall === 'left' ? spotsLeft : spotsRight;
                                  let bestPosition = t.position;
                                  let bestFit = false;
                                  
                                  // Testa alla positioner och hitta den som fungerar b√§st
                                  for (let pos = 0; pos < spots; pos++) {
                                    const testCenterX = wallStartX + pos * (boxSize + gap);
                                    const testLeftEdge = testCenterX - halfTvWidth;
                                    const testRightEdge = testCenterX + halfTvWidth;
                                    
                                    if (testLeftEdge >= wallLeftEdge && testRightEdge <= wallRightEdge) {
                                      bestPosition = pos;
                                      bestFit = true;
                                      break;
                                    }
                                  }
                                  
                                  if (bestFit) {
                                    newPosition = bestPosition;
                                  } else {
                                    // Om ingen position fungerar, f√∂rs√∂k hitta den som sticker ut minst
                                    let minOverhang = Infinity;
                                    for (let pos = 0; pos < spots; pos++) {
                                      const testCenterX = wallStartX + pos * (boxSize + gap);
                                      const testLeftEdge = testCenterX - halfTvWidth;
                                      const testRightEdge = testCenterX + halfTvWidth;
                                      const overhang = Math.max(0, wallLeftEdge - testLeftEdge) + Math.max(0, testRightEdge - wallRightEdge);
                                      
                                      if (overhang < minOverhang) {
                                        minOverhang = overhang;
                                        bestPosition = pos;
                                      }
                                    }
                                    newPosition = bestPosition;
                                  }
                                }
                                
                                return {
                                  ...t, 
                                  orientation: newOrientation,
                                  heightIndex: newHeightIndex,
                                  position: newPosition
                                };
                              }
                              return t;
                            }));
                          }}
                          onContextMenu={(e) => {
                            e.stopPropagation();
                            // H√∂gerklick f√∂r att ta bort TV
                            setTvs(prev => prev.filter(t => t.id !== tv.id));
                          }}
                        >
                          <boxGeometry args={tv.orientation === 'portrait' ? [tvConfig.height, tvConfig.width, 0.08] : [tvConfig.width, tvConfig.height, 0.08]} />
                          <meshStandardMaterial color="#222" />
                        </mesh>
                        {tvLabel && (
                          <Text
                            position={[
                              wall === 'left' ? position[0] + 0.05 : wall === 'right' ? position[0] - 0.05 : position[0], 
                              position[1], 
                              wall === 'back' ? position[2] + 0.05 : position[2]
                            ]}
                            rotation={wall === 'back' ? [0, 0, 0] : wall === 'left' ? [0, Math.PI/2, 0] : [0, -Math.PI/2, 0]}
                            fontSize={0.08}
                            color="white"
                            anchorX="center"
                            anchorY="middle"
                          >
                            {tvLabel}
                          </Text>
                        )}
                        {/* H√∂jd-indikator p√• TV */}
                        <Text
                          position={[
                            wall === 'left' ? position[0] + 0.05 : wall === 'right' ? position[0] - 0.05 : position[0], 
                            position[1] - 0.25, 
                            wall === 'back' ? position[2] + 0.05 : position[2]
                          ]}
                          rotation={wall === 'back' ? [0, 0, 0] : wall === 'left' ? [0, Math.PI/2, 0] : [0, -Math.PI/2, 0]}
                          fontSize={0.06}
                          color="#4CAF50"
                          anchorX="center"
                          anchorY="middle"
                        >
                          {heightConfig.label}
                        </Text>
                      </group>
                    );
                  })
              };

              const renderLights = (wall: 'back'|'left'|'right') => {
                if (!wallExists(wall) || !showLights) return null;
                const wallLength = wall === 'back' ? floor.width : floor.depth;
                return Array.from({length: Math.floor(wallLength)}).map((_, i) => {
                  let rotation: [number, number, number] = [0, 0, 0];
                  let position: [number, number, number];
                  
                  const lightCenter = -wallLength/2 + (i + 0.5);
                  
                  if (wall === 'back') {
                    // Inne i montern - bakre v√§gg (15cm in fr√•n v√§gg), helt ovanp√• v√§ggen
                    position = [lightCenter, wallHeight + 0.07, -(floor.depth/2) + 0.12];
                  } else if (wall === 'left') {
                    // Inne i montern - v√§nster v√§gg (15cm in fr√•n v√§gg), helt ovanp√• v√§ggen
                    position = [-(floor.width/2) + 0.12, wallHeight + 0.07, lightCenter];
                    rotation = [0, Math.PI/2, 0];
                  } else {
                    // Inne i montern - h√∂ger v√§gg (15cm in fr√•n v√§gg), helt ovanp√• v√§ggen
                    position = [(floor.width/2) - 0.12, wallHeight + 0.07, lightCenter];
                    rotation = [0, -Math.PI/2, 0];
                  }
                  
                  // Kontrollera om denna lampa kolliderar med n√•got f√∂rr√•d
                  const hasCollisionWithStorage = storages.some(storage => {
                    const storageConfig = STORAGE_TYPES[storage.type];
                    const isRotated = storage.rotation === 90 || storage.rotation === 270;
                    const effectiveWidth = isRotated ? storageConfig.depth : storageConfig.width;
                    const effectiveDepth = isRotated ? storageConfig.width : storageConfig.depth;
                    
                    // Kontrollera om lampan √§r n√§ra f√∂rr√•dets position
                    const storageMinX = storage.position.x - effectiveWidth/2;
                    const storageMaxX = storage.position.x + effectiveWidth/2;
                    const storageMinZ = storage.position.z - effectiveDepth/2;
                    const storageMaxZ = storage.position.z + effectiveDepth/2;
                    
                    // Ut√∂ka omr√•det med lite marginal f√∂r att undvika lampor n√§ra f√∂rr√•det
                    const margin = 0.3;
                    
                    return position[0] >= storageMinX - margin && 
                           position[0] <= storageMaxX + margin &&
                           position[2] >= storageMinZ - margin && 
                           position[2] <= storageMaxZ + margin;
                  });
                  
                  // Visa bara lampan om den inte kolliderar med f√∂rr√•d
                  if (hasCollisionWithStorage) return null;
                  
                  return (
                    <group key={`light-${wall}-${i}`}>
                      {/* Lampram - ljusare gr√• f√§rg */}
                      <mesh position={position} rotation={rotation}>
                        <boxGeometry args={[0.06, 0.015, 0.3]} />
                        <meshStandardMaterial color="#999" />
                      </mesh>
                      
                      {/* Centrerad LED-strip - tydlig vit i mitten som i din bild */}
                      <mesh 
                        position={[
                          position[0], 
                          position[1] - 0.005, 
                          position[2]
                        ]} 
                        rotation={rotation}
                      >
                        <boxGeometry args={[0.05, 0.008, 0.25]} />
                        <meshStandardMaterial 
                          color="#ffffff" 
                          emissive="#ffffff" 
                          emissiveIntensity={1.2}
                        />
                      </mesh>
                      
                      {/* J√§mn bred belysning utan ringar */}
                      <spotLight
                        position={[position[0], position[1] - 0.01, position[2]]}
                        target-position={[position[0], 0, position[2]]}
                        intensity={0.3}
                        angle={Math.PI / 2.5}
                        penumbra={0.9}
                        color="#e8f4fd"
                        distance={4}
                        decay={1}
                      />
                      
                      {/* Mjuk ambient belysning f√∂r j√§mn t√§ckning */}
                      <pointLight
                        position={[position[0], position[1] - 0.4, position[2]]}
                        intensity={0.25}
                        color="#e8f4fd"
                        distance={3}
                        decay={0.3}
                      />
                      
                      {/* Extra diffust ljus f√∂r att fylla skuggor */}
                      <pointLight
                        position={[position[0], 0.5, position[2]]}
                        intensity={0.15}
                        color="#e8f4fd"
                        distance={3.5}
                        decay={0.2}
                      />
                    </group>
                  );
                });
              };

              // Hj√§lpfunktion f√∂r att rendera markers p√• en v√§gg, endast om v√§ggen finns och markers √§r synliga och man valt en riktig TV
              const renderMarkers = (wall: 'back'|'left'|'right') => {
                if (!wallExists(wall) || !tvMarkersVisible) return null;
                let spots = wall === 'back' ? spotsBack : wall === 'left' ? spotsLeft : spotsRight;
                let wallStartX = calcWallStartX(spots);
                
                // Rendera markers f√∂r alla h√∂jder och positioner
                return tvHeights.flatMap((heightConfig, heightIndex) => 
                  Array.from({length: spots}).map((_, positionIndex) => {
                    const isPlaced = tvs.some(tv => tv.wall === wall && tv.position === positionIndex && tv.heightIndex === heightIndex);
                    let position: [number, number, number];
                    let rotation: [number, number, number] = [0, 0, 0];
                    
                    if (wall === 'back') {
                      // Anv√§nd samma positioneringslogik som f√∂r TV:erna
                      const tvConfig = TV_SIZES[selectedTvSize];
                      const zOffset = tvConfig.label === '75" beTV' ? -(floor.depth/2) + 0.065 - 0.005 : -(floor.depth/2) + 0.065 + 0.015;
                      position = [wallStartX + positionIndex * (boxSize + gap), heightConfig.y, zOffset];
                    } else if (wall === 'left') {
                      // Anv√§nd samma positioneringslogik som f√∂r TV:erna
                      const tvConfig = TV_SIZES[selectedTvSize];
                      const xOffset = tvConfig.label === '75" beTV' ? -(floor.width/2) + 0.065 - 0.005 : -(floor.width/2) + 0.065 + 0.015;
                      position = [xOffset, heightConfig.y, wallStartX + positionIndex * (boxSize + gap)];
                      rotation = [0, Math.PI/2, 0];
                    } else {
                      // Anv√§nd samma positioneringslogik som f√∂r TV:erna
                      const tvConfig = TV_SIZES[selectedTvSize];
                      const xOffset = tvConfig.label === '75" beTV' ? (floor.width/2) - 0.065 + 0.005 : (floor.width/2) - 0.065 - 0.015;
                      position = [xOffset, heightConfig.y, wallStartX + positionIndex * (boxSize + gap)];
                      rotation = [0, -Math.PI/2, 0];
                    }
                    
                    return (
                      <group key={`${wall}-${positionIndex}-${heightIndex}`}>
                        {/* Marker-box */}
                        <mesh
                          position={position}
                          rotation={rotation}
                          onClick={() => {
                            if (isPlaced) return;
                            
                            // Smart placering - kontrollera b√•de vertikal och horisontell kollision
                            const tvConfig = TV_SIZES[selectedTvSize];
                            const tvWidth = tvConfig.width;   // B√∂rja i landscape
                            const tvHeight = tvConfig.height; // B√∂rja i landscape
                            const halfTvWidth = tvWidth / 2;
                            const halfTvHeight = tvHeight / 2;
                            
                            // Vertikal kollisionskontroll
                            const topEdge = heightConfig.y + halfTvHeight;
                            const maxAllowedHeight = height - 0.1; // Lite marginal fr√•n toppen
                            
                            let finalHeightIndex = heightIndex;
                            
                            // Om TV:n skulle sticka ut vertikalt, hitta en l√§mplig h√∂jd
                            if (topEdge > maxAllowedHeight) {
                              // Testa l√§gre positioner tills vi hittar en som fungerar
                              for (let i = tvHeights.length - 1; i >= 0; i--) {
                                const testHeight = tvHeights[i].y + halfTvHeight;
                                if (testHeight <= maxAllowedHeight) {
                                  finalHeightIndex = i;
                                  break;
                                }
                              }
                            }
                            
                            // Horisontell kollisionskontroll
                            let wallLength = 0;
                            if (wall === 'back') {
                              wallLength = floor.width;
                            } else {
                              wallLength = floor.depth;
                            }
                            
                            const tvCenterX = wallStartX + positionIndex * (boxSize + gap);
                            const leftEdge = tvCenterX - halfTvWidth;
                            const rightEdge = tvCenterX + halfTvWidth;
                            const wallLeftEdge = -wallLength / 2;
                            const wallRightEdge = wallLength / 2;
                            
                            let finalPosition = positionIndex;
                            
                            // Om TV:n sticker ut horisontellt, hitta b√§sta position
                            if (leftEdge < wallLeftEdge || rightEdge > wallRightEdge) {
                              let bestPosition = positionIndex;
                              let bestFit = false;
                              
                              // Testa alla positioner och hitta den som fungerar b√§st
                              for (let pos = 0; pos < spots; pos++) {
                                const testCenterX = wallStartX + pos * (boxSize + gap);
                                const testLeftEdge = testCenterX - halfTvWidth;
                                const testRightEdge = testCenterX + halfTvWidth;
                                
                                if (testLeftEdge >= wallLeftEdge && testRightEdge <= wallRightEdge) {
                                  bestPosition = pos;
                                  bestFit = true;
                                  break;
                                }
                              }
                              
                              if (bestFit) {
                                finalPosition = bestPosition;
                              } else {
                                // Om ingen position fungerar, hitta den som sticker ut minst
                                let minOverhang = Infinity;
                                for (let pos = 0; pos < spots; pos++) {
                                  const testCenterX = wallStartX + pos * (boxSize + gap);
                                  const testLeftEdge = testCenterX - halfTvWidth;
                                  const testRightEdge = testCenterX + halfTvWidth;
                                  const overhang = Math.max(0, wallLeftEdge - testLeftEdge) + Math.max(0, testRightEdge - wallRightEdge);
                                  
                                  if (overhang < minOverhang) {
                                    minOverhang = overhang;
                                    bestPosition = pos;
                                  }
                                }
                                finalPosition = bestPosition;
                              }
                            }
                            
                            // Skapa TV direkt med vald storlek p√• r√§tt position och h√∂jd
                            setTvs(prev => [...prev, {
                              id: nextTvId,
                              size: selectedTvSize,
                              wall: wall,
                              position: finalPosition,
                              heightIndex: finalHeightIndex,
                              orientation: 'landscape' as const
                            }]);
                            setNextTvId(prev => prev + 1);
                          }}
                        >
                          <boxGeometry args={[
                            boxSize * 0.8, 
                            boxSize * 0.6, 
                            TV_SIZES[selectedTvSize].label === '75" beTV' ? 0.08 : 0.02
                          ]} />
                          <meshStandardMaterial 
                            color={isPlaced ? "#ff4444" : "#4CAF50"} 
                            transparent 
                            opacity={TV_SIZES[selectedTvSize].label === '75" beTV' ? 0.9 : (isPlaced ? 0.3 : 0.7)}
                          />
                        </mesh>
                        
                        {/* H√∂jd-indikator */}
                        <Text
                          position={[
                            position[0],
                            position[1],
                            wall === 'back' ? position[2] + 0.02 : 
                            wall === 'left' ? position[2] : position[2]
                          ]}
                          rotation={rotation}
                          fontSize={0.08}
                          color={isPlaced ? "#ff4444" : "#4CAF50"}
                          anchorX="center"
                          anchorY="middle"
                        >
                          {heightConfig.label}
                        </Text>
                        
                        {/* Position-nummer */}
                        <Text
                          position={[
                            position[0],
                            position[1] - 0.15,
                            wall === 'back' ? position[2] + 0.02 : 
                            wall === 'left' ? position[2] : position[2]
                          ]}
                          rotation={rotation}
                          fontSize={0.06}
                          color="#666"
                          anchorX="center"
                          anchorY="middle"
                        >
                          {positionIndex + 1}
                        </Text>
                      </group>
                    );
                  })
                );
              };
              // Rendera v√§ggar enligt vald v√§ggform, men markers/TV p√• alla v√§ggar
              let back = null, left = null, right = null;
              const wallOffset = thickness / 2; // Halva v√§ggtjockleken
              if (wallShape === 'straight') {
                back = makeWallSections(
                  [-(floor.width/2) + wallOffset, height/2 + 0.06, -(floor.depth/2) + wallOffset],
                  [1, 0, 0],
                  floor.width - thickness,
                  0
                );
              } else if (wallShape === 'l') {
                back = makeWallSections(
                  [-(floor.width/2) + wallOffset, height/2 + 0.06, -(floor.depth/2) + wallOffset],
                  [1, 0, 0],
                  floor.width - thickness,
                  0
                );
                left = makeWallSections(
                  [-(floor.width/2) + wallOffset, height/2 + 0.06, -(floor.depth/2) + wallOffset],
                  [0, 0, 1],
                  floor.depth - thickness,
                  Math.PI/2
                );
              } else if (wallShape === 'u') {
                back = makeWallSections(
                  [-(floor.width/2) + wallOffset, height/2 + 0.06, -(floor.depth/2) + wallOffset],
                  [1, 0, 0],
                  floor.width - thickness,
                  0
                );
                left = makeWallSections(
                  [-(floor.width/2) + wallOffset, height/2 + 0.06, -(floor.depth/2) + wallOffset],
                  [0, 0, 1],
                  floor.depth - thickness,
                  Math.PI/2
                );
                right = makeWallSections(
                  [(floor.width/2) - wallOffset, height/2 + 0.06, -(floor.depth/2) + wallOffset],
                  [0, 0, 1],
                  floor.depth - thickness,
                  Math.PI/2
                );
              }
              return <>
                {back}
                {left}
                {right}
                
                {/* VEPA v√§ggar med design fr√•n VepaPDFGenerator */}
                {graphic === 'vepa' && vepaWallDesigns.length > 0 && floorIndex !== null && (() => {
                  console.log('üèóÔ∏è RENDERING VEPA WALLS BLOCK, designs:', vepaWallDesigns.length);
                  const floor = FLOOR_SIZES[floorIndex];
                  const actualWidth = floor.custom ? customFloorWidth : floor.width;
                  const actualDepth = floor.custom ? customFloorDepth : floor.depth;
                  console.log('üìê Using dimensions:', actualWidth, 'x', actualDepth);
                  return (
                    <>
                      {/* Bakv√§gg */}
                      {vepaWallDesigns.find(d => d.wallId === 'back') && (() => {
                        const wallZ = -(actualDepth/2) + 0.09;
                        return (
                          <VepaWallOverlay
                            design={vepaWallDesigns.find(d => d.wallId === 'back')}
                            wallLength={actualWidth}
                            wallHeight={wallHeight}
                            position={[0, wallHeight/2 + 0.06, wallZ]}
                            rotation={[0, 0, 0]}
                          />
                        );
                      })()}
                      {/* V√§nster v√§gg */}
                      {(wallShape === 'l' || wallShape === 'u') && vepaWallDesigns.find(d => d.wallId === 'left') && (
                        <VepaWallOverlay
                          design={vepaWallDesigns.find(d => d.wallId === 'left')}
                          wallLength={actualDepth}
                          wallHeight={wallHeight}
                          position={[-(actualWidth/2) + 0.09, wallHeight/2 + 0.06, 0]}
                          rotation={[0, Math.PI/2, 0]}
                        />
                      )}
                      {/* H√∂ger v√§gg */}
                      {wallShape === 'u' && vepaWallDesigns.find(d => d.wallId === 'right') && (
                        <VepaWallOverlay
                          design={vepaWallDesigns.find(d => d.wallId === 'right')}
                          wallLength={actualDepth}
                          wallHeight={wallHeight}
                          position={[(actualWidth/2) - 0.09, wallHeight/2 + 0.06, 0]}
                          rotation={[0, -Math.PI/2, 0]}
                        />
                      )}
                    </>
                  );
                })()}
                
                {/* FOREX v√§ggar med design fr√•n ForexPDFGenerator */}
                {graphic === 'forex' && forexWallDesigns.length > 0 && floorIndex !== null && (() => {
                  console.log('üèóÔ∏è RENDERING FOREX WALLS BLOCK, designs:', forexWallDesigns.length);
                  const floor = FLOOR_SIZES[floorIndex];
                  const actualWidth = floor.custom ? customFloorWidth : floor.width;
                  const actualDepth = floor.custom ? customFloorDepth : floor.depth;
                  console.log('üìê Using dimensions:', actualWidth, 'x', actualDepth);
                  return (
                    <>
                      {/* Bakv√§gg */}
                      {forexWallDesigns.find(d => d.wallId === 'back') && (() => {
                        const wallZ = -(actualDepth/2) + 0.09;
                        return (
                          <ForexWallOverlay
                            design={forexWallDesigns.find(d => d.wallId === 'back')}
                            wallLength={actualWidth}
                            wallHeight={wallHeight}
                            position={[0, wallHeight/2 + 0.06, wallZ]}
                            rotation={[0, 0, 0]}
                          />
                        );
                      })()}
                      {/* V√§nster v√§gg */}
                      {(wallShape === 'l' || wallShape === 'u') && forexWallDesigns.find(d => d.wallId === 'left') && (
                        <ForexWallOverlay
                          design={forexWallDesigns.find(d => d.wallId === 'left')}
                          wallLength={actualDepth}
                          wallHeight={wallHeight}
                          position={[-(actualWidth/2) + 0.09, wallHeight/2 + 0.06, 0]}
                          rotation={[0, Math.PI/2, 0]}
                        />
                      )}
                      {/* H√∂ger v√§gg */}
                      {wallShape === 'u' && forexWallDesigns.find(d => d.wallId === 'right') && (
                        <ForexWallOverlay
                          design={forexWallDesigns.find(d => d.wallId === 'right')}
                          wallLength={actualDepth}
                          wallHeight={wallHeight}
                          position={[(actualWidth/2) - 0.09, wallHeight/2 + 0.06, 0]}
                          rotation={[0, -Math.PI/2, 0]}
                        />
                      )}
                    </>
                  );
                })()}
                
                {/* Gamla bildlager f√∂r bakv√§gg (fallback om inte VEPA design finns) */}
                {graphic === 'vepa' && uploadedImage && vepaWallDesigns.length === 0 && floorIndex !== null && (
                  <ImageOverlay 
                    imageUrl={uploadedImage} 
                    wallLength={FLOOR_SIZES[floorIndex].width}
                    wallHeight={wallHeight}
                    position={[0, wallHeight/2 + 0.06, -(FLOOR_SIZES[floorIndex].depth/2) + 0.09]}
                    rotation={[0, 0, 0]}
                  />
                )}
                {/* Bildlager f√∂r v√§nster v√§gg - visas i L-form och U-form */}
                {graphic === 'vepa' && uploadedImageLeft && vepaWallDesigns.length === 0 && floorIndex !== null && (wallShape === 'l' || wallShape === 'u') && (
                  <ImageOverlay 
                    imageUrl={uploadedImageLeft} 
                    wallLength={FLOOR_SIZES[floorIndex].depth}
                    wallHeight={wallHeight}
                    position={[-(FLOOR_SIZES[floorIndex].width/2) + 0.09, wallHeight/2 + 0.06, 0]}
                    rotation={[0, Math.PI/2, 0]}
                  />
                )}
                {/* Bildlager f√∂r h√∂ger v√§gg - visas endast i U-form */}
                {graphic === 'vepa' && uploadedImageRight && vepaWallDesigns.length === 0 && floorIndex !== null && wallShape === 'u' && (
                  <ImageOverlay 
                    imageUrl={uploadedImageRight} 
                    wallLength={FLOOR_SIZES[floorIndex].depth}
                    wallHeight={wallHeight}
                    position={[(FLOOR_SIZES[floorIndex].width/2) - 0.09, wallHeight/2 + 0.06, 0]}
                    rotation={[0, -Math.PI/2, 0]}
                  />
                )}
                
                {/* GAMLA FOREX bildlager - DOLDA, anv√§nd ForexPDFGenerator ist√§llet */}
                {/* Forex bakv√§gg */}
                {false && graphic === 'forex' && forexImageBack && floorIndex !== null && (
                  <ForexImageOverlay 
                    imageUrl={forexImageBack} 
                    wallLength={FLOOR_SIZES[floorIndex].width}
                    wallHeight={wallHeight}
                    position={[0, wallHeight/2 + 0.06, -(FLOOR_SIZES[floorIndex].depth/2) + 0.09]}
                  />
                )}
                {/* Forex v√§nster v√§gg */}
                {false && graphic === 'forex' && forexImageLeft && floorIndex !== null && (wallShape === 'l' || wallShape === 'u') && (
                  <ForexImageOverlay 
                    imageUrl={forexImageLeft} 
                    wallLength={FLOOR_SIZES[floorIndex].depth}
                    wallHeight={wallHeight}
                    position={[-(FLOOR_SIZES[floorIndex].width/2) + 0.09, wallHeight/2 + 0.06, 0]}
                    rotation={[0, Math.PI/2, 0]}
                  />
                )}
                {/* Forex h√∂ger v√§gg */}
                {false && graphic === 'forex' && forexImageRight && floorIndex !== null && wallShape === 'u' && (
                  <ForexImageOverlay 
                    imageUrl={forexImageRight} 
                    wallLength={FLOOR_SIZES[floorIndex].depth}
                    wallHeight={wallHeight}
                    position={[(FLOOR_SIZES[floorIndex].width/2) - 0.09, wallHeight/2 + 0.06, 0]}
                    rotation={[0, -Math.PI/2, 0]}
                  />
                )}
                {renderMarkers('back')}
                {renderMarkers('left')}
                {renderMarkers('right')}
                {renderTVs('back')}
                {renderTVs('left')}
                {renderTVs('right')}
                {renderLights('back')}
                {renderLights('left')}
                {renderLights('right')}
                
                {/* Truss-strukturer */}
                {selectedTrussType > 0 && (() => {
                  const trussConfig = TRUSS_TYPES[selectedTrussType];
                  const floor = FLOOR_SIZES[floorIndex];
                  
                  if (trussConfig.type === 'front-straight' && 'width' in trussConfig && 'height' in trussConfig) {
                    // Framkant truss - rak truss l√§ngs framkanten av montern
                    const trussLength = floor.width;
                    const numSegments = Math.ceil(trussLength);
                    const trussHeight = wallHeight + 1.0; // H√§ng p√• v√§ggh√∂jd + 1 meter
                    const wireLength = 2.0; // 2 meter vajrar upp till tak
                    
                    return Array.from({length: numSegments}).map((_, i) => {
                      const segLength = i === numSegments - 1 ? trussLength - (numSegments - 1) : 1;
                      const posX = -trussLength/2 + i + segLength/2;
                      const posZ = floor.depth/2 + 0.2; // Lite utanf√∂r framkanten
                      
                      return (
                        <group key={`truss-front-${i}`}>
                          {/* Huvudbalk */}
                          <mesh position={[posX, trussHeight, posZ]}>
                            <boxGeometry args={[segLength, trussConfig.height, trussConfig.width]} />
                            <meshStandardMaterial color="#888888" roughness={0.8} metalness={0.3} />
                          </mesh>
                          
                          {/* Vajrar upp till tak */}
                          {Array.from({length: Math.ceil(segLength * 2)}).map((_, wireIndex) => {
                            const wireX = posX + (-segLength/2 + wireIndex * 0.5 + 0.25);
                            if (wireX < posX - segLength/2 || wireX > posX + segLength/2) return null;
                            
                            return (
                              <mesh 
                                key={`wire-${wireIndex}`}
                                position={[wireX, trussHeight + wireLength/2, posZ]} 
                                rotation={[0, 0, 0]}
                              >
                                <cylinderGeometry args={[0.005, 0.005, wireLength, 8]} />
                                <meshStandardMaterial color="#333333" roughness={0.3} metalness={0.8} />
                              </mesh>
                            );
                          })}
                          
                          {/* Spotlights p√• truss */}
                          {Array.from({length: Math.floor(segLength)}).map((_, lightIndex) => {
                            const lightPosX = posX + (-segLength/2 + lightIndex + 0.5);
                            return (
                              <group key={`light-${lightIndex}`}>
                                <mesh position={[lightPosX, trussHeight - trussConfig.height/2 - 0.15, posZ - trussConfig.width/2 - 0.05]}>
                                  <cylinderGeometry args={[0.08, 0.12, 0.2, 12]} />
                                  <meshStandardMaterial color="#333333" roughness={0.4} metalness={0.6} />
                                </mesh>
                                <spotLight
                                  position={[lightPosX, trussHeight - trussConfig.height/2 - 0.25, posZ - trussConfig.width/2 - 0.05]}
                                  target-position={[lightPosX, 0, posZ - 2]}
                                  intensity={0.8}
                                  angle={Math.PI / 2.5}
                                  penumbra={0.7}
                                  color="#ffffff"
                                  distance={12}
                                  decay={0.8}
                                />
                                <pointLight
                                  position={[lightPosX, trussHeight - trussConfig.height/2 - 0.25, posZ - trussConfig.width/2 - 0.05]}
                                  intensity={0.4}
                                  color="#ffffff"
                                  distance={6}
                                  decay={0.5}
                                />
                              </group>
                            );
                          })}
                        </group>
                      );
                    });
                    
                  } else if (trussConfig.type === 'hanging-round' && 'diameter' in trussConfig && 'height' in trussConfig) {
                    // Rund h√§ngande truss i mitten av montern
                    // H√§ng p√• v√§ggh√∂jd + 1 meter, med vajrar upp till tak
                    const trussHeight = wallHeight + 1.0;
                    const wireLength = 2.0; // 2 meter vajrar upp till tak
                    
                    return (
                      <group key="truss-hanging-round">
                        {/* Huvudring */}
                        <mesh position={[0, trussHeight, 0]} rotation={[Math.PI/2, 0, 0]}>
                          <torusGeometry args={[trussConfig.diameter/2, 0.15, 8, 16]} />
                          <meshStandardMaterial color="#888888" roughness={0.8} metalness={0.3} />
                        </mesh>
                        
                        {/* Vajrar upp till tak */}
                        {Array.from({length: 4}).map((_, i) => {
                          const angle = (i / 4) * Math.PI * 2;
                          const x = Math.cos(angle) * trussConfig.diameter/2;
                          const z = Math.sin(angle) * trussConfig.diameter/2;
                          
                          return (
                            <mesh 
                              key={`wire-${i}`}
                              position={[x, trussHeight + wireLength/2, z]} 
                              rotation={[0, 0, 0]}
                            >
                              <cylinderGeometry args={[0.005, 0.005, wireLength, 8]} />
                              <meshStandardMaterial color="#333333" roughness={0.3} metalness={0.8} />
                            </mesh>
                          );
                        })}
                        
                        {/* Lampor p√• rund truss */}
                        {Array.from({length: 6}).map((_, i) => {
                          const angle = (i / 6) * Math.PI * 2;
                          const x = Math.cos(angle) * trussConfig.diameter/2 * 0.8;
                          const z = Math.sin(angle) * trussConfig.diameter/2 * 0.8;
                          
                          return (
                            <group key={`light-${i}`}>
                              <mesh position={[x, trussHeight - trussConfig.height/2 - 0.1, z]} rotation={[0, angle + Math.PI/2, 0]}>
                                <cylinderGeometry args={[0.08, 0.12, 0.2, 12]} />
                                <meshStandardMaterial color="#333333" roughness={0.4} metalness={0.6} />
                              </mesh>
                              <spotLight
                                position={[x, trussHeight - trussConfig.height/2 - 0.2, z]}
                                target-position={[x * 0.3, 0, z * 0.3]}
                                intensity={0.7}
                                angle={Math.PI / 3}
                                penumbra={0.8}
                                color="#ffffff"
                                distance={10}
                                decay={0.8}
                              />
                              <pointLight
                                position={[x, trussHeight - trussConfig.height/2 - 0.2, z]}
                                intensity={0.3}
                                color="#ffffff"
                                distance={5}
                                decay={0.6}
                              />
                            </group>
                          );
                        })}
                      </group>
                    );
                    
                  } else if (trussConfig.type === 'hanging-square' && 'width' in trussConfig && 'depth' in trussConfig && 'height' in trussConfig) {
                    // Fyrkantig h√§ngande truss i mitten av montern - justerad storlek f√∂r att inte g√• in i v√§ggar
                    const trussHeight = wallHeight + 1.0; // H√§ng p√• v√§ggh√∂jd + 1 meter
                    const wireLength = 2.0; // 2 meter vajrar upp till tak
                    const adjustedWidth = Math.min(trussConfig.width, floor.width * 0.6); // Max 60% av monterbredd
                    const adjustedDepth = Math.min(trussConfig.depth, floor.depth * 0.6); // Max 60% av monterdjup
                    
                    return (
                      <group key="truss-hanging-square">
                        {/* Huvudram - fyra sidor */}
                        <mesh position={[0, trussHeight, -adjustedDepth/2]} rotation={[0, 0, 0]}>
                          <boxGeometry args={[adjustedWidth, trussConfig.height, 0.15]} />
                          <meshStandardMaterial color="#888888" roughness={0.8} metalness={0.3} />
                        </mesh>
                        <mesh position={[0, trussHeight, adjustedDepth/2]} rotation={[0, 0, 0]}>
                          <boxGeometry args={[adjustedWidth, trussConfig.height, 0.15]} />
                          <meshStandardMaterial color="#888888" roughness={0.8} metalness={0.3} />
                        </mesh>
                        <mesh position={[-adjustedWidth/2, trussHeight, 0]} rotation={[0, 0, 0]}>
                          <boxGeometry args={[0.15, trussConfig.height, adjustedDepth]} />
                          <meshStandardMaterial color="#888888" roughness={0.8} metalness={0.3} />
                        </mesh>
                        <mesh position={[adjustedWidth/2, trussHeight, 0]} rotation={[0, 0, 0]}>
                          <boxGeometry args={[0.15, trussConfig.height, adjustedDepth]} />
                          <meshStandardMaterial color="#888888" roughness={0.8} metalness={0.3} />
                        </mesh>
                        
                        {/* Vajrar upp till tak */}
                        {[[1,1], [1,-1], [-1,1], [-1,-1]].map(([xSign, zSign], i) => {
                          const x = xSign * adjustedWidth/2 * 0.8;
                          const z = zSign * adjustedDepth/2 * 0.8;
                          
                          return (
                            <mesh 
                              key={`wire-${i}`}
                              position={[x, trussHeight + wireLength/2, z]} 
                              rotation={[0, 0, 0]}
                            >
                              <cylinderGeometry args={[0.005, 0.005, wireLength, 8]} />
                              <meshStandardMaterial color="#333333" roughness={0.3} metalness={0.8} />
                            </mesh>
                          );
                        })}
                        
                        {/* Lampor p√• fyrkantig truss */}
                        {[
                          {x: 0, z: -adjustedDepth/2 * 0.8, angle: 0},
                          {x: adjustedWidth/2 * 0.8, z: 0, angle: Math.PI/2},
                          {x: 0, z: adjustedDepth/2 * 0.8, angle: Math.PI},
                          {x: -adjustedWidth/2 * 0.8, z: 0, angle: -Math.PI/2},
                        ].map(({x, z, angle}, i) => (
                          <group key={`light-${i}`}>
                            <mesh position={[x, trussHeight - trussConfig.height/2 - 0.1, z]} rotation={[0, angle, 0]}>
                              <cylinderGeometry args={[0.08, 0.12, 0.2, 12]} />
                              <meshStandardMaterial color="#333333" roughness={0.4} metalness={0.6} />
                            </mesh>
                            <spotLight
                              position={[x, trussHeight - trussConfig.height/2 - 0.2, z]}
                              target-position={[x * 0.3, 0, z * 0.3]}
                              intensity={0.7}
                              angle={Math.PI / 3.2}
                              penumbra={0.8}
                              color="#ffffff"
                              distance={10}
                              decay={0.8}
                            />
                            <pointLight
                              position={[x, trussHeight - trussConfig.height/2 - 0.2, z]}
                              intensity={0.3}
                              color="#ffffff"
                              distance={5}
                              decay={0.6}
                            />
                          </group>
                        ))}
                      </group>
                    );
                  }
                  
                  return null;
                })()}
                
                {/* Diskar - visa alla placerade diskar */}
                {counters.map(counter => {
                  const counterConfig = COUNTER_TYPES[counter.type];
                  const counterHeight = 0.9; // 90cm h√∂g disk
                  const counterThickness = 0.05; // 5cm tjock skiva
                  
                  if (counterConfig.type === 'L') {
                    // L-formad disk: 1,5m rakt fram + 1m √•t h√∂ger
                    return (
                      <group 
                        key={counter.id}
                        position={[counter.position.x, 0, counter.position.z]}
                        rotation={[0, counter.rotation * Math.PI / 180, 0]}
                        onClick={(e) => {
                          e.stopPropagation();
                          setCounters(prev => prev.map(c => 
                            c.id === counter.id 
                              ? {...c, rotation: (c.rotation + 45) % 360}
                              : c
                          ));
                        }}
                        onContextMenu={(e) => {
                          e.stopPropagation();
                          // H√∂gerklick f√∂r att ta bort L-disk
                          setCounters(prev => prev.filter(c => c.id !== counter.id));
                        }}
                      >
                        {/* F√∂rsta delen - rakt fram (1,5m x 0,5m) med hyllor p√• baksidan */}
                        {/* V√§nster sidopanel f√∂r f√∂rsta delen */}
                        <mesh position={[-1, counterHeight/2, 0.25]} receiveShadow castShadow>
                          <boxGeometry args={[0.05, counterHeight - counterThickness, 0.5]} />
                          <meshStandardMaterial color={counterPanelColor} roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Frampanel f√∂r f√∂rsta delen */}
                        <mesh position={[-0.25, counterHeight/2, 0.475]} receiveShadow castShadow>
                          <boxGeometry args={[1.4, counterHeight - counterThickness, 0.05]} />
                          <meshStandardMaterial 
                            key={textureKey}
                            color={counterFrontImage ? "#ffffff" : counterPanelColor} 
                            map={counterTexture}
                            roughness={0.3} 
                            metalness={0.1}
                            transparent={!!counterFrontImage}
                          />
                        </mesh>
                        
                        {/* Vit baksida f√∂r frampanel f√∂rsta delen */}
                        {counterFrontImage && (
                          <mesh position={[-0.25, counterHeight/2, 0.445]} receiveShadow castShadow>
                            <boxGeometry args={[1.4, counterHeight - counterThickness, 0.05]} />
                            <meshStandardMaterial 
                              color="#ffffff"
                              roughness={0.3} 
                              metalness={0.1}
                            />
                          </mesh>
                        )}
                        
                        {/* F√∂rsta hyllan f√∂r f√∂rsta delen */}
                        <mesh position={[-0.25, counterHeight * 0.33, 0.15]} receiveShadow castShadow>
                          <boxGeometry args={[1.3, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Andra hyllan f√∂r f√∂rsta delen */}
                        <mesh position={[-0.25, counterHeight * 0.66, 0.15]} receiveShadow castShadow>
                          <boxGeometry args={[1.3, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Botten f√∂r f√∂rsta delen */}
                        <mesh position={[-0.25, 0.025, 0.25]} receiveShadow castShadow>
                          <boxGeometry args={[1.5, 0.05, 0.5]} />
                          <meshStandardMaterial color="#ffffff" roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Ekskiva f√∂r f√∂rsta delen */}
                        <mesh position={[-0.25, counterHeight - counterThickness/2 + 0.035, 0.25]} receiveShadow castShadow>
                          <boxGeometry args={[1.5, counterThickness, 0.5]} />
                          <meshStandardMaterial 
                            color="#C9955C" // Basek-f√§rg
                            roughness={0.8} // Mer naturlig tr√§yta
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur
                              const canvas = document.createElement('canvas');
                              canvas.width = 512;
                              canvas.height = 512;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 512, 512);
                              
                              // L√§gg till tr√§fibrer (horisontella linjer med variation)
                              for (let y = 0; y < 512; y += 8) {
                                const lightness = 0.8 + Math.random() * 0.4;
                                ctx.fillStyle = `rgba(255, 255, 255, ${lightness * 0.15})`;
                                ctx.fillRect(0, y + Math.random() * 4, 512, 2 + Math.random() * 3);
                              }
                              
                              // L√§gg till m√∂rkare √•rsringar
                              for (let i = 0; i < 8; i++) {
                                const y = Math.random() * 512;
                                ctx.fillStyle = `rgba(139, 69, 19, ${0.1 + Math.random() * 0.1})`;
                                ctx.fillRect(0, y, 512, 1 + Math.random() * 2);
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(3, 1); // Str√§ck ut tr√§fibrerna
                              return texture;
                            })()}
                            normalScale={new THREE.Vector2(0.3, 0.1)} // Subtil normal mapping
                          />
                        </mesh>
                        
                        {/* Andra delen - vinkel √•t h√∂ger med hyllor p√• baksidan */}
                        {/* H√∂ger sidopanel f√∂r andra delen */}
                        <mesh position={[0.725, counterHeight/2, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.05, counterHeight - counterThickness, 1]} />
                          <meshStandardMaterial color={counterPanelColor} roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Frampanel f√∂r andra delen */}
                        <mesh position={[0.5, counterHeight/2, 0.475]} receiveShadow castShadow>
                          <boxGeometry args={[0.4, counterHeight - counterThickness, 0.05]} />
                          <meshStandardMaterial 
                            key={textureKey}
                            color={counterFrontImage ? "#ffffff" : counterPanelColor} 
                            map={counterTexture}
                            roughness={0.3} 
                            metalness={0.1}
                            transparent={!!counterFrontImage}
                          />
                        </mesh>
                        
                        {/* Vit baksida f√∂r frampanel andra delen */}
                        {counterFrontImage && (
                          <mesh position={[0.5, counterHeight/2, 0.445]} receiveShadow castShadow>
                            <boxGeometry args={[0.4, counterHeight - counterThickness, 0.05]} />
                            <meshStandardMaterial 
                              color="#ffffff"
                              roughness={0.3} 
                              metalness={0.1}
                            />
                          </mesh>
                        )}
                        
                        {/* F√∂rsta hyllan f√∂r andra delen */}
                        <mesh position={[0.5, counterHeight * 0.33, -0.35]} receiveShadow castShadow>
                          <boxGeometry args={[0.35, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Andra hyllan f√∂r andra delen */}
                        <mesh position={[0.5, counterHeight * 0.66, -0.35]} receiveShadow castShadow>
                          <boxGeometry args={[0.35, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Botten f√∂r andra delen */}
                        <mesh position={[0.5, 0.025, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.5, 0.05, 1]} />
                          <meshStandardMaterial color="#ffffff" roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Ekskiva f√∂r andra delen */}
                        <mesh position={[0.5, counterHeight - counterThickness/2 + 0.035, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.5, counterThickness, 1]} />
                          <meshStandardMaterial 
                            color="#C9955C" // Basek-f√§rg
                            roughness={0.8} // Mer naturlig tr√§yta
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur (roterad f√∂r andra delen)
                              const canvas = document.createElement('canvas');
                              canvas.width = 512;
                              canvas.height = 512;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 512, 512);
                              
                              // L√§gg till tr√§fibrer (vertikala f√∂r denna del)
                              for (let x = 0; x < 512; x += 8) {
                                const lightness = 0.8 + Math.random() * 0.4;
                                ctx.fillStyle = `rgba(255, 255, 255, ${lightness * 0.15})`;
                                ctx.fillRect(x + Math.random() * 4, 0, 2 + Math.random() * 3, 512);
                              }
                              
                              // L√§gg till m√∂rkare √•rsringar
                              for (let i = 0; i < 8; i++) {
                                const x = Math.random() * 512;
                                ctx.fillStyle = `rgba(139, 69, 19, ${0.1 + Math.random() * 0.1})`;
                                ctx.fillRect(x, 0, 1 + Math.random() * 2, 512);
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(1, 3); // Str√§ck ut tr√§fibrerna vertikalt
                              return texture;
                            })()}
                            normalScale={new THREE.Vector2(0.1, 0.3)} // Subtil normal mapping
                          />
                        </mesh>
                        
                        {/* Objekt p√• L-disk */}
                        {/* Espressomaskin p√• den l√•nga delen */}
                        {showEspressoMachine && (
                          <EspressoMachine 
                            position={[-0.5, counterHeight + 0.05, 0.25]} 
                            rotation={0}
                          />
                        )}
                        
                        {/* Vas med blomma p√• kortsidan */}
                        {showFlowerVase && (
                          <FlowerVase 
                            position={[0.4, counterHeight + 0.05, -0.2]} 
                            rotation={90}
                          />
                        )}
                        
                        {/* Godisk√•l p√• h√∂rnet */}
                        {showCandyBowl && (
                          <CandyBowl 
                            position={[0.2, counterHeight + 0.05, 0.1]} 
                            rotation={0}
                          />
                        )}
                      </group>
                    );
                  } else if (counterConfig.type === 'L-mirrored') {
                    // Spegelv√§nd L-formad disk: 1,5m rakt fram + 1m √•t v√§nster
                    return (
                      <group 
                        key={counter.id}
                        position={[counter.position.x, 0, counter.position.z]}
                        rotation={[0, counter.rotation * Math.PI / 180, 0]}
                        onClick={(e) => {
                          e.stopPropagation();
                          setCounters(prev => prev.map(c => 
                            c.id === counter.id 
                              ? {...c, rotation: (c.rotation + 45) % 360}
                              : c
                          ));
                        }}
                        onContextMenu={(e) => {
                          e.stopPropagation();
                          // H√∂gerklick f√∂r att ta bort spegelv√§nd L-disk
                          setCounters(prev => prev.filter(c => c.id !== counter.id));
                        }}
                      >
                        {/* F√∂rsta delen - rakt fram (1,5m x 0,5m) med hyllor p√• baksidan */}
                        {/* H√∂ger sidopanel f√∂r f√∂rsta delen */}
                        <mesh position={[1, counterHeight/2, 0.25]} receiveShadow castShadow>
                          <boxGeometry args={[0.05, counterHeight - counterThickness, 0.5]} />
                          <meshStandardMaterial color={counterPanelColor} roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Frampanel f√∂r f√∂rsta delen */}
                        <mesh position={[0.25, counterHeight/2, 0.475]} receiveShadow castShadow>
                          <boxGeometry args={[1.4, counterHeight - counterThickness, 0.05]} />
                          <meshStandardMaterial 
                            key={textureKey}
                            color={counterFrontImage ? "#ffffff" : counterPanelColor} 
                            map={counterTexture}
                            roughness={0.3} 
                            metalness={0.1}
                            transparent={!!counterFrontImage}
                          />
                        </mesh>
                        
                        {/* Vit baksida f√∂r frampanel f√∂rsta delen */}
                        {counterFrontImage && (
                          <mesh position={[0.25, counterHeight/2, 0.445]} receiveShadow castShadow>
                            <boxGeometry args={[1.4, counterHeight - counterThickness, 0.05]} />
                            <meshStandardMaterial 
                              color="#ffffff"
                              roughness={0.3} 
                              metalness={0.1}
                            />
                          </mesh>
                        )}
                        
                        {/* F√∂rsta hyllan f√∂r f√∂rsta delen */}
                        <mesh position={[0.25, counterHeight * 0.33, 0.15]} receiveShadow castShadow>
                          <boxGeometry args={[1.3, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Andra hyllan f√∂r f√∂rsta delen */}
                        <mesh position={[0.25, counterHeight * 0.66, 0.15]} receiveShadow castShadow>
                          <boxGeometry args={[1.3, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Botten f√∂r f√∂rsta delen */}
                        <mesh position={[0.25, 0.025, 0.25]} receiveShadow castShadow>
                          <boxGeometry args={[1.5, 0.05, 0.5]} />
                          <meshStandardMaterial color="#ffffff" roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Ekskiva f√∂r f√∂rsta delen */}
                        <mesh position={[0.25, counterHeight - counterThickness/2 + 0.035, 0.25]} receiveShadow castShadow>
                          <boxGeometry args={[1.5, counterThickness, 0.5]} />
                          <meshStandardMaterial 
                            color="#C9955C" // Basek-f√§rg
                            roughness={0.8} // Mer naturlig tr√§yta
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur
                              const canvas = document.createElement('canvas');
                              canvas.width = 512;
                              canvas.height = 512;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 512, 512);
                              
                              // L√§gg till tr√§fibrer (horisontella linjer med variation)
                              for (let y = 0; y < 512; y += 8) {
                                const lightness = 0.8 + Math.random() * 0.4;
                                ctx.fillStyle = `rgba(255, 255, 255, ${lightness * 0.15})`;
                                ctx.fillRect(0, y + Math.random() * 4, 512, 2 + Math.random() * 3);
                              }
                              
                              // L√§gg till m√∂rkare √•rsringar
                              for (let i = 0; i < 8; i++) {
                                const y = Math.random() * 512;
                                ctx.fillStyle = `rgba(139, 69, 19, ${0.1 + Math.random() * 0.1})`;
                                ctx.fillRect(0, y, 512, 1 + Math.random() * 2);
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(3, 1); // Str√§ck ut tr√§fibrerna
                              return texture;
                            })()}
                            normalScale={new THREE.Vector2(0.3, 0.1)} // Subtil normal mapping
                          />
                        </mesh>
                        
                        {/* Andra delen - vinkel √•t v√§nster med hyllor p√• baksidan */}
                        {/* V√§nster sidopanel f√∂r andra delen */}
                        <mesh position={[-0.725, counterHeight/2, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.05, counterHeight - counterThickness, 1]} />
                          <meshStandardMaterial color={counterPanelColor} roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Frampanel f√∂r andra delen */}
                        <mesh position={[-0.5, counterHeight/2, 0.475]} receiveShadow castShadow>
                          <boxGeometry args={[0.4, counterHeight - counterThickness, 0.05]} />
                          <meshStandardMaterial 
                            key={textureKey}
                            color={counterFrontImage ? "#ffffff" : counterPanelColor} 
                            map={counterTexture}
                            roughness={0.3} 
                            metalness={0.1}
                            transparent={!!counterFrontImage}
                          />
                        </mesh>
                        
                        {/* Vit baksida f√∂r frampanel andra delen */}
                        {counterFrontImage && (
                          <mesh position={[-0.5, counterHeight/2, 0.445]} receiveShadow castShadow>
                            <boxGeometry args={[0.4, counterHeight - counterThickness, 0.05]} />
                            <meshStandardMaterial 
                              color="#ffffff"
                              roughness={0.3} 
                              metalness={0.1}
                            />
                          </mesh>
                        )}
                        
                        {/* F√∂rsta hyllan f√∂r andra delen */}
                        <mesh position={[-0.5, counterHeight * 0.33, -0.35]} receiveShadow castShadow>
                          <boxGeometry args={[0.35, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Andra hyllan f√∂r andra delen */}
                        <mesh position={[-0.5, counterHeight * 0.66, -0.35]} receiveShadow castShadow>
                          <boxGeometry args={[0.35, 0.02, 0.2]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Botten f√∂r andra delen */}
                        <mesh position={[-0.5, 0.025, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.5, 0.05, 1]} />
                          <meshStandardMaterial color="#ffffff" roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Ekskiva f√∂r andra delen */}
                        <mesh position={[-0.5, counterHeight - counterThickness/2 + 0.035, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.5, counterThickness, 1]} />
                          <meshStandardMaterial 
                            color="#C9955C" // Basek-f√§rg
                            roughness={0.8} // Mer naturlig tr√§yta
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur (roterad f√∂r andra delen)
                              const canvas = document.createElement('canvas');
                              canvas.width = 512;
                              canvas.height = 512;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 512, 512);
                              
                              // L√§gg till tr√§fibrer (vertikala f√∂r denna del)
                              for (let x = 0; x < 512; x += 8) {
                                const lightness = 0.8 + Math.random() * 0.4;
                                ctx.fillStyle = `rgba(255, 255, 255, ${lightness * 0.15})`;
                                ctx.fillRect(x + Math.random() * 4, 0, 2 + Math.random() * 3, 512);
                              }
                              
                              // L√§gg till m√∂rkare √•rsringar
                              for (let i = 0; i < 8; i++) {
                                const x = Math.random() * 512;
                                ctx.fillStyle = `rgba(139, 69, 19, ${0.1 + Math.random() * 0.1})`;
                                ctx.fillRect(x, 0, 1 + Math.random() * 2, 512);
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(1, 3); // Str√§ck ut tr√§fibrerna vertikalt
                              return texture;
                            })()}
                            normalScale={new THREE.Vector2(0.1, 0.3)} // Subtil normal mapping
                          />
                        </mesh>
                        
                        {/* Objekt p√• spegelv√§nd L-disk */}
                        {/* Espressomaskin p√• den l√•nga delen */}
                        {showEspressoMachine && (
                          <EspressoMachine 
                            position={[0.5, counterHeight + 0.05, 0.25]} 
                            rotation={0}
                          />
                        )}
                        
                        {/* Vas med blomma p√• kortsidan */}
                        {showFlowerVase && (
                          <FlowerVase 
                            position={[-0.4, counterHeight + 0.05, -0.2]} 
                            rotation={-90}
                          />
                        )}
                        
                        {/* Godisk√•l p√• h√∂rnet */}
                        {showCandyBowl && (
                          <CandyBowl 
                            position={[-0.2, counterHeight + 0.05, 0.1]} 
                            rotation={0}
                          />
                        )}
                      </group>
                    );
                  } else {
                    // Vanlig rak disk
                    return (
                      <group 
                        key={counter.id}
                        position={[counter.position.x, 0, counter.position.z]}
                        rotation={[0, counter.rotation * Math.PI / 180, 0]}
                        onClick={(e) => {
                          e.stopPropagation();
                          setCounters(prev => prev.map(c => 
                            c.id === counter.id 
                              ? {...c, rotation: (c.rotation + 45) % 360}
                              : c
                          ));
                        }}
                        onContextMenu={(e) => {
                          e.stopPropagation();
                          // H√∂gerklick f√∂r att ta bort rak disk
                          setCounters(prev => prev.filter(c => c.id !== counter.id));
                        }}
                      >
                        {/* Diskstruktur med hyllor p√• baksidan */}
                        {/* V√§nster sidopanel */}
                        <mesh position={[-counterConfig.width/2 + 0.025, counterHeight/2, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.05, counterHeight - counterThickness, counterConfig.depth]} />
                          <meshStandardMaterial color={counterPanelColor} roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* H√∂ger sidopanel */}
                        <mesh position={[counterConfig.width/2 - 0.025, counterHeight/2, 0]} receiveShadow castShadow>
                          <boxGeometry args={[0.05, counterHeight - counterThickness, counterConfig.depth]} />
                          <meshStandardMaterial color={counterPanelColor} roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Frampanel (mot bes√∂kare) */}
                        <mesh position={[0, counterHeight/2, counterConfig.depth/2 - 0.025]} receiveShadow castShadow>
                          <boxGeometry args={[counterConfig.width - 0.1, counterHeight - counterThickness, 0.05]} />
                          <meshStandardMaterial 
                            key={textureKey}
                            color={counterFrontImage ? "#ffffff" : counterPanelColor} 
                            map={counterTexture}
                            roughness={0.3} 
                            metalness={0.1}
                            transparent={!!counterFrontImage}
                          />
                        </mesh>
                        
                        {/* Vit baksida f√∂r frampanel */}
                        {counterFrontImage && (
                          <mesh position={[0, counterHeight/2, counterConfig.depth/2 - 0.055]} receiveShadow castShadow>
                            <boxGeometry args={[counterConfig.width - 0.1, counterHeight - counterThickness, 0.05]} />
                            <meshStandardMaterial 
                              color="#ffffff"
                              roughness={0.3} 
                              metalness={0.1}
                            />
                          </mesh>
                        )}
                        
                        {/* F√∂rsta hyllan (1/3 h√∂jd) */}
                        <mesh position={[0, counterHeight * 0.33, -counterConfig.depth/2 + 0.15]} receiveShadow castShadow>
                          <boxGeometry args={[counterConfig.width - 0.15, 0.02, counterConfig.depth * 0.4]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Andra hyllan (2/3 h√∂jd) */}
                        <mesh position={[0, counterHeight * 0.66, -counterConfig.depth/2 + 0.15]} receiveShadow castShadow>
                          <boxGeometry args={[counterConfig.width - 0.15, 0.02, counterConfig.depth * 0.4]} />
                          <meshStandardMaterial 
                            color="#C9955C" 
                            roughness={0.8} 
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur f√∂r hyllan
                              const canvas = document.createElement('canvas');
                              canvas.width = 256;
                              canvas.height = 256;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 256, 256);
                              
                              // Tr√§fibrer l√§ngsmed hyllan
                              for (let y = 0; y < 256; y += 4) {
                                const variation = Math.sin(y * 0.02) * 10;
                                ctx.strokeStyle = `rgba(${139 + variation}, ${117 + variation}, ${85 + variation}, 0.3)`;
                                ctx.lineWidth = 1;
                                ctx.beginPath();
                                ctx.moveTo(0, y);
                                ctx.lineTo(256, y);
                                ctx.stroke();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(2, 1);
                              return texture;
                            })()}
                          />
                        </mesh>
                        
                        {/* Botten (f√∂r stabilitet) */}
                        <mesh position={[0, 0.025, 0]} receiveShadow castShadow>
                          <boxGeometry args={[counterConfig.width, 0.05, counterConfig.depth]} />
                          <meshStandardMaterial color="#ffffff" roughness={0.3} metalness={0.1} />
                        </mesh>
                        
                        {/* Ekskiva p√• toppen */}
                        <mesh position={[0, counterHeight - counterThickness/2 + 0.035, 0]} receiveShadow castShadow>
                          <boxGeometry args={[counterConfig.width, counterThickness, counterConfig.depth]} />
                          <meshStandardMaterial 
                            color="#C9955C" // Basek-f√§rg
                            roughness={0.8} // Mer naturlig tr√§yta
                            metalness={0.0}
                            roughnessMap={(() => {
                              // Skapa procedural tr√§struktur
                              const canvas = document.createElement('canvas');
                              canvas.width = 512;
                              canvas.height = 512;
                              const ctx = canvas.getContext('2d')!;
                              
                              // Basf√§rg
                              ctx.fillStyle = '#D4A574';
                              ctx.fillRect(0, 0, 512, 512);
                              
                              // L√§gg till tr√§fibrer (horisontella linjer med variation)
                              for (let y = 0; y < 512; y += 6) {
                                const lightness = 0.7 + Math.random() * 0.5;
                                const width = 1 + Math.random() * 4;
                                ctx.fillStyle = `rgba(255, 255, 255, ${lightness * 0.12})`;
                                ctx.fillRect(0, y + Math.random() * 3, 512, width);
                                
                                // L√§gg till m√∂rkare skuggor f√∂r djup
                                ctx.fillStyle = `rgba(101, 67, 33, ${0.08 + Math.random() * 0.05})`;
                                ctx.fillRect(0, y + width, 512, 1);
                              }
                              
                              // L√§gg till tr√§fl√§ckar och kvistar
                              for (let i = 0; i < 12; i++) {
                                const x = Math.random() * 512;
                                const y = Math.random() * 512;
                                const size = 8 + Math.random() * 16;
                                ctx.fillStyle = `rgba(101, 67, 33, ${0.15 + Math.random() * 0.1})`;
                                ctx.beginPath();
                                ctx.ellipse(x, y, size, size * 0.3, 0, 0, Math.PI * 2);
                                ctx.fill();
                              }
                              
                              const texture = new THREE.CanvasTexture(canvas);
                              texture.wrapS = THREE.RepeatWrapping;
                              texture.wrapT = THREE.RepeatWrapping;
                              texture.repeat.set(counterConfig.width, counterConfig.depth); // Skala efter diskstorlek
                              return texture;
                            })()}
                            normalScale={new THREE.Vector2(0.2, 0.2)} // Balanserad normal mapping
                          />
                        </mesh>
                        
                        {/* Objekt p√• disken */}
                        {(counterConfig.width >= 1.5) && (
                          <>
                            {/* L√§ngre diskar - alla objekt med bra placering */}
                            {showEspressoMachine && (
                              <EspressoMachine 
                                position={[-counterConfig.width/2 + 0.25, counterHeight + 0.05, -0.1]} 
                                rotation={0}
                              />
                            )}
                            
                            {showFlowerVase && (
                              <FlowerVase 
                                position={[counterConfig.width/2 - 0.15, counterHeight + 0.05, 0.1]} 
                                rotation={45}
                              />
                            )}
                            
                            {showCandyBowl && (
                              <CandyBowl 
                                position={[
                                  (showEspressoMachine || showFlowerVase) ? 0 : 0,
                                  counterHeight + 0.05, 
                                  (showEspressoMachine || showFlowerVase) ? 0.05 : 0
                                ]} 
                                rotation={0}
                              />
                            )}
                          </>
                        )}
                        
                        {(counterConfig.width < 1.5 && counterConfig.width >= 1) && (
                          <>
                            {/* Kortare diskar - kompakt placering av alla objekt */}
                            {showEspressoMachine && !showFlowerVase && !showCandyBowl && (
                              <EspressoMachine 
                                position={[0, counterHeight + 0.05, 0]} 
                                rotation={0}
                              />
                            )}
                            
                            {showFlowerVase && !showEspressoMachine && !showCandyBowl && (
                              <FlowerVase 
                                position={[0, counterHeight + 0.05, 0]} 
                                rotation={0}
                              />
                            )}
                            
                            {showCandyBowl && !showEspressoMachine && !showFlowerVase && (
                              <CandyBowl 
                                position={[0, counterHeight + 0.05, 0]} 
                                rotation={0}
                              />
                            )}
                            
                            {/* Tv√• objekt - sida vid sida */}
                            {(showEspressoMachine && showFlowerVase && !showCandyBowl) && (
                              <>
                                <EspressoMachine 
                                  position={[-counterConfig.width/4, counterHeight + 0.05, 0]} 
                                  rotation={0}
                                />
                                <FlowerVase 
                                  position={[counterConfig.width/4, counterHeight + 0.05, 0]} 
                                  rotation={0}
                                />
                              </>
                            )}
                            
                            {(showEspressoMachine && showCandyBowl && !showFlowerVase) && (
                              <>
                                <EspressoMachine 
                                  position={[-counterConfig.width/4, counterHeight + 0.05, 0]} 
                                  rotation={0}
                                />
                                <CandyBowl 
                                  position={[counterConfig.width/4, counterHeight + 0.05, 0]} 
                                  rotation={0}
                                />
                              </>
                            )}
                            
                            {(showFlowerVase && showCandyBowl && !showEspressoMachine) && (
                              <>
                                <FlowerVase 
                                  position={[-counterConfig.width/4, counterHeight + 0.05, 0]} 
                                  rotation={0}
                                />
                                <CandyBowl 
                                  position={[counterConfig.width/4, counterHeight + 0.05, 0]} 
                                  rotation={0}
                                />
                              </>
                            )}
                            
                            {/* Alla tre objekt - kompakt arrangering */}
                            {(showEspressoMachine && showFlowerVase && showCandyBowl) && (
                              <>
                                <EspressoMachine 
                                  position={[-counterConfig.width/3, counterHeight + 0.05, -0.05]} 
                                  rotation={0}
                                />
                                <FlowerVase 
                                  position={[0, counterHeight + 0.05, 0.1]} 
                                  rotation={0}
                                />
                                <CandyBowl 
                                  position={[counterConfig.width/3, counterHeight + 0.05, -0.05]} 
                                  rotation={0}
                                />
                              </>
                            )}
                          </>
                        )}
                      </group>
                    );
                  }
                })}

                {/* F√∂rr√•d - visa alla placerade f√∂rr√•d */}
                {storages.map(storage => {
                  const storageConfig = STORAGE_TYPES[storage.type];
                  const storageHeight = wallHeight; // Samma h√∂jd som v√§ggarna
                  const wallThickness = 0.1; // 10cm tjocka v√§ggar
                  
                  // H√§mta designs f√∂r detta f√∂rr√•d
                  const storageDesignData = storageDesigns.get(storage.id);
                  const getDesignForWall = (wallType: 'back' | 'left' | 'right' | 'front') => {
                    return storageDesignData?.designs.find(d => d.wallId === wallType) || null;
                  };
                  
                  return (
                    <group 
                      key={storage.id}
                      // Lift storage so its bottom sits on top of the floor (floor top = 0.06)
                      position={[storage.position.x, 0.06, storage.position.z]}
                      rotation={[0, storage.rotation * Math.PI / 180, 0]}
                      onClick={(e) => {
                        e.stopPropagation();
                        const floor = FLOOR_SIZES[floorIndex];
                        const newRotation = (storage.rotation + 90) % 360;
                        
                        // Kontrollera om det roterade f√∂rr√•det skulle g√• utanf√∂r monteromr√•det
                        let wouldFitAfterRotation = true;
                        const isRotated = newRotation === 90 || newRotation === 270;
                        const effectiveWidth = isRotated ? storageConfig.depth : storageConfig.width;
                        const effectiveDepth = isRotated ? storageConfig.width : storageConfig.depth;
                        
                        // Kontrollera om f√∂rr√•det fortfarande passar inom monteromr√•det efter rotation
                        const maxX = floor.width / 2;
                        const minX = -floor.width / 2;
                        const maxZ = floor.depth / 2; 
                        const minZ = -floor.depth / 2;
                        
                        if (storage.position.x + effectiveWidth/2 > maxX ||
                            storage.position.x - effectiveWidth/2 < minX ||
                            storage.position.z + effectiveDepth/2 > maxZ ||
                            storage.position.z - effectiveDepth/2 < minZ) {
                          wouldFitAfterRotation = false;
                        }
                        
                        // Bara rotera om det passar
                        if (wouldFitAfterRotation) {
                          setStorages(prev => prev.map(s => 
                            s.id === storage.id 
                              ? {...s, rotation: newRotation}
                              : s
                          ));
                        }
                      }}
                      onContextMenu={(e) => {
                        e.stopPropagation();
                        // H√∂gerklick f√∂r att ta bort f√∂rr√•d
                        setStorages(prev => prev.filter(s => s.id !== storage.id));
                      }}
                    >
                      {/* Golv (relativt till grupp) - flytta ner s√• det ligger i botten av f√∂rr√•det */}
                      <mesh position={[0, -0.03, 0]}>
                        <boxGeometry args={[storageConfig.width, 0.06, storageConfig.depth]} />
                        <meshStandardMaterial color="#ffffff" />
                      </mesh>
                      
                      {/* StorageWall komponent f√∂r varje v√§gg */}
                      <StorageWall
                        position={[0, storageHeight/2, -storageConfig.depth/2 + wallThickness/2]}
                        args={[storageConfig.width, storageHeight, wallThickness]}
                        color={storageColor}
                        image={storageGraphic === 'upload' ? storageUploadedImage : null}
                        wallType="back"
                        selectedWalls={storageWallSelections}
                        wallHeight={storageHeight}
                        design={getDesignForWall('back')}
                      />
                      
                      <StorageWall
                        position={[-storageConfig.width/2 + wallThickness/2, storageHeight/2, 0]}
                        args={[wallThickness, storageHeight, storageConfig.depth]}
                        color={storageColor}
                        image={storageGraphic === 'upload' ? storageUploadedImage : null}
                        wallType="left"
                        selectedWalls={storageWallSelections}
                        wallHeight={storageHeight}
                        design={getDesignForWall('left')}
                      />
                      
                      <StorageWall
                        position={[storageConfig.width/2 - wallThickness/2, storageHeight/2, 0]}
                        args={[wallThickness, storageHeight, storageConfig.depth]}
                        color={storageColor}
                        image={storageGraphic === 'upload' ? storageUploadedImage : null}
                        wallType="right"
                        selectedWalls={storageWallSelections}
                        wallHeight={storageHeight}
                        design={getDesignForWall('right')}
                      />
                      
                      <StorageWall
                        position={[0, storageHeight/2, storageConfig.depth/2 - wallThickness/2]}
                        args={[storageConfig.width, storageHeight, wallThickness]}
                        color={storageColor}
                        image={storageGraphic === 'upload' ? storageUploadedImage : null}
                        wallType="front"
                        selectedWalls={storageWallSelections}
                        wallHeight={storageHeight}
                        design={getDesignForWall('front')}
                      />
                      
                    </group>
                  );
                })}

                {/* V√§xter - visa alla placerade v√§xter */}
                {plants.map(plant => {
                  const plantConfig = PLANT_TYPES[plant.type];
                  
                  return (
                    <group
                      key={plant.id}
                      onClick={(e) => {
                        e.stopPropagation();
                        setPlants(prev => prev.map(p => 
                          p.id === plant.id 
                            ? {...p, rotation: (p.rotation + 90) % 360}
                            : p
                        ));
                      }}
                      onContextMenu={(e) => {
                        e.stopPropagation();
                        // H√∂gerklick f√∂r att ta bort v√§xt
                        setPlants(prev => prev.filter(p => p.id !== plant.id));
                      }}
                    >
                      <Plant
                        plantConfig={plantConfig}
                        position={[plant.position.x, 0.065, plant.position.z]}
                        rotation={plant.rotation}
                      />
                    </group>
                  );
                })}

                {/* M√∂bler - visa alla placerade m√∂bler */}
                {furniture.map(furnitureItem => {
                  const furnitureConfig = FURNITURE_TYPES[furnitureItem.type];
                  
                  return (
                    <group
                      key={furnitureItem.id}
                      onClick={(e) => {
                        e.stopPropagation();
                        // Barstolar (type 'chair') roterar 45¬∞, andra m√∂bler 90¬∞
                        const rotationAmount = furnitureConfig.type === 'chair' ? 45 : 90;
                        setFurniture(prev => prev.map(f => 
                          f.id === furnitureItem.id 
                            ? {...f, rotation: (f.rotation + rotationAmount) % 360}
                            : f
                        ));
                      }}
                      onContextMenu={(e) => {
                        e.stopPropagation();
                        // H√∂gerklick f√∂r att ta bort m√∂bel
                        setFurniture(prev => prev.filter(f => f.id !== furnitureItem.id));
                      }}
                    >
                      <Furniture
                        furnitureConfig={furnitureConfig}
                        position={[furnitureItem.position.x, 0.065, furnitureItem.position.z]}
                        rotation={furnitureItem.rotation}
                      />
                    </group>
                  );
                })}

                {/* LED-lampor p√• f√∂rr√•dsv√§ggarnas utsidor (framsida + sida n√§rmast mitten) */}
                {showLights && storages.map(storage => {
                  const storageConfig = STORAGE_TYPES[storage.type];
                  const isRotated = storage.rotation === 90 || storage.rotation === 270;
                  const effectiveWidth = isRotated ? storageConfig.depth : storageConfig.width;
                  const effectiveDepth = isRotated ? storageConfig.width : storageConfig.depth;
                  
                  const storageLights = [];
                  
                  // Lampor p√• f√∂rr√•dets framsida (√∂ppning mot montern)
                  const numLightsFront = Math.floor(effectiveWidth);
                  for (let i = 0; i < numLightsFront; i++) {
                    const lightX = storage.position.x + (-effectiveWidth/2 + i + 0.5);
                    const lightZ = storage.position.z + (effectiveDepth/2 + 0.15); // Utanf√∂r f√∂rr√•dets framsida
                    
                    storageLights.push(
                      <group key={`storage-${storage.id}-front-${i}`}>
                        {/* Lampram */}
                        <mesh 
                          position={[lightX, wallHeight + 0.07, lightZ]}
                          rotation={[0, 0, 0]}
                        >
                          <boxGeometry args={[0.06, 0.015, 0.3]} />
                          <meshStandardMaterial color="#999" />
                        </mesh>
                        
                        {/* LED-strip */}
                        <mesh 
                          position={[lightX, wallHeight + 0.065, lightZ]}
                          rotation={[0, 0, 0]}
                        >
                          <boxGeometry args={[0.05, 0.008, 0.25]} />
                          <meshStandardMaterial 
                            color="#ffffff" 
                            emissive="#ffffff" 
                            emissiveIntensity={1.2}
                          />
                        </mesh>
                        
                        {/* Belysning riktad in mot montern */}
                        <spotLight
                          position={[lightX, wallHeight + 0.06, lightZ]}
                          target-position={[lightX, 0, lightZ - 1]}
                          intensity={0.3}
                          angle={Math.PI / 2.5}
                          penumbra={0.9}
                          color="#e8f4fd"
                          distance={4}
                          decay={1}
                        />
                        
                        <pointLight
                          position={[lightX, wallHeight - 0.4, lightZ - 0.5]}
                          intensity={0.25}
                          color="#e8f4fd"
                          distance={3}
                          decay={0.3}
                        />
                      </group>
                    );
                  }
                  
                  // Best√§m vilken sida som √§r n√§rmast mitten av montern
                  const storageLeftX = storage.position.x - effectiveWidth/2;
                  const storageRightX = storage.position.x + effectiveWidth/2;
                  const centerX = 0; // Mitten av montern √§r vid X=0
                  
                  // Kontrollera vilket h√•ll som √§r n√§rmare mitten
                  const leftDistanceToCenter = Math.abs(storageLeftX - centerX);
                  const rightDistanceToCenter = Math.abs(storageRightX - centerX);
                  
                  // Placera lampor p√• den sida som √§r n√§rmast mitten
                  const useLightSide = leftDistanceToCenter < rightDistanceToCenter ? 'left' : 'right';
                  
                  // Lampor p√• sidan n√§rmast mitten
                  const numLightsSide = Math.floor(effectiveDepth);
                  for (let i = 0; i < numLightsSide; i++) {
                    let lightX, lightTargetX, lightPointX, rotation;
                    const lightZ = storage.position.z + (-effectiveDepth/2 + i + 0.5);
                    
                    if (useLightSide === 'left') {
                      // V√§nster sida - placera utanf√∂r v√§nster v√§gg, lyser h√∂gerut
                      lightX = storage.position.x + (-effectiveWidth/2 - 0.15);
                      lightTargetX = lightX + 1;
                      lightPointX = lightX + 0.5;
                      rotation = [0, Math.PI/2, 0];
                    } else {
                      // H√∂ger sida - placera utanf√∂r h√∂ger v√§gg, lyser v√§nsterut  
                      lightX = storage.position.x + (effectiveWidth/2 + 0.15);
                      lightTargetX = lightX - 1;
                      lightPointX = lightX - 0.5;
                      rotation = [0, -Math.PI/2, 0];
                    }
                    
                    storageLights.push(
                      <group key={`storage-${storage.id}-side-${i}`}>
                        {/* Lampram */}
                        <mesh 
                          position={[lightX, wallHeight + 0.07, lightZ]}
                          rotation={rotation as [number, number, number]}
                        >
                          <boxGeometry args={[0.06, 0.015, 0.3]} />
                          <meshStandardMaterial color="#999" />
                        </mesh>
                        
                        {/* LED-strip */}
                        <mesh 
                          position={[lightX, wallHeight + 0.065, lightZ]}
                          rotation={rotation as [number, number, number]}
                        >
                          <boxGeometry args={[0.05, 0.008, 0.25]} />
                          <meshStandardMaterial 
                            color="#ffffff" 
                            emissive="#ffffff" 
                            emissiveIntensity={1.2}
                          />
                        </mesh>
                        
                        {/* Belysning riktad mot mitten av montern */}
                        <spotLight
                          position={[lightX, wallHeight + 0.06, lightZ]}
                          target-position={[lightTargetX, 0, lightZ]}
                          intensity={0.3}
                          angle={Math.PI / 2.5}
                          penumbra={0.9}
                          color="#e8f4fd"
                          distance={4}
                          decay={1}
                        />
                        
                        <pointLight
                          position={[lightPointX, wallHeight - 0.4, lightZ]}
                          intensity={0.25}
                          color="#e8f4fd"
                          distance={3}
                          decay={0.3}
                        />
                      </group>
                    );
                  }
                  
                  return storageLights;
                })}
              </>;
              // All logik f√∂r markers och TV hanteras nu av renderMarkers/renderTVs f√∂r alla v√§ggar
            })()}

            {/* V√§ggmark√∂rer f√∂r hyllor */}
            {shelfMarkersVisible && wallShape && wallShape !== '' && (() => {
              if (!floorIndex) {
                console.warn('‚ùå Cannot show shelf markers: floorIndex is null');
                return null;
              }
              
              const floor = FLOOR_SIZES[floorIndex];
              const actualWidth = floor.custom ? customFloorWidth : floor.width;
              const actualDepth = floor.custom ? customFloorDepth : floor.depth;
              
              console.log('üìè Rendering shelf markers with dimensions:', { 
                actualWidth, 
                actualDepth, 
                custom: floor.custom 
              });
              
              const wallMarkers = [];
              const markerSize = 0.5; // 4 per kvm = 0.5m avst√•nd
              
              // Bakv√§gg mark√∂rer - placera p√• v√§ggen (inte framkanten)
              if (wallShape === 'straight' || wallShape === 'l' || wallShape === 'u') {
                for (let x = -actualWidth/2 + markerSize/2; x < actualWidth/2; x += markerSize) {
                  for (let y = markerSize; y < wallHeight; y += markerSize) {
                    wallMarkers.push(
                      <mesh 
                        key={`wall-marker-back-${x}-${y}`}
                        position={[x, y, -actualDepth/2 + 0.1]}
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log('üìè Shelf marker clicked on back wall!', { x, y });
                          // Kontrollera att hyllan (0.6m bred) inte g√•r utanf√∂r v√§ggen
                          const shelfWidth = 0.6;
                          const wallLeft = -actualWidth/2;
                          const wallRight = actualWidth/2;
                          
                          // Justera position s√• hyllan hamnar kant-i-kant med v√§ggen
                          let adjustedX = x;
                          const shelfLeft = x - shelfWidth/2;
                          const shelfRight = x + shelfWidth/2;
                          
                          if (shelfLeft < wallLeft) {
                            // Om v√§nster kant g√•r utanf√∂r, flytta hyllan s√• v√§nster kant √§r vid v√§ggkanten
                            adjustedX = wallLeft + shelfWidth/2;
                          } else if (shelfRight > wallRight) {
                            // Om h√∂ger kant g√•r utanf√∂r, flytta hyllan s√• h√∂ger kant √§r vid v√§ggkanten
                            adjustedX = wallRight - shelfWidth/2;
                          }
                          
                          // Kontrollera att den justerade positionen fortfarande √§r inom v√§ggen
                          const adjustedShelfLeft = adjustedX - shelfWidth/2;
                          const adjustedShelfRight = adjustedX + shelfWidth/2;
                          
                          if (adjustedShelfLeft >= wallLeft && adjustedShelfRight <= wallRight) {
                            console.log('‚úÖ Placing shelf on back wall at:', { adjustedX, y, wall: 'back' });
                            setWallShelves(prev => [...prev, {
                              id: nextShelfId,
                              wall: 'back',
                              position: { x: adjustedX, y }
                            }]);
                            setNextShelfId(prev => prev + 1);
                          } else {
                            console.warn('‚ùå Shelf would be outside wall bounds');
                          }
                        }}
                      >
                        <boxGeometry args={[0.2, 0.2, 0.03]} />
                        <meshStandardMaterial color="#00ff00" transparent opacity={0.8} />
                      </mesh>
                    );
                  }
                }
              }
              
              // V√§nster v√§gg mark√∂rer - placera p√• v√§ggen
              if (wallShape === 'l' || wallShape === 'u') {
                for (let z = -actualDepth/2 + markerSize/2; z < actualDepth/2; z += markerSize) {
                  for (let y = markerSize; y < wallHeight; y += markerSize) {
                    wallMarkers.push(
                      <mesh 
                        key={`wall-marker-left-${z}-${y}`}
                        position={[-actualWidth/2 + 0.1, y, z]}
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log('üìè Shelf marker clicked on left wall!', { z, y });
                          // Kontrollera att hyllan (0.6m bred) inte g√•r utanf√∂r v√§ggen
                          const shelfWidth = 0.6;
                          const wallFront = -actualDepth/2;
                          const wallBack = actualDepth/2;
                          
                          // Justera position s√• hyllan hamnar kant-i-kant med v√§ggen
                          let adjustedZ = z;
                          const shelfFront = z - shelfWidth/2;
                          const shelfBack = z + shelfWidth/2;
                          
                          if (shelfFront < wallFront) {
                            // Om fram kant g√•r utanf√∂r, flytta hyllan s√• fram kant √§r vid v√§ggkanten
                            adjustedZ = wallFront + shelfWidth/2;
                          } else if (shelfBack > wallBack) {
                            // Om bak kant g√•r utanf√∂r, flytta hyllan s√• bak kant √§r vid v√§ggkanten
                            adjustedZ = wallBack - shelfWidth/2;
                          }
                          
                          // Kontrollera att den justerade positionen fortfarande √§r inom v√§ggen
                          const adjustedShelfFront = adjustedZ - shelfWidth/2;
                          const adjustedShelfBack = adjustedZ + shelfWidth/2;
                          
                          if (adjustedShelfFront >= wallFront && adjustedShelfBack <= wallBack) {
                            console.log('‚úÖ Placing shelf on left wall at:', { adjustedZ, y, wall: 'left' });
                            setWallShelves(prev => [...prev, {
                              id: nextShelfId,
                              wall: 'left',
                              position: { x: adjustedZ, y }
                            }]);
                            setNextShelfId(prev => prev + 1);
                          } else {
                            console.warn('‚ùå Shelf would be outside wall bounds');
                          }
                        }}
                      >
                        <boxGeometry args={[0.03, 0.2, 0.2]} />
                        <meshStandardMaterial color="#00ff00" transparent opacity={0.8} />
                      </mesh>
                    );
                  }
                }
              }
              
              // H√∂ger v√§gg mark√∂rer (f√∂r U-form) - placera p√• v√§ggen
              if (wallShape === 'u') {
                for (let z = -actualDepth/2 + markerSize/2; z < actualDepth/2; z += markerSize) {
                  for (let y = markerSize; y < wallHeight; y += markerSize) {
                    wallMarkers.push(
                      <mesh 
                        key={`wall-marker-right-${z}-${y}`}
                        position={[actualWidth/2 - 0.1, y, z]}
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log('üìè Shelf marker clicked on right wall!', { z, y });
                          // Kontrollera att hyllan (0.6m bred) inte g√•r utanf√∂r v√§ggen
                          const shelfWidth = 0.6;
                          const wallFront = -actualDepth/2;
                          const wallBack = actualDepth/2;
                          
                          // Justera position s√• hyllan hamnar kant-i-kant med v√§ggen
                          let adjustedZ = z;
                          const shelfFront = z - shelfWidth/2;
                          const shelfBack = z + shelfWidth/2;
                          
                          if (shelfFront < wallFront) {
                            // Om fram kant g√•r utanf√∂r, flytta hyllan s√• fram kant √§r vid v√§ggkanten
                            adjustedZ = wallFront + shelfWidth/2;
                          } else if (shelfBack > wallBack) {
                            // Om bak kant g√•r utanf√∂r, flytta hyllan s√• bak kant √§r vid v√§ggkanten
                            adjustedZ = wallBack - shelfWidth/2;
                          }
                          
                          // Kontrollera att den justerade positionen fortfarande √§r inom v√§ggen
                          const adjustedShelfFront = adjustedZ - shelfWidth/2;
                          const adjustedShelfBack = adjustedZ + shelfWidth/2;
                          
                          if (adjustedShelfFront >= wallFront && adjustedShelfBack <= wallBack) {
                            console.log('‚úÖ Placing shelf on right wall at:', { adjustedZ, y, wall: 'right' });
                            setWallShelves(prev => [...prev, {
                              id: nextShelfId,
                              wall: 'right',
                              position: { x: adjustedZ, y }
                            }]);
                            setNextShelfId(prev => prev + 1);
                          } else {
                            console.warn('‚ùå Shelf would be outside wall bounds');
                          }
                        }}
                      >
                        <boxGeometry args={[0.03, 0.2, 0.2]} />
                        <meshStandardMaterial color="#00ff00" transparent opacity={0.8} />
                      </mesh>
                    );
                  }
                }
              }
              
              // F√∂rr√•dsv√§ggar mark√∂rer - alla fyra sidor av varje f√∂rr√•d
              storages.forEach(storage => {
                const storageConfig = STORAGE_TYPES[storage.type];
                if (storageConfig.width === 0) return;
                
                const storageWidth = storageConfig.width;
                const storageDepth = storageConfig.depth;
                
                // F√∂rr√•dets bakv√§gg (l√§ngst fr√•n montern)
                for (let x = -storageWidth/2 + markerSize/2; x < storageWidth/2; x += markerSize) {
                  for (let y = markerSize; y < wallHeight; y += markerSize) {
                    const worldX = storage.position.x + x * Math.cos((storage.rotation * Math.PI) / 180) - (storageDepth/2) * Math.sin((storage.rotation * Math.PI) / 180);
                    const worldZ = storage.position.z + x * Math.sin((storage.rotation * Math.PI) / 180) + (storageDepth/2) * Math.cos((storage.rotation * Math.PI) / 180);
                    
                    wallMarkers.push(
                      <mesh 
                        key={`storage-marker-back-${storage.id}-${x}-${y}`}
                        position={[worldX, y, worldZ + 0.1]}
                        onClick={(e) => {
                          e.stopPropagation();
                          // Kontrollera att hyllan (0.6m bred) inte g√•r utanf√∂r f√∂rr√•dsv√§ggen
                          const shelfWidth = 0.6;
                          const wallLeft = -storageWidth/2;
                          const wallRight = storageWidth/2;
                          
                          // Justera position s√• hyllan hamnar kant-i-kant med v√§ggen
                          let adjustedX = x;
                          const shelfLeft = x - shelfWidth/2;
                          const shelfRight = x + shelfWidth/2;
                          
                          if (shelfLeft < wallLeft) {
                            // Om v√§nster kant g√•r utanf√∂r, flytta hyllan s√• v√§nster kant √§r vid v√§ggkanten
                            adjustedX = wallLeft + shelfWidth/2;
                          } else if (shelfRight > wallRight) {
                            // Om h√∂ger kant g√•r utanf√∂r, flytta hyllan s√• h√∂ger kant √§r vid v√§ggkanten
                            adjustedX = wallRight - shelfWidth/2;
                          }
                          
                          // Kontrollera att den justerade positionen fortfarande √§r inom v√§ggen
                          const adjustedShelfLeft = adjustedX - shelfWidth/2;
                          const adjustedShelfRight = adjustedX + shelfWidth/2;
                          
                          if (adjustedShelfLeft >= wallLeft && adjustedShelfRight <= wallRight) {
                            setWallShelves(prev => [...prev, {
                              id: nextShelfId,
                              wall: `storage-${storage.id}-back`,
                              position: { x: adjustedX, y }
                            }]);
                            setNextShelfId(prev => prev + 1);
                          }
                        }}
                      >
                        <boxGeometry args={[0.15, 0.15, 0.03]} />
                        <meshStandardMaterial color="#ffaa00" transparent opacity={0.8} />
                      </mesh>
                    );
                  }
                }
                
                // F√∂rr√•dets v√§nstra v√§gg
                for (let z = -storageDepth/2 + markerSize/2; z < storageDepth/2; z += markerSize) {
                  for (let y = markerSize; y < wallHeight; y += markerSize) {
                    const worldX = storage.position.x + (-storageWidth/2) * Math.cos((storage.rotation * Math.PI) / 180) - z * Math.sin((storage.rotation * Math.PI) / 180);
                    const worldZ = storage.position.z + (-storageWidth/2) * Math.sin((storage.rotation * Math.PI) / 180) + z * Math.cos((storage.rotation * Math.PI) / 180);
                    
                    wallMarkers.push(
                      <mesh 
                        key={`storage-marker-left-${storage.id}-${z}-${y}`}
                        position={[worldX - 0.1, y, worldZ]}
                        onClick={(e) => {
                          e.stopPropagation();
                          // Kontrollera att hyllan (0.6m bred) inte g√•r utanf√∂r f√∂rr√•dsv√§ggen
                          const shelfWidth = 0.6;
                          const wallFront = -storageDepth/2;
                          const wallBack = storageDepth/2;
                          
                          // Justera position s√• hyllan hamnar kant-i-kant med v√§ggen
                          let adjustedZ = z;
                          const shelfFront = z - shelfWidth/2;
                          const shelfBack = z + shelfWidth/2;
                          
                          if (shelfFront < wallFront) {
                            // Om fram kant g√•r utanf√∂r, flytta hyllan s√• fram kant √§r vid v√§ggkanten
                            adjustedZ = wallFront + shelfWidth/2;
                          } else if (shelfBack > wallBack) {
                            // Om bak kant g√•r utanf√∂r, flytta hyllan s√• bak kant √§r vid v√§ggkanten
                            adjustedZ = wallBack - shelfWidth/2;
                          }
                          
                          // Kontrollera att den justerade positionen fortfarande √§r inom v√§ggen
                          const adjustedShelfFront = adjustedZ - shelfWidth/2;
                          const adjustedShelfBack = adjustedZ + shelfWidth/2;
                          
                          if (adjustedShelfFront >= wallFront && adjustedShelfBack <= wallBack) {
                            setWallShelves(prev => [...prev, {
                              id: nextShelfId,
                              wall: `storage-${storage.id}-left`,
                              position: { x: adjustedZ, y }
                            }]);
                            setNextShelfId(prev => prev + 1);
                          }
                        }}
                      >
                        <boxGeometry args={[0.03, 0.15, 0.15]} />
                        <meshStandardMaterial color="#ffaa00" transparent opacity={0.8} />
                      </mesh>
                    );
                  }
                }
                
                // F√∂rr√•dets h√∂gra v√§gg
                for (let z = -storageDepth/2 + markerSize/2; z < storageDepth/2; z += markerSize) {
                  for (let y = markerSize; y < wallHeight; y += markerSize) {
                    const worldX = storage.position.x + (storageWidth/2) * Math.cos((storage.rotation * Math.PI) / 180) - z * Math.sin((storage.rotation * Math.PI) / 180);
                    const worldZ = storage.position.z + (storageWidth/2) * Math.sin((storage.rotation * Math.PI) / 180) + z * Math.cos((storage.rotation * Math.PI) / 180);
                    
                    wallMarkers.push(
                      <mesh 
                        key={`storage-marker-right-${storage.id}-${z}-${y}`}
                        position={[worldX + 0.1, y, worldZ]}
                        onClick={(e) => {
                          e.stopPropagation();
                          // Kontrollera att hyllan (0.6m bred) inte g√•r utanf√∂r f√∂rr√•dsv√§ggen
                          const shelfWidth = 0.6;
                          const wallFront = -storageDepth/2;
                          const wallBack = storageDepth/2;
                          
                          // Justera position s√• hyllan hamnar kant-i-kant med v√§ggen
                          let adjustedZ = z;
                          const shelfFront = z - shelfWidth/2;
                          const shelfBack = z + shelfWidth/2;
                          
                          if (shelfFront < wallFront) {
                            // Om fram kant g√•r utanf√∂r, flytta hyllan s√• fram kant √§r vid v√§ggkanten
                            adjustedZ = wallFront + shelfWidth/2;
                          } else if (shelfBack > wallBack) {
                            // Om bak kant g√•r utanf√∂r, flytta hyllan s√• bak kant √§r vid v√§ggkanten
                            adjustedZ = wallBack - shelfWidth/2;
                          }
                          
                          // Kontrollera att den justerade positionen fortfarande √§r inom v√§ggen
                          const adjustedShelfFront = adjustedZ - shelfWidth/2;
                          const adjustedShelfBack = adjustedZ + shelfWidth/2;
                          
                          if (adjustedShelfFront >= wallFront && adjustedShelfBack <= wallBack) {
                            setWallShelves(prev => [...prev, {
                              id: nextShelfId,
                              wall: `storage-${storage.id}-right`,
                              position: { x: adjustedZ, y }
                            }]);
                            setNextShelfId(prev => prev + 1);
                          }
                        }}
                      >
                        <boxGeometry args={[0.03, 0.15, 0.15]} />
                        <meshStandardMaterial color="#ffaa00" transparent opacity={0.8} />
                      </mesh>
                    );
                  }
                }
              });
              
              return wallMarkers;
            })()}

            {/* Placerade hyllor */}
            {wallShelves.map(shelf => {
              if (!floorIndex) {
                console.warn('‚ùå Cannot render shelf: floorIndex is null');
                return null;
              }
              
              const floor = FLOOR_SIZES[floorIndex];
              const actualWidth = floor.custom ? customFloorWidth : floor.width;
              const actualDepth = floor.custom ? customFloorDepth : floor.depth;
              
              let shelfPosition: [number, number, number] = [0, 0, 0];
              let shelfRotation: [number, number, number] = [0, 0, 0];
              
              if (shelf.wall === 'back') {
                shelfPosition = [shelf.position.x, shelf.position.y, -actualDepth/2];
              } else if (shelf.wall === 'left') {
                shelfPosition = [-actualWidth/2, shelf.position.y, shelf.position.x];
                shelfRotation = [0, Math.PI/2, 0];
              } else if (shelf.wall === 'right') {
                shelfPosition = [actualWidth/2, shelf.position.y, shelf.position.x];
                shelfRotation = [0, -Math.PI/2, 0];
              } else if (shelf.wall.startsWith('storage-')) {
                // Hantera f√∂rr√•dsv√§ggar
                const storageId = parseInt(shelf.wall.split('-')[1]);
                const side = shelf.wall.split('-')[2];
                const storage = storages.find(s => s.id === storageId);
                
                if (storage) {
                  const storageConfig = STORAGE_TYPES[storage.type];
                  const storageWidth = storageConfig.width;
                  const storageDepth = storageConfig.depth;
                  
                  // Ber√§kna position baserat p√• f√∂rr√•dets position och rotation
                  const storageRad = (storage.rotation * Math.PI) / 180;
                  
                  if (side === 'back') {
                    const localX = shelf.position.x;
                    shelfPosition = [
                      storage.position.x + localX * Math.cos(storageRad) - (storageDepth/2) * Math.sin(storageRad),
                      shelf.position.y,
                      storage.position.z + localX * Math.sin(storageRad) + (storageDepth/2) * Math.cos(storageRad)
                    ];
                    shelfRotation = [0, storage.rotation * Math.PI / 180, 0];
                  } else if (side === 'left') {
                    const localZ = shelf.position.x;
                    shelfPosition = [
                      storage.position.x + (-storageWidth/2) * Math.cos(storageRad) - localZ * Math.sin(storageRad),
                      shelf.position.y,
                      storage.position.z + (-storageWidth/2) * Math.sin(storageRad) + localZ * Math.cos(storageRad)
                    ];
                    shelfRotation = [0, (storage.rotation + 90) * Math.PI / 180, 0];
                  } else if (side === 'right') {
                    const localZ = shelf.position.x;
                    shelfPosition = [
                      storage.position.x + (storageWidth/2) * Math.cos(storageRad) - localZ * Math.sin(storageRad),
                      shelf.position.y,
                      storage.position.z + (storageWidth/2) * Math.sin(storageRad) + localZ * Math.cos(storageRad)
                    ];
                    shelfRotation = [0, (storage.rotation - 90) * Math.PI / 180, 0];
                  }
                } else {
                  // Fallback om f√∂rr√•dsobjektet inte hittas
                  shelfPosition = [shelf.position.x, shelf.position.y, 0];
                }
              } else {
                // Fallback f√∂r ok√§nda v√§ggar
                shelfPosition = [shelf.position.x, shelf.position.y, 0];
              }
              
              return (
                <group
                  key={shelf.id}
                  onClick={(e) => {
                    e.stopPropagation();
                    // H√∂gerklick f√∂r att ta bort hylla
                    setWallShelves(prev => prev.filter(s => s.id !== shelf.id));
                  }}
                >
                  <WallShelf
                    position={shelfPosition}
                    rotation={shelfRotation}
                    width={0.6}
                  />
                </group>
              );
            })}

            {/* Golvmark√∂rer f√∂r h√∂gtalare */}
            {speakerMarkersVisible && (() => {
              if (!floorIndex) {
                console.warn('‚ùå Cannot show speaker markers: floorIndex is null');
                return null;
              }
              
              const floor = FLOOR_SIZES[floorIndex];
              const actualWidth = floor.custom ? customFloorWidth : floor.width;
              const actualDepth = floor.custom ? customFloorDepth : floor.depth;
              
              console.log('üîä Rendering speaker markers with dimensions:', { 
                actualWidth, 
                actualDepth, 
                custom: floor.custom 
              });
              
              const floorMarkers = [];
              const markerSize = 0.5; // 4 per kvadratmeter = 0.5m avst√•nd
              
              for (let x = -actualWidth/2 + markerSize/2; x < actualWidth/2; x += markerSize) {
                for (let z = -actualDepth/2 + markerSize/2; z < actualDepth/2; z += markerSize) {
                  // Undvik omr√•den d√§r det finns diskar eller f√∂rr√•d
                  const tooCloseToCounter = counters.some(counter => {
                    const counterConfig = COUNTER_TYPES[counter.type];
                    if (counterConfig.width === 0) return false;
                    const dx = Math.abs(x - counter.position.x);
                    const dz = Math.abs(z - counter.position.z);
                    return dx < 1.0 && dz < 1.0;
                  });
                  
                  const tooCloseToStorage = storages.some(storage => {
                    const storageConfig = STORAGE_TYPES[storage.type];
                    if (storageConfig.width === 0) return false;
                    const dx = Math.abs(x - storage.position.x);
                    const dz = Math.abs(z - storage.position.z);
                    return dx < 1.0 && dz < 1.0;
                  });
                  
                  // Kontrollera om det redan finns en h√∂gtalare h√§r
                  const speakerExists = speakers.some(speaker => {
                    const dx = Math.abs(x - speaker.position.x);
                    const dz = Math.abs(z - speaker.position.z);
                    return dx < 0.3 && dz < 0.3;
                  });
                  
                  if (!tooCloseToCounter && !tooCloseToStorage && !speakerExists) {
                    floorMarkers.push(
                      <mesh 
                        key={`speaker-marker-${x}-${z}`}
                        position={[x, 0.06, z]}
                        onClick={(e) => {
                          e.stopPropagation();
                          console.log('üîä Speaker marker clicked! Placing at:', { x, z });
                          setSpeakers(prev => [...prev, {
                            id: nextSpeakerId,
                            position: { x, z },
                            rotation: 0
                          }]);
                          setNextSpeakerId(prev => prev + 1);
                        }}
                        onPointerOver={() => {
                          document.body.style.cursor = 'pointer';
                        }}
                        onPointerOut={() => {
                          document.body.style.cursor = 'default';
                        }}
                      >
                        <boxGeometry args={[0.15, 0.03, 0.15]} />
                        <meshStandardMaterial 
                          color="#4444ff" 
                          transparent 
                          opacity={0.8}
                          emissive="#2222bb"
                          emissiveIntensity={0.2}
                        />
                      </mesh>
                    );
                  }
                }
              }
              
              return floorMarkers;
            })()}

            {/* Placerade h√∂gtalare */}
            {speakers.map(speaker => (
              <group
                key={speaker.id}
                onClick={(e) => {
                  e.stopPropagation();
                  // Rotera h√∂gtalare vid klick
                  setSpeakers(prev => prev.map(s => 
                    s.id === speaker.id 
                      ? {...s, rotation: (s.rotation + 45) % 360}
                      : s
                  ));
                }}
                onContextMenu={(e) => {
                  e.stopPropagation();
                  // H√∂gerklick f√∂r att ta bort h√∂gtalare
                  setSpeakers(prev => prev.filter(s => s.id !== speaker.id));
                }}
                onPointerOver={() => {
                  document.body.style.cursor = 'pointer';
                }}
                onPointerOut={() => {
                  document.body.style.cursor = 'default';
                }}
              >
                <SpeakerOnStand
                  position={[speaker.position.x, 0, speaker.position.z]}
                  rotation={[0, (speaker.rotation * Math.PI) / 180, 0]}
                  size={speakerSize}
                />
              </group>
            ))}

            {/* Kl√§dh√§ngare i f√∂rr√•d */}
            {showClothingRacks && storages.map(storage => {
              const storageConfig = STORAGE_TYPES[storage.type];
              if (storageConfig.width === 0) return null;
              
              // Placera kl√§dh√§ngare i mitten av f√∂rr√•det
              return (
                <ClothingRack 
                  key={`clothing-rack-${storage.id}`}
                  position={[storage.position.x, 0, storage.position.z]} 
                  rotation={[0, (storage.rotation * Math.PI) / 180, 0]}
                  height={1.6}
                />
              );
            })}
            
            <OrbitControls />
          </Canvas>
          );
        })()}
      </div>

      {/* Monterhyra vattenst√§mpel - flera lager */}
        <div style={{
          position: 'absolute',
          top: '20px',
          right: '20px',
          zIndex: 1000,
          pointerEvents: 'none',
          opacity: 0.15
        }}>
          <img 
            src="/Loggo/Monterhyra Logotyp.png" 
            alt="Monterhyra" 
            style={{
              width: '150px',
              height: 'auto',
              filter: 'grayscale(100%)'
            }}
          />
        </div>
        
        {/* Extra vattenst√§mplar - sv√•rare att redigera bort */}
        <div style={{
          position: 'absolute',
          bottom: '20px',
          left: '20px',
          zIndex: 1000,
          pointerEvents: 'none',
          opacity: 0.08,
          transform: 'rotate(-45deg)'
        }}>
          <div style={{
            fontSize: '12px',
            color: '#666',
            fontWeight: 'bold',
            textShadow: '1px 1px 2px rgba(255,255,255,0.8)'
          }}>
            MONTERHYRA.SE - ENDAST F√ñR F√ñRHANDSGRANSKNING
          </div>
        </div>
        
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%) rotate(-15deg)',
          zIndex: 1000,
          pointerEvents: 'none',
          opacity: 0.05
        }}>
          <div style={{
            fontSize: '48px',
            color: '#999',
            fontWeight: 'bold',
            textShadow: '2px 2px 4px rgba(255,255,255,0.8)',
            userSelect: 'none'
          }}>
            MONTERHYRA
          </div>
        </div>
      </div>

      {/* üìù REGISTRERINGS-MODAL - Visas efter 1 minut */}
      {showRegistrationModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 10000
        }}>
          <div style={{
            background: 'white',
            padding: '40px',
            borderRadius: '16px',
            boxShadow: '0 20px 60px rgba(0,0,0,0.3)',
            maxWidth: '600px',
            width: '90%',
            maxHeight: '90vh',
            overflowY: 'auto'
          }}>
            <div style={{
              textAlign: 'center',
              marginBottom: '30px'
            }}>
              <img 
                src="/Loggo/Monterhyra Logotyp.png" 
                alt="Monterhyra" 
                style={{ height: '60px', marginBottom: '20px' }}
              />
              <h2 style={{ 
                margin: 0, 
                color: '#333',
                fontSize: '24px',
                fontWeight: '600'
              }}>
                Forts√§tt designa din monter
              </h2>
              <p style={{ 
                color: '#666', 
                margin: '10px 0 0 0',
                fontSize: '16px'
              }}>
                F√∂r att forts√§tta och f√• din personliga offert beh√∂ver vi dina f√∂retagsuppgifter
              </p>
            </div>

            <form onSubmit={(e) => {
              e.preventDefault();
              // Validera formul√§ret
              if (!registrationData.name || !registrationData.company || !registrationData.email) {
                alert('V√§nligen fyll i alla obligatoriska f√§lt (markerade med *)');
                return;
              }
              
              // Enkel email-validering
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              if (!emailRegex.test(registrationData.email)) {
                alert('V√§nligen ange en giltig e-postadress');
                return;
              }

              // Spara registreringsdata och st√§ng modal
              setIsRegistered(true);
              setShowRegistrationModal(false);
              
              // H√§r kan du skicka data till server senare
              console.log('Registrering sparad:', registrationData);
            }}>
              <div style={{
                display: 'grid',
                gridTemplateColumns: '1fr 1fr',
                gap: '20px',
                marginBottom: '30px'
              }}>
                <div style={{ gridColumn: '1 / -1' }}>
                  <h3 style={{ 
                    margin: '0 0 15px 0',
                    color: '#333',
                    fontSize: '18px',
                    fontWeight: '600',
                    borderBottom: '2px solid #e1e5e9',
                    paddingBottom: '8px'
                  }}>
                    üë§ Kontaktperson
                  </h3>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    Namn *
                  </label>
                  <input
                    type="text"
                    value={registrationData.name}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      name: e.target.value
                    })}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                    required
                  />
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    E-post *
                  </label>
                  <input
                    type="email"
                    value={registrationData.email}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      email: e.target.value
                    })}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                    required
                  />
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    F√∂retag *
                  </label>
                  <input
                    type="text"
                    value={registrationData.company}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      company: e.target.value
                    })}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                    required
                  />
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    Telefon
                  </label>
                  <input
                    type="tel"
                    value={registrationData.phone}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      phone: e.target.value
                    })}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                  />
                </div>

                <div style={{ gridColumn: '1 / -1' }}>
                  <h3 style={{ 
                    margin: '20px 0 15px 0',
                    color: '#333',
                    fontSize: '18px',
                    fontWeight: '600',
                    borderBottom: '2px solid #e1e5e9',
                    paddingBottom: '8px'
                  }}>
                    üè¢ F√∂retagsinformation
                  </h3>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    Organisationsnummer
                  </label>
                  <input
                    type="text"
                    value={registrationData.orgNumber}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      orgNumber: e.target.value
                    })}
                    placeholder="123456-7890"
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                  />
                </div>

                <div style={{ gridColumn: '1 / -1' }}>
                  <h3 style={{ 
                    margin: '20px 0 15px 0',
                    color: '#333',
                    fontSize: '18px',
                    fontWeight: '600',
                    borderBottom: '2px solid #e1e5e9',
                    paddingBottom: '8px'
                  }}>
                    üìç M√§ss- & Eventinformation
                  </h3>
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    M√§ssa/Event
                  </label>
                  <input
                    type="text"
                    value={registrationData.eventName}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      eventName: e.target.value
                    })}
                    placeholder="t.ex. Elmia, Stockholmsm√§ssan..."
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                  />
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    Stad
                  </label>
                  <input
                    type="text"
                    value={registrationData.eventCity}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      eventCity: e.target.value
                    })}
                    placeholder="t.ex. Stockholm, G√∂teborg..."
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                  />
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    Byggdatum
                  </label>
                  <input
                    type="date"
                    value={registrationData.buildDate}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      buildDate: e.target.value
                    })}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                  />
                </div>

                <div>
                  <label style={{ 
                    display: 'block', 
                    marginBottom: '5px',
                    fontWeight: '500',
                    color: '#333'
                  }}>
                    Rivdatum
                  </label>
                  <input
                    type="date"
                    value={registrationData.teardownDate}
                    onChange={(e) => setRegistrationData({
                      ...registrationData,
                      teardownDate: e.target.value
                    })}
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '2px solid #e1e5e9',
                      borderRadius: '8px',
                      fontSize: '16px'
                    }}
                  />
                </div>
              </div>

              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                paddingTop: '20px',
                borderTop: '1px solid #e1e5e9'
              }}>
                <div style={{ 
                  fontSize: '14px', 
                  color: '#666',
                  maxWidth: '60%'
                }}>
                  <p style={{ margin: 0 }}>
                    ‚úÖ Dina uppgifter anv√§nds endast f√∂r att skapa din personliga offert<br/>
                    üîí Vi delar aldrig dina uppgifter med tredje part
                  </p>
                </div>
                <div style={{ display: 'flex', gap: '15px' }}>
                  <button
                    type="button"
                    onClick={() => {
                      // Bara st√§ng modal utan att registrera
                      setShowRegistrationModal(false);
                    }}
                    style={{
                      background: 'transparent',
                      border: '2px solid #ddd',
                      borderRadius: '8px',
                      padding: '12px 24px',
                      fontSize: '16px',
                      cursor: 'pointer',
                      color: '#666'
                    }}
                  >
                    Avbryt
                  </button>
                  <button
                    type="submit"
                    style={{
                      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                      color: 'white',
                      border: 'none',
                      borderRadius: '8px',
                      padding: '12px 32px',
                      fontSize: '16px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      boxShadow: '0 4px 15px rgba(102, 126, 234, 0.4)'
                    }}
                  >
                    Forts√§tt designa ‚Üí
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Utvecklarverktyg uppl√•st-indikator */}
      {devToolsUnlocked && (
        <div style={{
          position: 'fixed',
          top: '10px',
          left: '10px',
          background: 'rgba(40, 167, 69, 0.9)',
          color: 'white',
          padding: '8px 16px',
          borderRadius: '20px',
          fontSize: '12px',
          fontWeight: 'bold',
          zIndex: 9999,
          boxShadow: '0 2px 10px rgba(0,0,0,0.2)',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          üîì UTVECKLARL√ÑGE AKTIVT (MacOS)
          <button
            onClick={() => setDevToolsUnlocked(false)}
            style={{
              background: 'transparent',
              border: 'none',
              color: 'white',
              fontSize: '12px',
              cursor: 'pointer',
              opacity: 0.8
            }}
            title="L√•s igen utvecklarverktyg"
          >
            üîí
          </button>
        </div>
      )}

      {/* Hemlig utvecklar-uppl√•sningsknapp (osynlig igen) */}
      {!devToolsUnlocked && (
        <div 
          onClick={(e) => {
            e.preventDefault();
            console.log('üîë Secret unlock button clicked!');
            const userCode = prompt('üîë Utvecklarkod:');
            if (userCode === 'MONTER2025') {
              setDevToolsUnlocked(true);
              alert('‚úÖ Utvecklarverktyg uppl√•sta! Nu kan du anv√§nda Cmd+Option+I, h√∂gerklick, etc.');
            } else if (userCode !== null) {
              alert('‚ùå Fel kod. F√∂rs√∂k igen.');
            }
          }}
          style={{
            position: 'fixed',
            bottom: '10px',
            right: '10px',
            width: '10px',
            height: '10px',
            background: 'transparent',
            cursor: 'pointer',
            zIndex: 9999
          }}
          title="üîì"
        />
      )}

      {/* VEPA PDF Generator Popup */}
      {showVepaPDFGenerator && (() => {
        const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
        const wallWidth = floorConfig?.custom ? customFloorWidth : (floorConfig?.width || 3);
        const wallDepth = floorConfig?.custom ? customFloorDepth : (floorConfig?.depth || 1.5);
        
        return (
          <VepaPDFGenerator
            wallShape={wallShape}
            wallWidth={wallWidth}
            wallDepth={wallDepth}
            wallHeight={wallHeight}
            existingDesigns={vepaWallDesigns.length > 0 ? vepaWallDesigns : undefined}
            onClose={() => setShowVepaPDFGenerator(false)}
            onApplyDesigns={(designs) => {
              setVepaWallDesigns(designs);
              console.log('üìê VEPA designs applicerade:', designs);
            }}
          />
        );
      })()}

      {/* Forex PDF Generator Popup */}
      {showForexPDFGenerator && (() => {
        const floorConfig = floorIndex !== null ? FLOOR_SIZES[floorIndex] : null;
        const wallWidth = floorConfig?.custom ? customFloorWidth : (floorConfig?.width || 3);
        const wallDepth = floorConfig?.custom ? customFloorDepth : (floorConfig?.depth || 1.5);
        
        return (
          <ForexPDFGenerator
            wallShape={wallShape as 'straight' | 'l' | 'u'}
            wallWidth={wallWidth}
            wallDepth={wallDepth}
            wallHeight={wallHeight}
            existingDesigns={forexWallDesigns.length > 0 ? forexWallDesigns : undefined}
            onClose={() => setShowForexPDFGenerator(false)}
            onApplyDesigns={(designs) => {
              setForexWallDesigns(designs);
              console.log('üñºÔ∏è Forex designs applicerade:', designs);
            }}
          />
        );
      })()}

      {/* Storage PDF Generator */}
      {showStoragePDFGenerator && selectedStorageForDesign !== null && (() => {
        const storage = storages.find(s => s.id === selectedStorageForDesign);
        if (!storage) return null;
        
        const storageConfig = STORAGE_TYPES[storage.type];
        const freeWalls = calculateFreeStorageWalls(storage);
        const existingDesign = storageDesigns.get(storage.id);
        
        return (
          <StoragePDFGenerator
            storageWidth={storageConfig.width}
            storageDepth={storageConfig.depth}
            storageHeight={wallHeight}
            freeWalls={freeWalls}
            existingDesigns={existingDesign?.designs}
            existingPrintType={existingDesign?.printType}
            onClose={() => {
              setShowStoragePDFGenerator(false);
              setSelectedStorageForDesign(null);
            }}
            onApplyDesigns={(designs, printType) => {
              setStorageDesigns(prev => {
                const newMap = new Map(prev);
                newMap.set(storage.id, { designs, printType });
                return newMap;
              });
              console.log('üñºÔ∏è Storage designs applicerade f√∂r f√∂rr√•d #' + storage.id + ':', designs);
            }}
          />
        );
      })()}

      {/* Admin Portal */}
      {showAdminPortal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          zIndex: 10000,
          backgroundColor: 'white'
        }}>
          <AdminPortal />
          <button
            onClick={() => setShowAdminPortal(false)}
            style={{
              position: 'fixed',
              top: 20,
              right: 20,
              padding: '10px 20px',
              backgroundColor: '#e74c3c',
              color: 'white',
              border: 'none',
              borderRadius: '6px',
              cursor: 'pointer',
              fontSize: '14px',
              fontWeight: 'bold',
              zIndex: 10001
            }}
          >
            ‚úï St√§ng Admin
          </button>
        </div>
      )}

      {/* Admin-knapp l√§ngst ner */}
      <button
        onClick={() => setShowAdminPortal(true)}
        style={{
          position: 'fixed',
          bottom: 20,
          right: 20,
          padding: '12px 24px',
          backgroundColor: '#2c3e50',
          color: 'white',
          border: 'none',
          borderRadius: '8px',
          cursor: 'pointer',
          fontSize: '14px',
          fontWeight: 'bold',
          boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
          zIndex: 1000,
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}
        title="√ñppna admin-portal f√∂r best√§llningar"
      >
        üîê Admin
      </button>

    </div>
  );
}


